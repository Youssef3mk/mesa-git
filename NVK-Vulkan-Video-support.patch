diff --git a/src/nouveau/headers/meson.build b/src/nouveau/headers/meson.build
index da2015d236b1fde484211c4557188bb9aaa8f7b5..5acfcb1075ae58c976fe88b77b58497b93f94f18 100644
--- a/src/nouveau/headers/meson.build
+++ b/src/nouveau/headers/meson.build
@@ -21,6 +21,9 @@ nv_classes = [
   'clc397',
   'clc3c0',
   'clc597',
+  'clc5b0',
+  'clc7b0',
+  'clc9b0',
   'clc5c0',
   'clc697',
   'clc6c0',
diff --git a/src/nouveau/headers/nv_device_info.h b/src/nouveau/headers/nv_device_info.h
index 476de2ee3c9eedecafcd80d67b0c0ae211ab4c6b..628d39364caada73acbd533844184f31b9e5a472 100644
--- a/src/nouveau/headers/nv_device_info.h
+++ b/src/nouveau/headers/nv_device_info.h
@@ -44,6 +44,7 @@ struct nv_device_info {
    uint16_t cls_eng3d;
    uint16_t cls_m2mf;
    uint16_t cls_compute;
+   uint16_t cls_video;
 
    uint64_t vram_size_B;
    uint64_t bar_size_B;
diff --git a/src/nouveau/headers/nv_push.c b/src/nouveau/headers/nv_push.c
index 5197bc0252b22def24e018f8d33c2f7ac40cb706..5212f7f06add89428b157997e53b6db2612afca2 100644
--- a/src/nouveau/headers/nv_push.c
+++ b/src/nouveau/headers/nv_push.c
@@ -3,6 +3,7 @@
 #include "nv_device_info.h"
 
 #include <inttypes.h>
+#include "util/os_misc.h"
 
 #include "nv_push_cl902d.h"
 #include "nv_push_cl9039.h"
@@ -21,6 +22,7 @@
 #include "nv_push_clc3c0.h"
 #include "nv_push_clc597.h"
 #include "nv_push_clc5c0.h"
+#include "nv_push_clc5b0.h"
 #include "nv_push_clc697.h"
 #include "nv_push_clc6c0.h"
 #include "nv_push_clc797.h"
@@ -70,6 +72,13 @@ vk_push_print(FILE *fp, const struct nv_push *push,
               const struct nv_device_info *devinfo)
 {
    uint32_t *cur = push->start;
+   uint16_t curr_subchans[8] = {0};
+   curr_subchans[0] = devinfo->cls_eng3d;
+   curr_subchans[1] = devinfo->cls_compute;
+   curr_subchans[3] = 0x2d;
+   curr_subchans[4] = devinfo->cls_copy;
+
+
 
    const bool print_offsets = true;
 
@@ -156,56 +165,63 @@ vk_push_print(FILE *fp, const struct nv_push *push,
             if (mthd < 0x100) {
                mthd_name = P_PARSE_NV906F_MTHD(mthd);
             } else {
-               switch (subchan) {
-               case 0:
-                  if (devinfo->cls_eng3d >= 0xc797)
+               int class_id = curr_subchans[subchan];
+               int cls_lo = class_id & 0xff;
+               int cls_hi = (class_id & 0xff00) >> 8;
+               switch (cls_lo) {
+               case 0x97:
+                  if (cls_hi >= 0xc7)
                      mthd_name = P_PARSE_NVC797_MTHD(mthd);
-                  else if (devinfo->cls_eng3d >= 0xc697)
+                  else if (cls_hi >= 0xc6)
                      mthd_name = P_PARSE_NVC697_MTHD(mthd);
-                  else if (devinfo->cls_eng3d >= 0xc597)
+                  else if (cls_hi >= 0xc5)
                      mthd_name = P_PARSE_NVC597_MTHD(mthd);
-                  else if (devinfo->cls_eng3d >= 0xc397)
+                  else if (cls_hi >= 0xc3)
                      mthd_name = P_PARSE_NVC397_MTHD(mthd);
-                  else if (devinfo->cls_eng3d >= 0xb197)
+                  else if (cls_hi >= 0xb1)
                      mthd_name = P_PARSE_NVB197_MTHD(mthd);
-                  else if (devinfo->cls_eng3d >= 0xa097)
+                  else if (cls_hi >= 0xa0)
                      mthd_name = P_PARSE_NVA097_MTHD(mthd);
                   else
                      mthd_name = P_PARSE_NV9097_MTHD(mthd);
                   break;
-               case 1:
-                  if (devinfo->cls_compute >= 0xc7c0)
+               case 0xc0:
+                  if (cls_hi >= 0xc7)
                      mthd_name = P_PARSE_NVC7C0_MTHD(mthd);
-                  else if (devinfo->cls_compute >= 0xc6c0)
+                  else if (cls_hi >= 0xc6)
                      mthd_name = P_PARSE_NVC6C0_MTHD(mthd);
-                  else if (devinfo->cls_compute >= 0xc5c0)
+                  else if (cls_hi >= 0xc5)
                      mthd_name = P_PARSE_NVC5C0_MTHD(mthd);
-                  else if (devinfo->cls_compute >= 0xc3c0)
+                  else if (cls_hi >= 0xc3)
                      mthd_name = P_PARSE_NVC3C0_MTHD(mthd);
-                  else if (devinfo->cls_compute >= 0xc0c0)
+                  else if (cls_hi >= 0xc0)
                      mthd_name = P_PARSE_NVC0C0_MTHD(mthd);
                   else
                      mthd_name = P_PARSE_NVA0C0_MTHD(mthd);
                   break;
-               case 2:
-                  if (devinfo->cls_m2mf >= 0xa140)
+               case 0x39:
+               case 0x40:
+                  if (cls_hi >= 0xa1)
                      mthd_name = P_PARSE_NVA140_MTHD(mthd);
-                  else if (devinfo->cls_m2mf >= 0xa040)
+                  else if (cls_hi >= 0xa0)
                      mthd_name = P_PARSE_NVA040_MTHD(mthd);
-                  else if (devinfo->cls_m2mf >= 0x9039)
+                  else if (cls_hi >= 0x90)
                      mthd_name = P_PARSE_NV9039_MTHD(mthd);
                   break;
-               case 3:
+               case 0x2d:
                   mthd_name = P_PARSE_NV902D_MTHD(mthd);
                   break;
-               case 4:
-                  if (devinfo->cls_copy >= 0xc1b5)
+               case 0xb5:
+                  if (cls_hi >= 0xc1)
                      mthd_name = P_PARSE_NVC1B5_MTHD(mthd);
-                  else if (devinfo->cls_copy >= 0xa0b5)
+                  else if (cls_hi >= 0xa0)
                      mthd_name = P_PARSE_NVA0B5_MTHD(mthd);
                   else
                      mthd_name = P_PARSE_NV90B5_MTHD(mthd);
                   break;
+               case 0xb0:
+                  mthd_name = P_PARSE_NVC5B0_MTHD(mthd);
+                  break;
                default:
                   mthd_name = "unknown method";
                   break;
@@ -219,39 +235,48 @@ vk_push_print(FILE *fp, const struct nv_push *push,
          fprintf(fp, "\tmthd %04x %s\n", mthd, mthd_name);
          if (mthd < 0x100) {
             P_DUMP_NV906F_MTHD_DATA(fp, mthd, value, "\t\t");
+            if (mthd == 0) { /* SET_OBJECT */
+               curr_subchans[subchan] = value & 0xffff;
+            }
          } else {
-            switch (subchan) {
-            case 0:
-               if (devinfo->cls_eng3d >= 0xc597)
+            int class_id = curr_subchans[subchan];
+            int cls_lo = class_id & 0xff;
+            int cls_hi = (class_id & 0xff00) >> 8;
+            switch (cls_lo) {
+            case 0x97:
+               if (cls_hi >= 0xc5)
                   P_DUMP_NVC597_MTHD_DATA(fp, mthd, value, "\t\t");
-               else if (devinfo->cls_eng3d >= 0xc397)
+               else if (cls_hi >= 0xc3)
                   P_DUMP_NVC397_MTHD_DATA(fp, mthd, value, "\t\t");
-               else if (devinfo->cls_eng3d >= 0xb197)
+               else if (cls_hi >= 0xb1)
                   P_DUMP_NVB197_MTHD_DATA(fp, mthd, value, "\t\t");
-               else if (devinfo->cls_eng3d >= 0xa097)
+               else if (cls_hi >= 0xa0)
                   P_DUMP_NVA097_MTHD_DATA(fp, mthd, value, "\t\t");
                else
                   P_DUMP_NV9097_MTHD_DATA(fp, mthd, value, "\t\t");
                break;
-            case 1:
-               if (devinfo->cls_compute >= 0xc3c0)
+            case 0xc0:
+               if (cls_hi >= 0xc3)
                   P_DUMP_NVC3C0_MTHD_DATA(fp, mthd, value, "\t\t");
-               else if (devinfo->cls_compute >= 0xc0c0)
+               else if (cls_hi >= 0xc0)
                   P_DUMP_NVC0C0_MTHD_DATA(fp, mthd, value, "\t\t");
                else
                   P_DUMP_NVA0C0_MTHD_DATA(fp, mthd, value, "\t\t");
                break;
-            case 3:
+            case 0x2d:
                P_DUMP_NV902D_MTHD_DATA(fp, mthd, value, "\t\t");
                break;
-            case 4:
-               if (devinfo->cls_copy >= 0xc1b5)
+            case 0xb5:
+               if (cls_hi >= 0xc1)
                   P_DUMP_NVC1B5_MTHD_DATA(fp, mthd, value, "\t\t");
-               else if (devinfo->cls_copy >= 0xa0b5)
+               else if (cls_hi >= 0xa0)
                   P_DUMP_NVA0B5_MTHD_DATA(fp, mthd, value, "\t\t");
                else
                   P_DUMP_NV90B5_MTHD_DATA(fp, mthd, value, "\t\t");
                break;
+            case 0xb0:
+                  P_DUMP_NVC5B0_MTHD_DATA(fp, mthd, value, "\t\t");
+                  break;
             default:
                fprintf(fp, "%s.VALUE = 0x%x\n", "\t\t", value);
                break;
diff --git a/src/nouveau/headers/nv_push.h b/src/nouveau/headers/nv_push.h
index 3b09f8ad5669f6279ec1fb888b8b1bd3b94a93b1..a152a6f543de05b13826a984796cc7b79bbc99a5 100644
--- a/src/nouveau/headers/nv_push.h
+++ b/src/nouveau/headers/nv_push.h
@@ -74,6 +74,9 @@ void vk_push_print(FILE *fp, const struct nv_push *push,
 #define SUBC_NV90B5 4
 #define SUBC_NVC1B5 4
 
+/* video decode will get push on sub channel 4 */
+#define SUBC_NVC5B0 4
+
 static inline uint32_t
 NVC0_FIFO_PKHDR_SQ(int subc, int mthd, unsigned size)
 {
diff --git a/src/nouveau/headers/nv_push_dump.c b/src/nouveau/headers/nv_push_dump.c
index 589e8cf1ead57b40193e595d5ab4ce9aeca08d7c..4bd7c0420285b8fdb068bb8eaa36a9a88818be89 100644
--- a/src/nouveau/headers/nv_push_dump.c
+++ b/src/nouveau/headers/nv_push_dump.c
@@ -19,6 +19,7 @@
 #include "clc697.h"
 #include "clc997.h"
 
+#include "clc5b0.h"
 #include "cla0c0.h"
 #include "clb0c0.h"
 #include "clc0c0.h"
diff --git a/src/nouveau/headers/nv_push_rs/lib.rs b/src/nouveau/headers/nv_push_rs/lib.rs
index d3a5955279fe01053de106f922ee71e71e8d4d65..8d92b8c9c19c67c662c71e6d056ea64c6a2cc089 100644
--- a/src/nouveau/headers/nv_push_rs/lib.rs
+++ b/src/nouveau/headers/nv_push_rs/lib.rs
@@ -14,6 +14,8 @@ fn class_to_subc(class: u16) -> u8 {
         0x39 => 2,
         0x2d => 3,
         0xb5 => 4,
+        0xb0 => 4,
+        0x6f => 4,
         _ => panic!("Invalid class: {class}"),
     }
 }
diff --git a/src/nouveau/headers/nvidia/classes/clc5b0.h b/src/nouveau/headers/nvidia/classes/clc5b0.h
new file mode 100644
index 0000000000000000000000000000000000000000..ab73c680b76e7c47f61fd5da0a32b6b16f0c870e
--- /dev/null
+++ b/src/nouveau/headers/nvidia/classes/clc5b0.h
@@ -0,0 +1,437 @@
+/*******************************************************************************
+    Copyright (c) 1993-2020, NVIDIA CORPORATION. All rights reserved.
+
+    Permission is hereby granted, free of charge, to any person obtaining a
+    copy of this software and associated documentation files (the "Software"),
+    to deal in the Software without restriction, including without limitation
+    the rights to use, copy, modify, merge, publish, distribute, sublicense,
+    and/or sell copies of the Software, and to permit persons to whom the
+    Software is furnished to do so, subject to the following conditions:
+
+    The above copyright notice and this permission notice shall be included in
+    all copies or substantial portions of the Software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+    DEALINGS IN THE SOFTWARE.
+
+*******************************************************************************/
+
+#ifndef _clc5b0_h_
+#define _clc5b0_h_
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define NVC5B0_VIDEO_DECODER                                                       (0x0000C5B0)
+
+
+
+#define NVC5B0_NOP                                                              (0x00000100)
+#define NVC5B0_NOP_PARAMETER                                                    31:0
+#define NVC5B0_SET_APPLICATION_ID                                               (0x00000200)
+#define NVC5B0_SET_APPLICATION_ID_ID                                            31:0
+#define NVC5B0_SET_APPLICATION_ID_ID_MPEG12                                     (0x00000001)
+#define NVC5B0_SET_APPLICATION_ID_ID_VC1                                        (0x00000002)
+#define NVC5B0_SET_APPLICATION_ID_ID_H264                                       (0x00000003)
+#define NVC5B0_SET_APPLICATION_ID_ID_MPEG4                                      (0x00000004)
+#define NVC5B0_SET_APPLICATION_ID_ID_VP8                                        (0x00000005)
+#define NVC5B0_SET_APPLICATION_ID_ID_HEVC                                       (0x00000007)
+#define NVC5B0_SET_APPLICATION_ID_ID_VP9                                        (0x00000009)
+#define NVC5B0_SET_APPLICATION_ID_ID_HEVC_PARSER                                (0x0000000C)
+#define NVC5B0_SET_WATCHDOG_TIMER                                               (0x00000204)
+#define NVC5B0_SET_WATCHDOG_TIMER_TIMER                                         31:0
+#define NVC5B0_SEMAPHORE_A                                                      (0x00000240)
+#define NVC5B0_SEMAPHORE_A_UPPER                                                7:0
+#define NVC5B0_SEMAPHORE_B                                                      (0x00000244)
+#define NVC5B0_SEMAPHORE_B_LOWER                                                31:0
+#define NVC5B0_SEMAPHORE_C                                                      (0x00000248)
+#define NVC5B0_SEMAPHORE_C_PAYLOAD                                              31:0
+#define NVC5B0_CTX_SAVE_AREA                                                    (0x0000024C)
+#define NVC5B0_CTX_SAVE_AREA_OFFSET                                             31:0
+#define NVC5B0_CTX_SWITCH                                                       (0x00000250)
+#define NVC5B0_CTX_SWITCH_OP                                                    1:0
+#define NVC5B0_CTX_SWITCH_OP_CTX_UPDATE                                         (0x00000000)
+#define NVC5B0_CTX_SWITCH_OP_CTX_SAVE                                           (0x00000001)
+#define NVC5B0_CTX_SWITCH_OP_CTX_RESTORE                                        (0x00000002)
+#define NVC5B0_CTX_SWITCH_OP_CTX_FORCERESTORE                                   (0x00000003)
+#define NVC5B0_CTX_SWITCH_CTXID_VALID                                           2:2
+#define NVC5B0_CTX_SWITCH_CTXID_VALID_FALSE                                     (0x00000000)
+#define NVC5B0_CTX_SWITCH_CTXID_VALID_TRUE                                      (0x00000001)
+#define NVC5B0_CTX_SWITCH_RESERVED0                                             7:3
+#define NVC5B0_CTX_SWITCH_CTX_ID                                                23:8
+#define NVC5B0_CTX_SWITCH_RESERVED1                                             31:24
+#define NVC5B0_EXECUTE                                                          (0x00000300)
+#define NVC5B0_EXECUTE_NOTIFY                                                   0:0
+#define NVC5B0_EXECUTE_NOTIFY_DISABLE                                           (0x00000000)
+#define NVC5B0_EXECUTE_NOTIFY_ENABLE                                            (0x00000001)
+#define NVC5B0_EXECUTE_NOTIFY_ON                                                1:1
+#define NVC5B0_EXECUTE_NOTIFY_ON_END                                            (0x00000000)
+#define NVC5B0_EXECUTE_NOTIFY_ON_BEGIN                                          (0x00000001)
+#define NVC5B0_EXECUTE_AWAKEN                                                   8:8
+#define NVC5B0_EXECUTE_AWAKEN_DISABLE                                           (0x00000000)
+#define NVC5B0_EXECUTE_AWAKEN_ENABLE                                            (0x00000001)
+#define NVC5B0_SEMAPHORE_D                                                      (0x00000304)
+#define NVC5B0_SEMAPHORE_D_STRUCTURE_SIZE                                       0:0
+#define NVC5B0_SEMAPHORE_D_STRUCTURE_SIZE_ONE                                   (0x00000000)
+#define NVC5B0_SEMAPHORE_D_STRUCTURE_SIZE_FOUR                                  (0x00000001)
+#define NVC5B0_SEMAPHORE_D_AWAKEN_ENABLE                                        8:8
+#define NVC5B0_SEMAPHORE_D_AWAKEN_ENABLE_FALSE                                  (0x00000000)
+#define NVC5B0_SEMAPHORE_D_AWAKEN_ENABLE_TRUE                                   (0x00000001)
+#define NVC5B0_SEMAPHORE_D_OPERATION                                            17:16
+#define NVC5B0_SEMAPHORE_D_OPERATION_RELEASE                                    (0x00000000)
+#define NVC5B0_SEMAPHORE_D_OPERATION_RESERVED0                                  (0x00000001)
+#define NVC5B0_SEMAPHORE_D_OPERATION_RESERVED1                                  (0x00000002)
+#define NVC5B0_SEMAPHORE_D_OPERATION_TRAP                                       (0x00000003)
+#define NVC5B0_SEMAPHORE_D_FLUSH_DISABLE                                        21:21
+#define NVC5B0_SEMAPHORE_D_FLUSH_DISABLE_FALSE                                  (0x00000000)
+#define NVC5B0_SEMAPHORE_D_FLUSH_DISABLE_TRUE                                   (0x00000001)
+#define NVC5B0_SET_CONTROL_PARAMS                                               (0x00000400)
+#define NVC5B0_SET_CONTROL_PARAMS_CODEC_TYPE                                    3:0
+#define NVC5B0_SET_CONTROL_PARAMS_CODEC_TYPE_MPEG1                              (0x00000000)
+#define NVC5B0_SET_CONTROL_PARAMS_CODEC_TYPE_MPEG2                              (0x00000001)
+#define NVC5B0_SET_CONTROL_PARAMS_CODEC_TYPE_VC1                                (0x00000002)
+#define NVC5B0_SET_CONTROL_PARAMS_CODEC_TYPE_H264                               (0x00000003)
+#define NVC5B0_SET_CONTROL_PARAMS_CODEC_TYPE_MPEG4                              (0x00000004)
+#define NVC5B0_SET_CONTROL_PARAMS_CODEC_TYPE_VP8                                (0x00000005)
+#define NVC5B0_SET_CONTROL_PARAMS_CODEC_TYPE_HEVC                               (0x00000007)
+#define NVC5B0_SET_CONTROL_PARAMS_CODEC_TYPE_VP9                                (0x00000009)
+#define NVC5B0_SET_CONTROL_PARAMS_GPTIMER_ON                                    4:4
+#define NVC5B0_SET_CONTROL_PARAMS_RET_ERROR                                     5:5
+#define NVC5B0_SET_CONTROL_PARAMS_ERR_CONCEAL_ON                                6:6
+#define NVC5B0_SET_CONTROL_PARAMS_ERROR_FRM_IDX                                 12:7
+#define NVC5B0_SET_CONTROL_PARAMS_MBTIMER_ON                                    13:13
+#define NVC5B0_SET_CONTROL_PARAMS_EC_INTRA_FRAME_USING_PSLC                     14:14
+#define NVC5B0_SET_CONTROL_PARAMS_ALL_INTRA_FRAME                               17:17
+#define NVC5B0_SET_CONTROL_PARAMS_RESERVED                                      31:18
+#define NVC5B0_SET_DRV_PIC_SETUP_OFFSET                                         (0x00000404)
+#define NVC5B0_SET_DRV_PIC_SETUP_OFFSET_OFFSET                                  31:0
+#define NVC5B0_SET_IN_BUF_BASE_OFFSET                                           (0x00000408)
+#define NVC5B0_SET_IN_BUF_BASE_OFFSET_OFFSET                                    31:0
+#define NVC5B0_SET_PICTURE_INDEX                                                (0x0000040C)
+#define NVC5B0_SET_PICTURE_INDEX_INDEX                                          31:0
+#define NVC5B0_SET_SLICE_OFFSETS_BUF_OFFSET                                     (0x00000410)
+#define NVC5B0_SET_SLICE_OFFSETS_BUF_OFFSET_OFFSET                              31:0
+#define NVC5B0_SET_COLOC_DATA_OFFSET                                            (0x00000414)
+#define NVC5B0_SET_COLOC_DATA_OFFSET_OFFSET                                     31:0
+#define NVC5B0_SET_HISTORY_OFFSET                                               (0x00000418)
+#define NVC5B0_SET_HISTORY_OFFSET_OFFSET                                        31:0
+#define NVC5B0_SET_DISPLAY_BUF_SIZE                                             (0x0000041C)
+#define NVC5B0_SET_DISPLAY_BUF_SIZE_SIZE                                        31:0
+#define NVC5B0_SET_HISTOGRAM_OFFSET                                             (0x00000420)
+#define NVC5B0_SET_HISTOGRAM_OFFSET_OFFSET                                      31:0
+#define NVC5B0_SET_NVDEC_STATUS_OFFSET                                          (0x00000424)
+#define NVC5B0_SET_NVDEC_STATUS_OFFSET_OFFSET                                   31:0
+#define NVC5B0_SET_DISPLAY_BUF_LUMA_OFFSET                                      (0x00000428)
+#define NVC5B0_SET_DISPLAY_BUF_LUMA_OFFSET_OFFSET                               31:0
+#define NVC5B0_SET_DISPLAY_BUF_CHROMA_OFFSET                                    (0x0000042C)
+#define NVC5B0_SET_DISPLAY_BUF_CHROMA_OFFSET_OFFSET                             31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET0                                         (0x00000430)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET0_OFFSET                                  31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET1                                         (0x00000434)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET1_OFFSET                                  31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET2                                         (0x00000438)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET2_OFFSET                                  31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET3                                         (0x0000043C)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET3_OFFSET                                  31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET4                                         (0x00000440)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET4_OFFSET                                  31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET5                                         (0x00000444)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET5_OFFSET                                  31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET6                                         (0x00000448)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET6_OFFSET                                  31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET7                                         (0x0000044C)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET7_OFFSET                                  31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET8                                         (0x00000450)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET8_OFFSET                                  31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET9                                         (0x00000454)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET9_OFFSET                                  31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET10                                        (0x00000458)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET10_OFFSET                                 31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET11                                        (0x0000045C)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET11_OFFSET                                 31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET12                                        (0x00000460)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET12_OFFSET                                 31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET13                                        (0x00000464)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET13_OFFSET                                 31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET14                                        (0x00000468)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET14_OFFSET                                 31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET15                                        (0x0000046C)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET15_OFFSET                                 31:0
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET16                                        (0x00000470)
+#define NVC5B0_SET_PICTURE_LUMA_OFFSET16_OFFSET                                 31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET0                                       (0x00000474)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET0_OFFSET                                31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET1                                       (0x00000478)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET1_OFFSET                                31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET2                                       (0x0000047C)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET2_OFFSET                                31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET3                                       (0x00000480)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET3_OFFSET                                31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET4                                       (0x00000484)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET4_OFFSET                                31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET5                                       (0x00000488)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET5_OFFSET                                31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET6                                       (0x0000048C)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET6_OFFSET                                31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET7                                       (0x00000490)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET7_OFFSET                                31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET8                                       (0x00000494)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET8_OFFSET                                31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET9                                       (0x00000498)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET9_OFFSET                                31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET10                                      (0x0000049C)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET10_OFFSET                               31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET11                                      (0x000004A0)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET11_OFFSET                               31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET12                                      (0x000004A4)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET12_OFFSET                               31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET13                                      (0x000004A8)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET13_OFFSET                               31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET14                                      (0x000004AC)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET14_OFFSET                               31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET15                                      (0x000004B0)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET15_OFFSET                               31:0
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET16                                      (0x000004B4)
+#define NVC5B0_SET_PICTURE_CHROMA_OFFSET16_OFFSET                               31:0
+#define NVC5B0_SET_PIC_SCRATCH_BUF_OFFSET                                       (0x000004B8)
+#define NVC5B0_SET_PIC_SCRATCH_BUF_OFFSET_OFFSET                                31:0
+#define NVC5B0_SET_EXTERNAL_MVBUFFER_OFFSET                                     (0x000004BC)
+#define NVC5B0_SET_EXTERNAL_MVBUFFER_OFFSET_OFFSET                              31:0
+#define NVC5B0_H264_SET_MBHIST_BUF_OFFSET                                       (0x00000500)
+#define NVC5B0_H264_SET_MBHIST_BUF_OFFSET_OFFSET                                31:0
+#define NVC5B0_VP8_SET_PROB_DATA_OFFSET                                         (0x00000540)
+#define NVC5B0_VP8_SET_PROB_DATA_OFFSET_OFFSET                                  31:0
+#define NVC5B0_VP8_SET_HEADER_PARTITION_BUF_BASE_OFFSET                         (0x00000544)
+#define NVC5B0_VP8_SET_HEADER_PARTITION_BUF_BASE_OFFSET_OFFSET                  31:0
+#define NVC5B0_HEVC_SET_SCALING_LIST_OFFSET                                     (0x00000580)
+#define NVC5B0_HEVC_SET_SCALING_LIST_OFFSET_OFFSET                              31:0
+#define NVC5B0_HEVC_SET_TILE_SIZES_OFFSET                                       (0x00000584)
+#define NVC5B0_HEVC_SET_TILE_SIZES_OFFSET_OFFSET                                31:0
+#define NVC5B0_HEVC_SET_FILTER_BUFFER_OFFSET                                    (0x00000588)
+#define NVC5B0_HEVC_SET_FILTER_BUFFER_OFFSET_OFFSET                             31:0
+#define NVC5B0_HEVC_SET_SAO_BUFFER_OFFSET                                       (0x0000058C)
+#define NVC5B0_HEVC_SET_SAO_BUFFER_OFFSET_OFFSET                                31:0
+#define NVC5B0_HEVC_SET_SLICE_INFO_BUFFER_OFFSET                                (0x00000590)
+#define NVC5B0_HEVC_SET_SLICE_INFO_BUFFER_OFFSET_OFFSET                         31:0
+#define NVC5B0_HEVC_SET_SLICE_GROUP_INDEX                                       (0x00000594)
+#define NVC5B0_HEVC_SET_SLICE_GROUP_INDEX_OFFSET                                31:0
+#define NVC5B0_VP9_SET_PROB_TAB_BUF_OFFSET                                      (0x000005C0)
+#define NVC5B0_VP9_SET_PROB_TAB_BUF_OFFSET_OFFSET                               31:0
+#define NVC5B0_VP9_SET_CTX_COUNTER_BUF_OFFSET                                   (0x000005C4)
+#define NVC5B0_VP9_SET_CTX_COUNTER_BUF_OFFSET_OFFSET                            31:0
+#define NVC5B0_VP9_SET_SEGMENT_READ_BUF_OFFSET                                  (0x000005C8)
+#define NVC5B0_VP9_SET_SEGMENT_READ_BUF_OFFSET_OFFSET                           31:0
+#define NVC5B0_VP9_SET_SEGMENT_WRITE_BUF_OFFSET                                 (0x000005CC)
+#define NVC5B0_VP9_SET_SEGMENT_WRITE_BUF_OFFSET_OFFSET                          31:0
+#define NVC5B0_VP9_SET_TILE_SIZE_BUF_OFFSET                                     (0x000005D0)
+#define NVC5B0_VP9_SET_TILE_SIZE_BUF_OFFSET_OFFSET                              31:0
+#define NVC5B0_VP9_SET_COL_MVWRITE_BUF_OFFSET                                   (0x000005D4)
+#define NVC5B0_VP9_SET_COL_MVWRITE_BUF_OFFSET_OFFSET                            31:0
+#define NVC5B0_VP9_SET_COL_MVREAD_BUF_OFFSET                                    (0x000005D8)
+#define NVC5B0_VP9_SET_COL_MVREAD_BUF_OFFSET_OFFSET                             31:0
+#define NVC5B0_VP9_SET_FILTER_BUFFER_OFFSET                                     (0x000005DC)
+#define NVC5B0_VP9_SET_FILTER_BUFFER_OFFSET_OFFSET                              31:0
+
+#define NVC5B0_ERROR_NONE                                                       (0x00000000)
+#define NVC5B0_OS_ERROR_EXECUTE_INSUFFICIENT_DATA                               (0x00000001)
+#define NVC5B0_OS_ERROR_SEMAPHORE_INSUFFICIENT_DATA                             (0x00000002)
+#define NVC5B0_OS_ERROR_INVALID_METHOD                                          (0x00000003)
+#define NVC5B0_OS_ERROR_INVALID_DMA_PAGE                                        (0x00000004)
+#define NVC5B0_OS_ERROR_UNHANDLED_INTERRUPT                                     (0x00000005)
+#define NVC5B0_OS_ERROR_EXCEPTION                                               (0x00000006)
+#define NVC5B0_OS_ERROR_INVALID_CTXSW_REQUEST                                   (0x00000007)
+#define NVC5B0_OS_ERROR_APPLICATION                                             (0x00000008)
+#define NVC5B0_OS_ERROR_SW_BREAKPT                                              (0x00000009)
+#define NVC5B0_OS_INTERRUPT_EXECUTE_AWAKEN                                      (0x00000100)
+#define NVC5B0_OS_INTERRUPT_BACKEND_SEMAPHORE_AWAKEN                            (0x00000200)
+#define NVC5B0_OS_INTERRUPT_CTX_ERROR_FBIF                                      (0x00000300)
+#define NVC5B0_OS_INTERRUPT_LIMIT_VIOLATION                                     (0x00000400)
+#define NVC5B0_OS_INTERRUPT_LIMIT_AND_FBIF_CTX_ERROR                            (0x00000500)
+#define NVC5B0_OS_INTERRUPT_HALT_ENGINE                                         (0x00000600)
+#define NVC5B0_OS_INTERRUPT_TRAP_NONSTALL                                       (0x00000700)
+#define NVC5B0_H264_VLD_ERR_SEQ_DATA_INCONSISTENT                               (0x00004001)
+#define NVC5B0_H264_VLD_ERR_PIC_DATA_INCONSISTENT                               (0x00004002)
+#define NVC5B0_H264_VLD_ERR_SLC_DATA_BUF_ADDR_OUT_OF_BOUNDS                     (0x00004100)
+#define NVC5B0_H264_VLD_ERR_BITSTREAM_ERROR                                     (0x00004101)
+#define NVC5B0_H264_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                          (0x000041F8)
+#define NVC5B0_H264_VLD_ERR_SLC_HDR_OUT_SIZE_NOT_MULT256                        (0x00004200)
+#define NVC5B0_H264_VLD_ERR_SLC_DATA_OUT_SIZE_NOT_MULT256                       (0x00004201)
+#define NVC5B0_H264_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                        (0x00004203)
+#define NVC5B0_H264_VLD_ERR_CTX_DMA_ID_SLC_HDR_OUT_INVALID                      (0x00004204)
+#define NVC5B0_H264_VLD_ERR_SLC_HDR_OUT_BUF_TOO_SMALL                           (0x00004205)
+#define NVC5B0_H264_VLD_ERR_SLC_HDR_OUT_BUF_ALREADY_VALID                       (0x00004206)
+#define NVC5B0_H264_VLD_ERR_SLC_DATA_OUT_BUF_TOO_SMALL                          (0x00004207)
+#define NVC5B0_H264_VLD_ERR_DATA_BUF_CNT_TOO_SMALL                              (0x00004208)
+#define NVC5B0_H264_VLD_ERR_BITSTREAM_EMPTY                                     (0x00004209)
+#define NVC5B0_H264_VLD_ERR_FRAME_WIDTH_TOO_LARGE                               (0x0000420A)
+#define NVC5B0_H264_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                              (0x0000420B)
+#define NVC5B0_H264_VLD_ERR_HIST_BUF_TOO_SMALL                                  (0x00004300)
+#define NVC5B0_VC1_VLD_ERR_PIC_DATA_BUF_ADDR_OUT_OF_BOUND                       (0x00005100)
+#define NVC5B0_VC1_VLD_ERR_BITSTREAM_ERROR                                      (0x00005101)
+#define NVC5B0_VC1_VLD_ERR_PIC_HDR_OUT_SIZE_NOT_MULT256                         (0x00005200)
+#define NVC5B0_VC1_VLD_ERR_PIC_DATA_OUT_SIZE_NOT_MULT256                        (0x00005201)
+#define NVC5B0_VC1_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                           (0x00005202)
+#define NVC5B0_VC1_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                         (0x00005203)
+#define NVC5B0_VC1_VLD_ERR_CTX_DMA_ID_PIC_HDR_OUT_INVALID                       (0x00005204)
+#define NVC5B0_VC1_VLD_ERR_SLC_HDR_OUT_BUF_TOO_SMALL                            (0x00005205)
+#define NVC5B0_VC1_VLD_ERR_PIC_HDR_OUT_BUF_ALREADY_VALID                        (0x00005206)
+#define NVC5B0_VC1_VLD_ERR_PIC_DATA_OUT_BUF_TOO_SMALL                           (0x00005207)
+#define NVC5B0_VC1_VLD_ERR_DATA_INFO_IN_BUF_TOO_SMALL                           (0x00005208)
+#define NVC5B0_VC1_VLD_ERR_BITSTREAM_EMPTY                                      (0x00005209)
+#define NVC5B0_VC1_VLD_ERR_FRAME_WIDTH_TOO_LARGE                                (0x0000520A)
+#define NVC5B0_VC1_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                               (0x0000520B)
+#define NVC5B0_VC1_VLD_ERR_PIC_DATA_OUT_BUF_FULL_TIME_OUT                       (0x00005300)
+#define NVC5B0_MPEG12_VLD_ERR_SLC_DATA_BUF_ADDR_OUT_OF_BOUNDS                   (0x00006100)
+#define NVC5B0_MPEG12_VLD_ERR_BITSTREAM_ERROR                                   (0x00006101)
+#define NVC5B0_MPEG12_VLD_ERR_SLC_DATA_OUT_SIZE_NOT_MULT256                     (0x00006200)
+#define NVC5B0_MPEG12_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                        (0x00006201)
+#define NVC5B0_MPEG12_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                      (0x00006202)
+#define NVC5B0_MPEG12_VLD_ERR_SLC_DATA_OUT_BUF_TOO_SMALL                        (0x00006203)
+#define NVC5B0_MPEG12_VLD_ERR_DATA_INFO_IN_BUF_TOO_SMALL                        (0x00006204)
+#define NVC5B0_MPEG12_VLD_ERR_BITSTREAM_EMPTY                                   (0x00006205)
+#define NVC5B0_MPEG12_VLD_ERR_INVALID_PIC_STRUCTURE                             (0x00006206)
+#define NVC5B0_MPEG12_VLD_ERR_INVALID_PIC_CODING_TYPE                           (0x00006207)
+#define NVC5B0_MPEG12_VLD_ERR_FRAME_WIDTH_TOO_LARGE                             (0x00006208)
+#define NVC5B0_MPEG12_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                            (0x00006209)
+#define NVC5B0_MPEG12_VLD_ERR_SLC_DATA_OUT_BUF_FULL_TIME_OUT                    (0x00006300)
+#define NVC5B0_CMN_VLD_ERR_PDEC_RETURNED_ERROR                                  (0x00007101)
+#define NVC5B0_CMN_VLD_ERR_EDOB_FLUSH_TIME_OUT                                  (0x00007102)
+#define NVC5B0_CMN_VLD_ERR_EDOB_REWIND_TIME_OUT                                 (0x00007103)
+#define NVC5B0_CMN_VLD_ERR_VLD_WD_TIME_OUT                                      (0x00007104)
+#define NVC5B0_CMN_VLD_ERR_NUM_SLICES_ZERO                                      (0x00007105)
+#define NVC5B0_MPEG4_VLD_ERR_PIC_DATA_BUF_ADDR_OUT_OF_BOUND                     (0x00008100)
+#define NVC5B0_MPEG4_VLD_ERR_BITSTREAM_ERROR                                    (0x00008101)
+#define NVC5B0_MPEG4_VLD_ERR_PIC_HDR_OUT_SIZE_NOT_MULT256                       (0x00008200)
+#define NVC5B0_MPEG4_VLD_ERR_PIC_DATA_OUT_SIZE_NOT_MULT256                      (0x00008201)
+#define NVC5B0_MPEG4_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                         (0x00008202)
+#define NVC5B0_MPEG4_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                       (0x00008203)
+#define NVC5B0_MPEG4_VLD_ERR_CTX_DMA_ID_PIC_HDR_OUT_INVALID                     (0x00008204)
+#define NVC5B0_MPEG4_VLD_ERR_SLC_HDR_OUT_BUF_TOO_SMALL                          (0x00008205)
+#define NVC5B0_MPEG4_VLD_ERR_PIC_HDR_OUT_BUF_ALREADY_VALID                      (0x00008206)
+#define NVC5B0_MPEG4_VLD_ERR_PIC_DATA_OUT_BUF_TOO_SMALL                         (0x00008207)
+#define NVC5B0_MPEG4_VLD_ERR_DATA_INFO_IN_BUF_TOO_SMALL                         (0x00008208)
+#define NVC5B0_MPEG4_VLD_ERR_BITSTREAM_EMPTY                                    (0x00008209)
+#define NVC5B0_MPEG4_VLD_ERR_FRAME_WIDTH_TOO_LARGE                              (0x0000820A)
+#define NVC5B0_MPEG4_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                             (0x0000820B)
+#define NVC5B0_MPEG4_VLD_ERR_PIC_DATA_OUT_BUF_FULL_TIME_OUT                     (0x00051E01)
+#define NVC5B0_DEC_ERROR_MPEG12_APPTIMER_EXPIRED                                (0xDEC10001)
+#define NVC5B0_DEC_ERROR_MPEG12_MVTIMER_EXPIRED                                 (0xDEC10002)
+#define NVC5B0_DEC_ERROR_MPEG12_INVALID_TOKEN                                   (0xDEC10003)
+#define NVC5B0_DEC_ERROR_MPEG12_SLICEDATA_MISSING                               (0xDEC10004)
+#define NVC5B0_DEC_ERROR_MPEG12_HWERR_INTERRUPT                                 (0xDEC10005)
+#define NVC5B0_DEC_ERROR_MPEG12_DETECTED_VLD_FAILURE                            (0xDEC10006)
+#define NVC5B0_DEC_ERROR_MPEG12_PICTURE_INIT                                    (0xDEC10100)
+#define NVC5B0_DEC_ERROR_MPEG12_STATEMACHINE_FAILURE                            (0xDEC10101)
+#define NVC5B0_DEC_ERROR_MPEG12_INVALID_CTXID_PIC                               (0xDEC10901)
+#define NVC5B0_DEC_ERROR_MPEG12_INVALID_CTXID_UCODE                             (0xDEC10902)
+#define NVC5B0_DEC_ERROR_MPEG12_INVALID_CTXID_FC                                (0xDEC10903)
+#define NVC5B0_DEC_ERROR_MPEG12_INVALID_CTXID_SLH                               (0xDEC10904)
+#define NVC5B0_DEC_ERROR_MPEG12_INVALID_UCODE_SIZE                              (0xDEC10905)
+#define NVC5B0_DEC_ERROR_MPEG12_INVALID_SLICE_COUNT                             (0xDEC10906)
+#define NVC5B0_DEC_ERROR_VC1_APPTIMER_EXPIRED                                   (0xDEC20001)
+#define NVC5B0_DEC_ERROR_VC1_MVTIMER_EXPIRED                                    (0xDEC20002)
+#define NVC5B0_DEC_ERROR_VC1_INVALID_TOKEN                                      (0xDEC20003)
+#define NVC5B0_DEC_ERROR_VC1_SLICEDATA_MISSING                                  (0xDEC20004)
+#define NVC5B0_DEC_ERROR_VC1_HWERR_INTERRUPT                                    (0xDEC20005)
+#define NVC5B0_DEC_ERROR_VC1_DETECTED_VLD_FAILURE                               (0xDEC20006)
+#define NVC5B0_DEC_ERROR_VC1_TIMEOUT_POLLING_FOR_DATA                           (0xDEC20007)
+#define NVC5B0_DEC_ERROR_VC1_PDEC_PIC_END_UNALIGNED                             (0xDEC20008)
+#define NVC5B0_DEC_ERROR_VC1_WDTIMER_EXPIRED                                    (0xDEC20009)
+#define NVC5B0_DEC_ERROR_VC1_ERRINTSTART                                        (0xDEC20010)
+#define NVC5B0_DEC_ERROR_VC1_IQT_ERRINT                                         (0xDEC20011)
+#define NVC5B0_DEC_ERROR_VC1_MC_ERRINT                                          (0xDEC20012)
+#define NVC5B0_DEC_ERROR_VC1_MC_IQT_ERRINT                                      (0xDEC20013)
+#define NVC5B0_DEC_ERROR_VC1_REC_ERRINT                                         (0xDEC20014)
+#define NVC5B0_DEC_ERROR_VC1_REC_IQT_ERRINT                                     (0xDEC20015)
+#define NVC5B0_DEC_ERROR_VC1_REC_MC_ERRINT                                      (0xDEC20016)
+#define NVC5B0_DEC_ERROR_VC1_REC_MC_IQT_ERRINT                                  (0xDEC20017)
+#define NVC5B0_DEC_ERROR_VC1_DBF_ERRINT                                         (0xDEC20018)
+#define NVC5B0_DEC_ERROR_VC1_DBF_IQT_ERRINT                                     (0xDEC20019)
+#define NVC5B0_DEC_ERROR_VC1_DBF_MC_ERRINT                                      (0xDEC2001A)
+#define NVC5B0_DEC_ERROR_VC1_DBF_MC_IQT_ERRINT                                  (0xDEC2001B)
+#define NVC5B0_DEC_ERROR_VC1_DBF_REC_ERRINT                                     (0xDEC2001C)
+#define NVC5B0_DEC_ERROR_VC1_DBF_REC_IQT_ERRINT                                 (0xDEC2001D)
+#define NVC5B0_DEC_ERROR_VC1_DBF_REC_MC_ERRINT                                  (0xDEC2001E)
+#define NVC5B0_DEC_ERROR_VC1_DBF_REC_MC_IQT_ERRINT                              (0xDEC2001F)
+#define NVC5B0_DEC_ERROR_VC1_PICTURE_INIT                                       (0xDEC20100)
+#define NVC5B0_DEC_ERROR_VC1_STATEMACHINE_FAILURE                               (0xDEC20101)
+#define NVC5B0_DEC_ERROR_VC1_INVALID_CTXID_PIC                                  (0xDEC20901)
+#define NVC5B0_DEC_ERROR_VC1_INVALID_CTXID_UCODE                                (0xDEC20902)
+#define NVC5B0_DEC_ERROR_VC1_INVALID_CTXID_FC                                   (0xDEC20903)
+#define NVC5B0_DEC_ERROR_VC1_INVAILD_CTXID_SLH                                  (0xDEC20904)
+#define NVC5B0_DEC_ERROR_VC1_INVALID_UCODE_SIZE                                 (0xDEC20905)
+#define NVC5B0_DEC_ERROR_VC1_INVALID_SLICE_COUNT                                (0xDEC20906)
+#define NVC5B0_DEC_ERROR_H264_APPTIMER_EXPIRED                                  (0xDEC30001)
+#define NVC5B0_DEC_ERROR_H264_MVTIMER_EXPIRED                                   (0xDEC30002)
+#define NVC5B0_DEC_ERROR_H264_INVALID_TOKEN                                     (0xDEC30003)
+#define NVC5B0_DEC_ERROR_H264_SLICEDATA_MISSING                                 (0xDEC30004)
+#define NVC5B0_DEC_ERROR_H264_HWERR_INTERRUPT                                   (0xDEC30005)
+#define NVC5B0_DEC_ERROR_H264_DETECTED_VLD_FAILURE                              (0xDEC30006)
+#define NVC5B0_DEC_ERROR_H264_ERRINTSTART                                       (0xDEC30010)
+#define NVC5B0_DEC_ERROR_H264_IQT_ERRINT                                        (0xDEC30011)
+#define NVC5B0_DEC_ERROR_H264_MC_ERRINT                                         (0xDEC30012)
+#define NVC5B0_DEC_ERROR_H264_MC_IQT_ERRINT                                     (0xDEC30013)
+#define NVC5B0_DEC_ERROR_H264_REC_ERRINT                                        (0xDEC30014)
+#define NVC5B0_DEC_ERROR_H264_REC_IQT_ERRINT                                    (0xDEC30015)
+#define NVC5B0_DEC_ERROR_H264_REC_MC_ERRINT                                     (0xDEC30016)
+#define NVC5B0_DEC_ERROR_H264_REC_MC_IQT_ERRINT                                 (0xDEC30017)
+#define NVC5B0_DEC_ERROR_H264_DBF_ERRINT                                        (0xDEC30018)
+#define NVC5B0_DEC_ERROR_H264_DBF_IQT_ERRINT                                    (0xDEC30019)
+#define NVC5B0_DEC_ERROR_H264_DBF_MC_ERRINT                                     (0xDEC3001A)
+#define NVC5B0_DEC_ERROR_H264_DBF_MC_IQT_ERRINT                                 (0xDEC3001B)
+#define NVC5B0_DEC_ERROR_H264_DBF_REC_ERRINT                                    (0xDEC3001C)
+#define NVC5B0_DEC_ERROR_H264_DBF_REC_IQT_ERRINT                                (0xDEC3001D)
+#define NVC5B0_DEC_ERROR_H264_DBF_REC_MC_ERRINT                                 (0xDEC3001E)
+#define NVC5B0_DEC_ERROR_H264_DBF_REC_MC_IQT_ERRINT                             (0xDEC3001F)
+#define NVC5B0_DEC_ERROR_H264_PICTURE_INIT                                      (0xDEC30100)
+#define NVC5B0_DEC_ERROR_H264_STATEMACHINE_FAILURE                              (0xDEC30101)
+#define NVC5B0_DEC_ERROR_H264_INVALID_CTXID_PIC                                 (0xDEC30901)
+#define NVC5B0_DEC_ERROR_H264_INVALID_CTXID_UCODE                               (0xDEC30902)
+#define NVC5B0_DEC_ERROR_H264_INVALID_CTXID_FC                                  (0xDEC30903)
+#define NVC5B0_DEC_ERROR_H264_INVALID_CTXID_SLH                                 (0xDEC30904)
+#define NVC5B0_DEC_ERROR_H264_INVALID_UCODE_SIZE                                (0xDEC30905)
+#define NVC5B0_DEC_ERROR_H264_INVALID_SLICE_COUNT                               (0xDEC30906)
+#define NVC5B0_DEC_ERROR_MPEG4_APPTIMER_EXPIRED                                 (0xDEC40001)
+#define NVC5B0_DEC_ERROR_MPEG4_MVTIMER_EXPIRED                                  (0xDEC40002)
+#define NVC5B0_DEC_ERROR_MPEG4_INVALID_TOKEN                                    (0xDEC40003)
+#define NVC5B0_DEC_ERROR_MPEG4_SLICEDATA_MISSING                                (0xDEC40004)
+#define NVC5B0_DEC_ERROR_MPEG4_HWERR_INTERRUPT                                  (0xDEC40005)
+#define NVC5B0_DEC_ERROR_MPEG4_DETECTED_VLD_FAILURE                             (0xDEC40006)
+#define NVC5B0_DEC_ERROR_MPEG4_TIMEOUT_POLLING_FOR_DATA                         (0xDEC40007)
+#define NVC5B0_DEC_ERROR_MPEG4_PDEC_PIC_END_UNALIGNED                           (0xDEC40008)
+#define NVC5B0_DEC_ERROR_MPEG4_WDTIMER_EXPIRED                                  (0xDEC40009)
+#define NVC5B0_DEC_ERROR_MPEG4_ERRINTSTART                                      (0xDEC40010)
+#define NVC5B0_DEC_ERROR_MPEG4_IQT_ERRINT                                       (0xDEC40011)
+#define NVC5B0_DEC_ERROR_MPEG4_MC_ERRINT                                        (0xDEC40012)
+#define NVC5B0_DEC_ERROR_MPEG4_MC_IQT_ERRINT                                    (0xDEC40013)
+#define NVC5B0_DEC_ERROR_MPEG4_REC_ERRINT                                       (0xDEC40014)
+#define NVC5B0_DEC_ERROR_MPEG4_REC_IQT_ERRINT                                   (0xDEC40015)
+#define NVC5B0_DEC_ERROR_MPEG4_REC_MC_ERRINT                                    (0xDEC40016)
+#define NVC5B0_DEC_ERROR_MPEG4_REC_MC_IQT_ERRINT                                (0xDEC40017)
+#define NVC5B0_DEC_ERROR_MPEG4_DBF_ERRINT                                       (0xDEC40018)
+#define NVC5B0_DEC_ERROR_MPEG4_DBF_IQT_ERRINT                                   (0xDEC40019)
+#define NVC5B0_DEC_ERROR_MPEG4_DBF_MC_ERRINT                                    (0xDEC4001A)
+#define NVC5B0_DEC_ERROR_MPEG4_DBF_MC_IQT_ERRINT                                (0xDEC4001B)
+#define NVC5B0_DEC_ERROR_MPEG4_DBF_REC_ERRINT                                   (0xDEC4001C)
+#define NVC5B0_DEC_ERROR_MPEG4_DBF_REC_IQT_ERRINT                               (0xDEC4001D)
+#define NVC5B0_DEC_ERROR_MPEG4_DBF_REC_MC_ERRINT                                (0xDEC4001E)
+#define NVC5B0_DEC_ERROR_MPEG4_DBF_REC_MC_IQT_ERRINT                            (0xDEC4001F)
+#define NVC5B0_DEC_ERROR_MPEG4_PICTURE_INIT                                     (0xDEC40100)
+#define NVC5B0_DEC_ERROR_MPEG4_STATEMACHINE_FAILURE                             (0xDEC40101)
+#define NVC5B0_DEC_ERROR_MPEG4_INVALID_CTXID_PIC                                (0xDEC40901)
+#define NVC5B0_DEC_ERROR_MPEG4_INVALID_CTXID_UCODE                              (0xDEC40902)
+#define NVC5B0_DEC_ERROR_MPEG4_INVALID_CTXID_FC                                 (0xDEC40903)
+#define NVC5B0_DEC_ERROR_MPEG4_INVALID_CTXID_SLH                                (0xDEC40904)
+#define NVC5B0_DEC_ERROR_MPEG4_INVALID_UCODE_SIZE                               (0xDEC40905)
+#define NVC5B0_DEC_ERROR_MPEG4_INVALID_SLICE_COUNT                              (0xDEC40906)
+
+#ifdef __cplusplus
+};     /* extern "C" */
+#endif
+#endif // _clc5b0_h
diff --git a/src/nouveau/headers/nvidia/classes/clc5b7.h b/src/nouveau/headers/nvidia/classes/clc5b7.h
new file mode 100644
index 0000000000000000000000000000000000000000..dbc4b25e2dc75076d74f0a0cbde620166ed36c27
--- /dev/null
+++ b/src/nouveau/headers/nvidia/classes/clc5b7.h
@@ -0,0 +1,491 @@
+/*******************************************************************************
+    Copyright (c) 1993-2020, NVIDIA CORPORATION. All rights reserved.
+
+    Permission is hereby granted, free of charge, to any person obtaining a
+    copy of this software and associated documentation files (the "Software"),
+    to deal in the Software without restriction, including without limitation
+    the rights to use, copy, modify, merge, publish, distribute, sublicense,
+    and/or sell copies of the Software, and to permit persons to whom the
+    Software is furnished to do so, subject to the following conditions:
+
+    The above copyright notice and this permission notice shall be included in
+    all copies or substantial portions of the Software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+    DEALINGS IN THE SOFTWARE.
+
+*******************************************************************************/
+
+#ifndef clc5b7_h_
+#define clc5b7_h_
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define NVC5B7_VIDEO_ENCODER                                                             (0x0000C5B7U)
+
+
+
+#define NVC5B7_NOP                                                              (0x00000100U)
+#define NVC5B7_NOP_PARAMETER                                                    31:0
+#define NVC5B7_NOP_PARAMETER_HIGH_FIELD                                         31U
+#define NVC5B7_NOP_PARAMETER_LOW_FIELD                                          0U
+#define NVC5B7_SET_APPLICATION_ID                                               (0x00000200U)
+#define NVC5B7_SET_APPLICATION_ID_ID                                            31:0
+#define NVC5B7_SET_APPLICATION_ID_ID_HIGH_FIELD                                 31U
+#define NVC5B7_SET_APPLICATION_ID_ID_LOW_FIELD                                  0U
+#define NVC5B7_SET_APPLICATION_ID_ID_NVENC_H264                                 (0x00000001U)
+#define NVC5B7_SET_APPLICATION_ID_ID_NVENC_VP8                                  (0x00000002U)
+#define NVC5B7_SET_APPLICATION_ID_ID_NVENC_H265                                 (0x00000003U)
+#define NVC5B7_SET_APPLICATION_ID_ID_NVENC_VP9                                  (0x00000004U)
+#define NVC5B7_SET_APPLICATION_ID_ID_NVENC_RC                                   (0x00000005U)
+#define NVC5B7_SET_APPLICATION_ID_ID_NVENC_OFS                                  (0x00000006U)
+#define NVC5B7_SET_WATCHDOG_TIMER                                               (0x00000204U)
+#define NVC5B7_SET_WATCHDOG_TIMER_TIMER                                         31:0
+#define NVC5B7_SET_WATCHDOG_TIMER_TIMER_HIGH_FIELD                              31U
+#define NVC5B7_SET_WATCHDOG_TIMER_TIMER_LOW_FIELD                               0U
+#define NVC5B7_SEMAPHORE_A                                                      (0x00000240U)
+#define NVC5B7_SEMAPHORE_A_UPPER                                                7:0
+#define NVC5B7_SEMAPHORE_A_UPPER_HIGH_FIELD                                     7U
+#define NVC5B7_SEMAPHORE_A_UPPER_LOW_FIELD                                      0U
+#define NVC5B7_SEMAPHORE_B                                                      (0x00000244U)
+#define NVC5B7_SEMAPHORE_B_LOWER                                                31:0
+#define NVC5B7_SEMAPHORE_B_LOWER_HIGH_FIELD                                     31U
+#define NVC5B7_SEMAPHORE_B_LOWER_LOW_FIELD                                      0U
+#define NVC5B7_SEMAPHORE_C                                                      (0x00000248U)
+#define NVC5B7_SEMAPHORE_C_PAYLOAD                                              31:0
+#define NVC5B7_SEMAPHORE_C_PAYLOAD_HIGH_FIELD                                   31U
+#define NVC5B7_SEMAPHORE_C_PAYLOAD_LOW_FIELD                                    0U
+#define NVC5B7_CTX_SAVE_AREA                                                    (0x0000024CU)
+#define NVC5B7_CTX_SAVE_AREA_OFFSET                                             27:0
+#define NVC5B7_CTX_SAVE_AREA_OFFSET_HIGH_FIELD                                  27U
+#define NVC5B7_CTX_SAVE_AREA_OFFSET_LOW_FIELD                                   0U
+#define NVC5B7_CTX_SAVE_AREA_CTX_VALID                                          31:28
+#define NVC5B7_CTX_SAVE_AREA_CTX_VALID_HIGH_FIELD                               31U
+#define NVC5B7_CTX_SAVE_AREA_CTX_VALID_LOW_FIELD                                28U
+#define NVC5B7_CTX_SWITCH                                                       (0x00000250U)
+#define NVC5B7_CTX_SWITCH_RESTORE                                               0:0
+#define NVC5B7_CTX_SWITCH_RESTORE_HIGH_FIELD                                    0U
+#define NVC5B7_CTX_SWITCH_RESTORE_LOW_FIELD                                     0U
+#define NVC5B7_CTX_SWITCH_RESTORE_FALSE                                         (0x00000000U)
+#define NVC5B7_CTX_SWITCH_RESTORE_TRUE                                          (0x00000001U)
+#define NVC5B7_CTX_SWITCH_RST_NOTIFY                                            1:1
+#define NVC5B7_CTX_SWITCH_RST_NOTIFY_HIGH_FIELD                                 1U
+#define NVC5B7_CTX_SWITCH_RST_NOTIFY_LOW_FIELD                                  1U
+#define NVC5B7_CTX_SWITCH_RST_NOTIFY_FALSE                                      (0x00000000U)
+#define NVC5B7_CTX_SWITCH_RST_NOTIFY_TRUE                                       (0x00000001U)
+#define NVC5B7_CTX_SWITCH_RESERVED                                              7:2
+#define NVC5B7_CTX_SWITCH_RESERVED_HIGH_FIELD                                   7U
+#define NVC5B7_CTX_SWITCH_RESERVED_LOW_FIELD                                    2U
+#define NVC5B7_CTX_SWITCH_ASID                                                  23:8
+#define NVC5B7_CTX_SWITCH_ASID_HIGH_FIELD                                       23U
+#define NVC5B7_CTX_SWITCH_ASID_LOW_FIELD                                        8U
+#define NVC5B7_EXECUTE                                                          (0x00000300U)
+#define NVC5B7_EXECUTE_NOTIFY                                                   0:0
+#define NVC5B7_EXECUTE_NOTIFY_HIGH_FIELD                                        0U
+#define NVC5B7_EXECUTE_NOTIFY_LOW_FIELD                                         0U
+#define NVC5B7_EXECUTE_NOTIFY_DISABLE                                           (0x00000000U)
+#define NVC5B7_EXECUTE_NOTIFY_ENABLE                                            (0x00000001U)
+#define NVC5B7_EXECUTE_NOTIFY_ON                                                1:1
+#define NVC5B7_EXECUTE_NOTIFY_ON_HIGH_FIELD                                     1U
+#define NVC5B7_EXECUTE_NOTIFY_ON_LOW_FIELD                                      1U
+#define NVC5B7_EXECUTE_NOTIFY_ON_END                                            (0x00000000U)
+#define NVC5B7_EXECUTE_NOTIFY_ON_BEGIN                                          (0x00000001U)
+#define NVC5B7_EXECUTE_AWAKEN                                                   8:8
+#define NVC5B7_EXECUTE_AWAKEN_HIGH_FIELD                                        8U
+#define NVC5B7_EXECUTE_AWAKEN_LOW_FIELD                                         8U
+#define NVC5B7_EXECUTE_AWAKEN_DISABLE                                           (0x00000000U)
+#define NVC5B7_EXECUTE_AWAKEN_ENABLE                                            (0x00000001U)
+#define NVC5B7_SEMAPHORE_D                                                      (0x00000304U)
+#define NVC5B7_SEMAPHORE_D_STRUCTURE_SIZE                                       0:0
+#define NVC5B7_SEMAPHORE_D_STRUCTURE_SIZE_HIGH_FIELD                            0U
+#define NVC5B7_SEMAPHORE_D_STRUCTURE_SIZE_LOW_FIELD                             0U
+#define NVC5B7_SEMAPHORE_D_STRUCTURE_SIZE_ONE                                   (0x00000000U)
+#define NVC5B7_SEMAPHORE_D_STRUCTURE_SIZE_FOUR                                  (0x00000001U)
+#define NVC5B7_SEMAPHORE_D_AWAKEN_ENABLE                                        8:8
+#define NVC5B7_SEMAPHORE_D_AWAKEN_ENABLE_HIGH_FIELD                             8U
+#define NVC5B7_SEMAPHORE_D_AWAKEN_ENABLE_LOW_FIELD                              8U
+#define NVC5B7_SEMAPHORE_D_AWAKEN_ENABLE_FALSE                                  (0x00000000U)
+#define NVC5B7_SEMAPHORE_D_AWAKEN_ENABLE_TRUE                                   (0x00000001U)
+#define NVC5B7_SEMAPHORE_D_OPERATION                                            17:16
+#define NVC5B7_SEMAPHORE_D_OPERATION_HIGH_FIELD                                 17U
+#define NVC5B7_SEMAPHORE_D_OPERATION_LOW_FIELD                                  16U
+#define NVC5B7_SEMAPHORE_D_OPERATION_RELEASE                                    (0x00000000U)
+#define NVC5B7_SEMAPHORE_D_OPERATION_RESERVED0                                  (0x00000001U)
+#define NVC5B7_SEMAPHORE_D_OPERATION_RESERVED1                                  (0x00000002U)
+#define NVC5B7_SEMAPHORE_D_OPERATION_TRAP                                       (0x00000003U)
+#define NVC5B7_SEMAPHORE_D_FLUSH_DISABLE                                        21:21
+#define NVC5B7_SEMAPHORE_D_FLUSH_DISABLE_HIGH_FIELD                             21U
+#define NVC5B7_SEMAPHORE_D_FLUSH_DISABLE_LOW_FIELD                              21U
+#define NVC5B7_SEMAPHORE_D_FLUSH_DISABLE_FALSE                                  (0x00000000U)
+#define NVC5B7_SEMAPHORE_D_FLUSH_DISABLE_TRUE                                   (0x00000001U)
+#define NVC5B7_SET_IN_REF_PIC0_LUMA                                             (0x00000400U)
+#define NVC5B7_SET_IN_REF_PIC0_LUMA_OFFSET                                      31:0
+#define NVC5B7_SET_IN_REF_PIC0_LUMA_OFFSET_HIGH_FIELD                           31U
+#define NVC5B7_SET_IN_REF_PIC0_LUMA_OFFSET_LOW_FIELD                            0U
+#define NVC5B7_SET_IN_REF_PIC1_LUMA                                             (0x00000404U)
+#define NVC5B7_SET_IN_REF_PIC1_LUMA_OFFSET                                      31:0
+#define NVC5B7_SET_IN_REF_PIC1_LUMA_OFFSET_HIGH_FIELD                           31U
+#define NVC5B7_SET_IN_REF_PIC1_LUMA_OFFSET_LOW_FIELD                            0U
+#define NVC5B7_SET_IN_REF_PIC2_LUMA                                             (0x00000408U)
+#define NVC5B7_SET_IN_REF_PIC2_LUMA_OFFSET                                      31:0
+#define NVC5B7_SET_IN_REF_PIC2_LUMA_OFFSET_HIGH_FIELD                           31U
+#define NVC5B7_SET_IN_REF_PIC2_LUMA_OFFSET_LOW_FIELD                            0U
+#define NVC5B7_SET_IN_REF_PIC3_LUMA                                             (0x0000040CU)
+#define NVC5B7_SET_IN_REF_PIC3_LUMA_OFFSET                                      31:0
+#define NVC5B7_SET_IN_REF_PIC3_LUMA_OFFSET_HIGH_FIELD                           31U
+#define NVC5B7_SET_IN_REF_PIC3_LUMA_OFFSET_LOW_FIELD                            0U
+#define NVC5B7_SET_IN_REF_PIC4_LUMA                                             (0x00000410U)
+#define NVC5B7_SET_IN_REF_PIC4_LUMA_OFFSET                                      31:0
+#define NVC5B7_SET_IN_REF_PIC4_LUMA_OFFSET_HIGH_FIELD                           31U
+#define NVC5B7_SET_IN_REF_PIC4_LUMA_OFFSET_LOW_FIELD                            0U
+#define NVC5B7_SET_IN_REF_PIC5_LUMA                                             (0x00000414U)
+#define NVC5B7_SET_IN_REF_PIC5_LUMA_OFFSET                                      31:0
+#define NVC5B7_SET_IN_REF_PIC5_LUMA_OFFSET_HIGH_FIELD                           31U
+#define NVC5B7_SET_IN_REF_PIC5_LUMA_OFFSET_LOW_FIELD                            0U
+#define NVC5B7_SET_IN_REF_PIC6_LUMA                                             (0x00000418U)
+#define NVC5B7_SET_IN_REF_PIC6_LUMA_OFFSET                                      31:0
+#define NVC5B7_SET_IN_REF_PIC6_LUMA_OFFSET_HIGH_FIELD                           31U
+#define NVC5B7_SET_IN_REF_PIC6_LUMA_OFFSET_LOW_FIELD                            0U
+#define NVC5B7_SET_IN_REF_PIC7_LUMA                                             (0x0000041CU)
+#define NVC5B7_SET_IN_REF_PIC7_LUMA_OFFSET                                      31:0
+#define NVC5B7_SET_IN_REF_PIC7_LUMA_OFFSET_HIGH_FIELD                           31U
+#define NVC5B7_SET_IN_REF_PIC7_LUMA_OFFSET_LOW_FIELD                            0U
+#define NVC5B7_SET_IN_REF_PIC8_LUMA                                             (0x00000420U)
+#define NVC5B7_SET_IN_REF_PIC8_LUMA_OFFSET                                      31:0
+#define NVC5B7_SET_IN_REF_PIC8_LUMA_OFFSET_HIGH_FIELD                           31U
+#define NVC5B7_SET_IN_REF_PIC8_LUMA_OFFSET_LOW_FIELD                            0U
+#define NVC5B7_SET_IN_REF_PIC9_LUMA                                             (0x00000424U)
+#define NVC5B7_SET_IN_REF_PIC9_LUMA_OFFSET                                      31:0
+#define NVC5B7_SET_IN_REF_PIC9_LUMA_OFFSET_HIGH_FIELD                           31U
+#define NVC5B7_SET_IN_REF_PIC9_LUMA_OFFSET_LOW_FIELD                            0U
+#define NVC5B7_SET_IN_REF_PIC10_LUMA                                            (0x00000428U)
+#define NVC5B7_SET_IN_REF_PIC10_LUMA_OFFSET                                     31:0
+#define NVC5B7_SET_IN_REF_PIC10_LUMA_OFFSET_HIGH_FIELD                          31U
+#define NVC5B7_SET_IN_REF_PIC10_LUMA_OFFSET_LOW_FIELD                           0U
+#define NVC5B7_SET_IN_REF_PIC11_LUMA                                            (0x0000042CU)
+#define NVC5B7_SET_IN_REF_PIC11_LUMA_OFFSET                                     31:0
+#define NVC5B7_SET_IN_REF_PIC11_LUMA_OFFSET_HIGH_FIELD                          31U
+#define NVC5B7_SET_IN_REF_PIC11_LUMA_OFFSET_LOW_FIELD                           0U
+#define NVC5B7_SET_IN_REF_PIC12_LUMA                                            (0x00000430U)
+#define NVC5B7_SET_IN_REF_PIC12_LUMA_OFFSET                                     31:0
+#define NVC5B7_SET_IN_REF_PIC12_LUMA_OFFSET_HIGH_FIELD                          31U
+#define NVC5B7_SET_IN_REF_PIC12_LUMA_OFFSET_LOW_FIELD                           0U
+#define NVC5B7_SET_IN_REF_PIC13_LUMA                                            (0x00000434U)
+#define NVC5B7_SET_IN_REF_PIC13_LUMA_OFFSET                                     31:0
+#define NVC5B7_SET_IN_REF_PIC13_LUMA_OFFSET_HIGH_FIELD                          31U
+#define NVC5B7_SET_IN_REF_PIC13_LUMA_OFFSET_LOW_FIELD                           0U
+#define NVC5B7_SET_IN_REF_PIC14_LUMA                                            (0x00000438U)
+#define NVC5B7_SET_IN_REF_PIC14_LUMA_OFFSET                                     31:0
+#define NVC5B7_SET_IN_REF_PIC14_LUMA_OFFSET_HIGH_FIELD                          31U
+#define NVC5B7_SET_IN_REF_PIC14_LUMA_OFFSET_LOW_FIELD                           0U
+#define NVC5B7_SET_IN_REF_PIC15_LUMA                                            (0x0000043CU)
+#define NVC5B7_SET_IN_REF_PIC15_LUMA_OFFSET                                     31:0
+#define NVC5B7_SET_IN_REF_PIC15_LUMA_OFFSET_HIGH_FIELD                          31U
+#define NVC5B7_SET_IN_REF_PIC15_LUMA_OFFSET_LOW_FIELD                           0U
+#define NVC5B7_SET_IN_REF_PIC0_CHROMA                                           (0x00000440U)
+#define NVC5B7_SET_IN_REF_PIC0_CHROMA_OFFSET                                    31:0
+#define NVC5B7_SET_IN_REF_PIC0_CHROMA_OFFSET_HIGH_FIELD                         31U
+#define NVC5B7_SET_IN_REF_PIC0_CHROMA_OFFSET_LOW_FIELD                          0U
+#define NVC5B7_SET_IN_REF_PIC1_CHROMA                                           (0x00000444U)
+#define NVC5B7_SET_IN_REF_PIC1_CHROMA_OFFSET                                    31:0
+#define NVC5B7_SET_IN_REF_PIC1_CHROMA_OFFSET_HIGH_FIELD                         31U
+#define NVC5B7_SET_IN_REF_PIC1_CHROMA_OFFSET_LOW_FIELD                          0U
+#define NVC5B7_SET_IN_REF_PIC2_CHROMA                                           (0x00000448U)
+#define NVC5B7_SET_IN_REF_PIC2_CHROMA_OFFSET                                    31:0
+#define NVC5B7_SET_IN_REF_PIC2_CHROMA_OFFSET_HIGH_FIELD                         31U
+#define NVC5B7_SET_IN_REF_PIC2_CHROMA_OFFSET_LOW_FIELD                          0U
+#define NVC5B7_SET_IN_REF_PIC3_CHROMA                                           (0x0000044CU)
+#define NVC5B7_SET_IN_REF_PIC3_CHROMA_OFFSET                                    31:0
+#define NVC5B7_SET_IN_REF_PIC3_CHROMA_OFFSET_HIGH_FIELD                         31U
+#define NVC5B7_SET_IN_REF_PIC3_CHROMA_OFFSET_LOW_FIELD                          0U
+#define NVC5B7_SET_IN_REF_PIC4_CHROMA                                           (0x00000450U)
+#define NVC5B7_SET_IN_REF_PIC4_CHROMA_OFFSET                                    31:0
+#define NVC5B7_SET_IN_REF_PIC4_CHROMA_OFFSET_HIGH_FIELD                         31U
+#define NVC5B7_SET_IN_REF_PIC4_CHROMA_OFFSET_LOW_FIELD                          0U
+#define NVC5B7_SET_IN_REF_PIC5_CHROMA                                           (0x00000454U)
+#define NVC5B7_SET_IN_REF_PIC5_CHROMA_OFFSET                                    31:0
+#define NVC5B7_SET_IN_REF_PIC5_CHROMA_OFFSET_HIGH_FIELD                         31U
+#define NVC5B7_SET_IN_REF_PIC5_CHROMA_OFFSET_LOW_FIELD                          0U
+#define NVC5B7_SET_IN_REF_PIC6_CHROMA                                           (0x00000458U)
+#define NVC5B7_SET_IN_REF_PIC6_CHROMA_OFFSET                                    31:0
+#define NVC5B7_SET_IN_REF_PIC6_CHROMA_OFFSET_HIGH_FIELD                         31U
+#define NVC5B7_SET_IN_REF_PIC6_CHROMA_OFFSET_LOW_FIELD                          0U
+#define NVC5B7_SET_IN_REF_PIC7_CHROMA                                           (0x0000045CU)
+#define NVC5B7_SET_IN_REF_PIC7_CHROMA_OFFSET                                    31:0
+#define NVC5B7_SET_IN_REF_PIC7_CHROMA_OFFSET_HIGH_FIELD                         31U
+#define NVC5B7_SET_IN_REF_PIC7_CHROMA_OFFSET_LOW_FIELD                          0U
+#define NVC5B7_SET_IN_REF_PIC8_CHROMA                                           (0x00000460U)
+#define NVC5B7_SET_IN_REF_PIC8_CHROMA_OFFSET                                    31:0
+#define NVC5B7_SET_IN_REF_PIC8_CHROMA_OFFSET_HIGH_FIELD                         31U
+#define NVC5B7_SET_IN_REF_PIC8_CHROMA_OFFSET_LOW_FIELD                          0U
+#define NVC5B7_SET_IN_REF_PIC9_CHROMA                                           (0x00000464U)
+#define NVC5B7_SET_IN_REF_PIC9_CHROMA_OFFSET                                    31:0
+#define NVC5B7_SET_IN_REF_PIC9_CHROMA_OFFSET_HIGH_FIELD                         31U
+#define NVC5B7_SET_IN_REF_PIC9_CHROMA_OFFSET_LOW_FIELD                          0U
+#define NVC5B7_SET_IN_REF_PIC10_CHROMA                                          (0x00000468U)
+#define NVC5B7_SET_IN_REF_PIC10_CHROMA_OFFSET                                   31:0
+#define NVC5B7_SET_IN_REF_PIC10_CHROMA_OFFSET_HIGH_FIELD                        31U
+#define NVC5B7_SET_IN_REF_PIC10_CHROMA_OFFSET_LOW_FIELD                         0U
+#define NVC5B7_SET_IN_REF_PIC11_CHROMA                                          (0x0000046CU)
+#define NVC5B7_SET_IN_REF_PIC11_CHROMA_OFFSET                                   31:0
+#define NVC5B7_SET_IN_REF_PIC11_CHROMA_OFFSET_HIGH_FIELD                        31U
+#define NVC5B7_SET_IN_REF_PIC11_CHROMA_OFFSET_LOW_FIELD                         0U
+#define NVC5B7_SET_IN_REF_PIC12_CHROMA                                          (0x00000470U)
+#define NVC5B7_SET_IN_REF_PIC12_CHROMA_OFFSET                                   31:0
+#define NVC5B7_SET_IN_REF_PIC12_CHROMA_OFFSET_HIGH_FIELD                        31U
+#define NVC5B7_SET_IN_REF_PIC12_CHROMA_OFFSET_LOW_FIELD                         0U
+#define NVC5B7_SET_IN_REF_PIC13_CHROMA                                          (0x00000474U)
+#define NVC5B7_SET_IN_REF_PIC13_CHROMA_OFFSET                                   31:0
+#define NVC5B7_SET_IN_REF_PIC13_CHROMA_OFFSET_HIGH_FIELD                        31U
+#define NVC5B7_SET_IN_REF_PIC13_CHROMA_OFFSET_LOW_FIELD                         0U
+#define NVC5B7_SET_IN_REF_PIC14_CHROMA                                          (0x00000478U)
+#define NVC5B7_SET_IN_REF_PIC14_CHROMA_OFFSET                                   31:0
+#define NVC5B7_SET_IN_REF_PIC14_CHROMA_OFFSET_HIGH_FIELD                        31U
+#define NVC5B7_SET_IN_REF_PIC14_CHROMA_OFFSET_LOW_FIELD                         0U
+#define NVC5B7_SET_IN_REF_PIC15_CHROMA                                          (0x0000047CU)
+#define NVC5B7_SET_IN_REF_PIC15_CHROMA_OFFSET                                   31:0
+#define NVC5B7_SET_IN_REF_PIC15_CHROMA_OFFSET_HIGH_FIELD                        31U
+#define NVC5B7_SET_IN_REF_PIC15_CHROMA_OFFSET_LOW_FIELD                         0U
+#define NVC5B7_SET_IN_REF_PIC_LAST_LUMA                                         (0x00000500U)
+#define NVC5B7_SET_IN_REF_PIC_LAST_LUMA_OFFSET                                  31:0
+#define NVC5B7_SET_IN_REF_PIC_LAST_LUMA_OFFSET_HIGH_FIELD                       31U
+#define NVC5B7_SET_IN_REF_PIC_LAST_LUMA_OFFSET_LOW_FIELD                        0U
+#define NVC5B7_SET_IN_REF_PIC_GOLDEN_LUMA                                       (0x00000504U)
+#define NVC5B7_SET_IN_REF_PIC_GOLDEN_LUMA_OFFSET                                31:0
+#define NVC5B7_SET_IN_REF_PIC_GOLDEN_LUMA_OFFSET_HIGH_FIELD                     31U
+#define NVC5B7_SET_IN_REF_PIC_GOLDEN_LUMA_OFFSET_LOW_FIELD                      0U
+#define NVC5B7_SET_IN_REF_PIC_ALTREF_LUMA                                       (0x00000508U)
+#define NVC5B7_SET_IN_REF_PIC_ALTREF_LUMA_OFFSET                                31:0
+#define NVC5B7_SET_IN_REF_PIC_ALTREF_LUMA_OFFSET_HIGH_FIELD                     31U
+#define NVC5B7_SET_IN_REF_PIC_ALTREF_LUMA_OFFSET_LOW_FIELD                      0U
+#define NVC5B7_SET_UCODE_STATE                                                  (0x0000050CU)
+#define NVC5B7_SET_UCODE_STATE_OFFSET                                           31:0
+#define NVC5B7_SET_UCODE_STATE_OFFSET_HIGH_FIELD                                31U
+#define NVC5B7_SET_UCODE_STATE_OFFSET_LOW_FIELD                                 0U
+#define NVC5B7_SET_IO_VP8_ENC_STATUS                                            (0x00000510U)
+#define NVC5B7_SET_IO_VP8_ENC_STATUS_OFFSET                                     31:0
+#define NVC5B7_SET_IO_VP8_ENC_STATUS_OFFSET_HIGH_FIELD                          31U
+#define NVC5B7_SET_IO_VP8_ENC_STATUS_OFFSET_LOW_FIELD                           0U
+#define NVC5B7_SET_OUT_BITSTREAM_RES                                            (0x00000514U)
+#define NVC5B7_SET_OUT_BITSTREAM_RES_OFFSET                                     31:0
+#define NVC5B7_SET_OUT_BITSTREAM_RES_OFFSET_HIGH_FIELD                          31U
+#define NVC5B7_SET_OUT_BITSTREAM_RES_OFFSET_LOW_FIELD                           0U
+#define NVC5B7_SET_IN_REF_PIC_LAST_CHROMA                                       (0x00000518U)
+#define NVC5B7_SET_IN_REF_PIC_LAST_CHROMA_OFFSET                                31:0
+#define NVC5B7_SET_IN_REF_PIC_LAST_CHROMA_OFFSET_HIGH_FIELD                     31U
+#define NVC5B7_SET_IN_REF_PIC_LAST_CHROMA_OFFSET_LOW_FIELD                      0U
+#define NVC5B7_SET_IN_REF_PIC_GOLDEN_CHROMA                                     (0x0000051CU)
+#define NVC5B7_SET_IN_REF_PIC_GOLDEN_CHROMA_OFFSET                              31:0
+#define NVC5B7_SET_IN_REF_PIC_GOLDEN_CHROMA_OFFSET_HIGH_FIELD                   31U
+#define NVC5B7_SET_IN_REF_PIC_GOLDEN_CHROMA_OFFSET_LOW_FIELD                    0U
+#define NVC5B7_SET_IN_REF_PIC_ALTREF_CHROMA                                     (0x00000520U)
+#define NVC5B7_SET_IN_REF_PIC_ALTREF_CHROMA_OFFSET                              31:0
+#define NVC5B7_SET_IN_REF_PIC_ALTREF_CHROMA_OFFSET_HIGH_FIELD                   31U
+#define NVC5B7_SET_IN_REF_PIC_ALTREF_CHROMA_OFFSET_LOW_FIELD                    0U
+#define NVC5B7_SET_OUT_VP9_COUNTER_DATA                                         (0x00000524U)
+#define NVC5B7_SET_OUT_VP9_COUNTER_DATA_OFFSET                                  31:0
+#define NVC5B7_SET_OUT_VP9_COUNTER_DATA_OFFSET_HIGH_FIELD                       31U
+#define NVC5B7_SET_OUT_VP9_COUNTER_DATA_OFFSET_LOW_FIELD                        0U
+#define NVC5B7_SET_IN_VP9_PROBABILITY_DATA                                      (0x00000528U)
+#define NVC5B7_SET_IN_VP9_PROBABILITY_DATA_OFFSET                               31:0
+#define NVC5B7_SET_IN_VP9_PROBABILITY_DATA_OFFSET_HIGH_FIELD                    31U
+#define NVC5B7_SET_IN_VP9_PROBABILITY_DATA_OFFSET_LOW_FIELD                     0U
+#define NVC5B7_SET_IN_VP9_CUR_TEMPORAL_DATA                                     (0x0000052CU)
+#define NVC5B7_SET_IN_VP9_CUR_TEMPORAL_DATA_OFFSET                              31:0
+#define NVC5B7_SET_IN_VP9_CUR_TEMPORAL_DATA_OFFSET_HIGH_FIELD                   31U
+#define NVC5B7_SET_IN_VP9_CUR_TEMPORAL_DATA_OFFSET_LOW_FIELD                    0U
+#define NVC5B7_SET_IN_VP9_REF_TEMPORAL_DATA                                     (0x00000530U)
+#define NVC5B7_SET_IN_VP9_REF_TEMPORAL_DATA_OFFSET                              31:0
+#define NVC5B7_SET_IN_VP9_REF_TEMPORAL_DATA_OFFSET_HIGH_FIELD                   31U
+#define NVC5B7_SET_IN_VP9_REF_TEMPORAL_DATA_OFFSET_LOW_FIELD                    0U
+#define NVC5B7_SET_IN_VP9_COMBINEDLINE_BUF                                      (0x00000534U)
+#define NVC5B7_SET_IN_VP9_COMBINEDLINE_BUF_OFFSET                               31:0
+#define NVC5B7_SET_IN_VP9_COMBINEDLINE_BUF_OFFSET_HIGH_FIELD                    31U
+#define NVC5B7_SET_IN_VP9_COMBINEDLINE_BUF_OFFSET_LOW_FIELD                     0U
+#define NVC5B7_SET_IN_VP9_FILTERLINE_BUF                                        (0x00000538U)
+#define NVC5B7_SET_IN_VP9_FILTERLINE_BUF_OFFSET                                 31:0
+#define NVC5B7_SET_IN_VP9_FILTERLINE_BUF_OFFSET_HIGH_FIELD                      31U
+#define NVC5B7_SET_IN_VP9_FILTERLINE_BUF_OFFSET_LOW_FIELD                       0U
+#define NVC5B7_SET_IN_VP9_FILTERCOLLINE_BUF                                     (0x0000053CU)
+#define NVC5B7_SET_IN_VP9_FILTERCOLLINE_BUF_OFFSET                              31:0
+#define NVC5B7_SET_IN_VP9_FILTERCOLLINE_BUF_OFFSET_HIGH_FIELD                   31U
+#define NVC5B7_SET_IN_VP9_FILTERCOLLINE_BUF_OFFSET_LOW_FIELD                    0U
+#define NVC5B7_SET_IN_VP9_MOCOMP_PIC_LUMA                                       (0x00000544U)
+#define NVC5B7_SET_IN_VP9_MOCOMP_PIC_LUMA_OFFSET                                31:0
+#define NVC5B7_SET_IN_VP9_MOCOMP_PIC_LUMA_OFFSET_HIGH_FIELD                     31U
+#define NVC5B7_SET_IN_VP9_MOCOMP_PIC_LUMA_OFFSET_LOW_FIELD                      0U
+#define NVC5B7_SET_IN_VP9_MOCOMP_PIC_CHROMA                                     (0x00000548U)
+#define NVC5B7_SET_IN_VP9_MOCOMP_PIC_CHROMA_OFFSET                              31:0
+#define NVC5B7_SET_IN_VP9_MOCOMP_PIC_CHROMA_OFFSET_HIGH_FIELD                   31U
+#define NVC5B7_SET_IN_VP9_MOCOMP_PIC_CHROMA_OFFSET_LOW_FIELD                    0U
+#define NVC5B7_SET_CONTROL_PARAMS                                               (0x00000700U)
+#define NVC5B7_SET_CONTROL_PARAMS_CODEC_TYPE                                    3:0
+#define NVC5B7_SET_CONTROL_PARAMS_CODEC_TYPE_HIGH_FIELD                         3U
+#define NVC5B7_SET_CONTROL_PARAMS_CODEC_TYPE_LOW_FIELD                          0U
+#define NVC5B7_SET_CONTROL_PARAMS_CODEC_TYPE_H264                               (0x00000003U)
+#define NVC5B7_SET_CONTROL_PARAMS_FORCE_OUT_PIC                                 8:8
+#define NVC5B7_SET_CONTROL_PARAMS_FORCE_OUT_PIC_HIGH_FIELD                      8U
+#define NVC5B7_SET_CONTROL_PARAMS_FORCE_OUT_PIC_LOW_FIELD                       8U
+#define NVC5B7_SET_CONTROL_PARAMS_FORCE_OUT_COL                                 9:9
+#define NVC5B7_SET_CONTROL_PARAMS_FORCE_OUT_COL_HIGH_FIELD                      9U
+#define NVC5B7_SET_CONTROL_PARAMS_FORCE_OUT_COL_LOW_FIELD                       9U
+#define NVC5B7_SET_CONTROL_PARAMS_MEONLY                                        10:10
+#define NVC5B7_SET_CONTROL_PARAMS_MEONLY_HIGH_FIELD                             10U
+#define NVC5B7_SET_CONTROL_PARAMS_MEONLY_LOW_FIELD                              10U
+#define NVC5B7_SET_CONTROL_PARAMS_SLICE_STAT_ON                                 11:11
+#define NVC5B7_SET_CONTROL_PARAMS_SLICE_STAT_ON_HIGH_FIELD                      11U
+#define NVC5B7_SET_CONTROL_PARAMS_SLICE_STAT_ON_LOW_FIELD                       11U
+#define NVC5B7_SET_CONTROL_PARAMS_GPTIMER_ON                                    12:12
+#define NVC5B7_SET_CONTROL_PARAMS_GPTIMER_ON_HIGH_FIELD                         12U
+#define NVC5B7_SET_CONTROL_PARAMS_GPTIMER_ON_LOW_FIELD                          12U
+#define NVC5B7_SET_CONTROL_PARAMS_STOP_PROB_UPDATE                              13:13
+#define NVC5B7_SET_CONTROL_PARAMS_STOP_PROB_UPDATE_HIGH_FIELD                   13U
+#define NVC5B7_SET_CONTROL_PARAMS_STOP_PROB_UPDATE_LOW_FIELD                    13U
+#define NVC5B7_SET_CONTROL_PARAMS_MPEC_STAT_ON                                  15:15
+#define NVC5B7_SET_CONTROL_PARAMS_MPEC_STAT_ON_HIGH_FIELD                       15U
+#define NVC5B7_SET_CONTROL_PARAMS_MPEC_STAT_ON_LOW_FIELD                        15U
+#define NVC5B7_SET_CONTROL_PARAMS_SUBFRAME_MODE                                 18:17
+#define NVC5B7_SET_CONTROL_PARAMS_SUBFRAME_MODE_HIGH_FIELD                      18U
+#define NVC5B7_SET_CONTROL_PARAMS_SUBFRAME_MODE_LOW_FIELD                       17U
+#define NVC5B7_SET_CONTROL_PARAMS_SUBFRAME_MODE_NONE                            (0x00000000U)
+#define NVC5B7_SET_CONTROL_PARAMS_SUBFRAME_MODE_SLICE_FLUSH                     (0x00000001U)
+#define NVC5B7_SET_CONTROL_PARAMS_SUBFRAME_MODE_SLICE_OFFSETS_WITHOUT_FLUSH     (0x00000002U)
+#define NVC5B7_SET_CONTROL_PARAMS_SUBFRAME_MODE_SLICE_OFFSETS_WITH_FLUSH        (0x00000003U)
+#define NVC5B7_SET_CONTROL_PARAMS_RCSTAT_WRITE                                  19:19
+#define NVC5B7_SET_CONTROL_PARAMS_RCSTAT_WRITE_HIGH_FIELD                       19U
+#define NVC5B7_SET_CONTROL_PARAMS_RCSTAT_WRITE_LOW_FIELD                        19U
+#define NVC5B7_SET_CONTROL_PARAMS_RCSTAT_READ                                   20:20
+#define NVC5B7_SET_CONTROL_PARAMS_RCSTAT_READ_HIGH_FIELD                        20U
+#define NVC5B7_SET_CONTROL_PARAMS_RCSTAT_READ_LOW_FIELD                         20U
+#define NVC5B7_SET_CONTROL_PARAMS_RCMODE                                        31:24
+#define NVC5B7_SET_CONTROL_PARAMS_RCMODE_HIGH_FIELD                             31U
+#define NVC5B7_SET_CONTROL_PARAMS_RCMODE_LOW_FIELD                              24U
+#define NVC5B7_SET_CONTROL_PARAMS_RCMODE_CONSTQP                                (0x00000000U)
+#define NVC5B7_SET_PICTURE_INDEX                                                (0x00000704U)
+#define NVC5B7_SET_PICTURE_INDEX_INDEX                                          31:0
+#define NVC5B7_SET_PICTURE_INDEX_INDEX_HIGH_FIELD                               31U
+#define NVC5B7_SET_PICTURE_INDEX_INDEX_LOW_FIELD                                0U
+#define NVC5B7_SET_IN_RCDATA                                                    (0x0000070CU)
+#define NVC5B7_SET_IN_RCDATA_OFFSET                                             31:0
+#define NVC5B7_SET_IN_RCDATA_OFFSET_HIGH_FIELD                                  31U
+#define NVC5B7_SET_IN_RCDATA_OFFSET_LOW_FIELD                                   0U
+#define NVC5B7_SET_IN_DRV_PIC_SETUP                                             (0x00000710U)
+#define NVC5B7_SET_IN_DRV_PIC_SETUP_OFFSET                                      31:0
+#define NVC5B7_SET_IN_DRV_PIC_SETUP_OFFSET_HIGH_FIELD                           31U
+#define NVC5B7_SET_IN_DRV_PIC_SETUP_OFFSET_LOW_FIELD                            0U
+#define NVC5B7_SET_IN_CEAHINTS_DATA                                             (0x00000714U)
+#define NVC5B7_SET_IN_CEAHINTS_DATA_OFFSET                                      31:0
+#define NVC5B7_SET_IN_CEAHINTS_DATA_OFFSET_HIGH_FIELD                           31U
+#define NVC5B7_SET_IN_CEAHINTS_DATA_OFFSET_LOW_FIELD                            0U
+#define NVC5B7_SET_OUT_ENC_STATUS                                               (0x00000718U)
+#define NVC5B7_SET_OUT_ENC_STATUS_OFFSET                                        31:0
+#define NVC5B7_SET_OUT_ENC_STATUS_OFFSET_HIGH_FIELD                             31U
+#define NVC5B7_SET_OUT_ENC_STATUS_OFFSET_LOW_FIELD                              0U
+#define NVC5B7_SET_OUT_BITSTREAM                                                (0x0000071CU)
+#define NVC5B7_SET_OUT_BITSTREAM_OFFSET                                         31:0
+#define NVC5B7_SET_OUT_BITSTREAM_OFFSET_HIGH_FIELD                              31U
+#define NVC5B7_SET_OUT_BITSTREAM_OFFSET_LOW_FIELD                               0U
+#define NVC5B7_SET_IOHISTORY                                                    (0x00000720U)
+#define NVC5B7_SET_IOHISTORY_OFFSET                                             31:0
+#define NVC5B7_SET_IOHISTORY_OFFSET_HIGH_FIELD                                  31U
+#define NVC5B7_SET_IOHISTORY_OFFSET_LOW_FIELD                                   0U
+#define NVC5B7_SET_IO_RC_PROCESS                                                (0x00000724U)
+#define NVC5B7_SET_IO_RC_PROCESS_OFFSET                                         31:0
+#define NVC5B7_SET_IO_RC_PROCESS_OFFSET_HIGH_FIELD                              31U
+#define NVC5B7_SET_IO_RC_PROCESS_OFFSET_LOW_FIELD                               0U
+#define NVC5B7_SET_IN_COLOC_DATA                                                (0x00000728U)
+#define NVC5B7_SET_IN_COLOC_DATA_OFFSET                                         31:0
+#define NVC5B7_SET_IN_COLOC_DATA_OFFSET_HIGH_FIELD                              31U
+#define NVC5B7_SET_IN_COLOC_DATA_OFFSET_LOW_FIELD                               0U
+#define NVC5B7_SET_OUT_COLOC_DATA                                               (0x0000072CU)
+#define NVC5B7_SET_OUT_COLOC_DATA_OFFSET                                        31:0
+#define NVC5B7_SET_OUT_COLOC_DATA_OFFSET_HIGH_FIELD                             31U
+#define NVC5B7_SET_OUT_COLOC_DATA_OFFSET_LOW_FIELD                              0U
+#define NVC5B7_SET_OUT_REF_PIC_LUMA                                             (0x00000730U)
+#define NVC5B7_SET_OUT_REF_PIC_LUMA_OFFSET                                      31:0
+#define NVC5B7_SET_OUT_REF_PIC_LUMA_OFFSET_HIGH_FIELD                           31U
+#define NVC5B7_SET_OUT_REF_PIC_LUMA_OFFSET_LOW_FIELD                            0U
+#define NVC5B7_SET_IN_CUR_PIC                                                   (0x00000734U)
+#define NVC5B7_SET_IN_CUR_PIC_OFFSET                                            31:0
+#define NVC5B7_SET_IN_CUR_PIC_OFFSET_HIGH_FIELD                                 31U
+#define NVC5B7_SET_IN_CUR_PIC_OFFSET_LOW_FIELD                                  0U
+#define NVC5B7_SET_IN_MEPRED_DATA                                               (0x00000738U)
+#define NVC5B7_SET_IN_MEPRED_DATA_OFFSET                                        31:0
+#define NVC5B7_SET_IN_MEPRED_DATA_OFFSET_HIGH_FIELD                             31U
+#define NVC5B7_SET_IN_MEPRED_DATA_OFFSET_LOW_FIELD                              0U
+#define NVC5B7_SET_OUT_MEPRED_DATA                                              (0x0000073CU)
+#define NVC5B7_SET_OUT_MEPRED_DATA_OFFSET                                       31:0
+#define NVC5B7_SET_OUT_MEPRED_DATA_OFFSET_HIGH_FIELD                            31U
+#define NVC5B7_SET_OUT_MEPRED_DATA_OFFSET_LOW_FIELD                             0U
+#define NVC5B7_SET_IN_CUR_PIC_CHROMA_U                                          (0x00000740U)
+#define NVC5B7_SET_IN_CUR_PIC_CHROMA_U_OFFSET                                   31:0
+#define NVC5B7_SET_IN_CUR_PIC_CHROMA_U_OFFSET_HIGH_FIELD                        31U
+#define NVC5B7_SET_IN_CUR_PIC_CHROMA_U_OFFSET_LOW_FIELD                         0U
+#define NVC5B7_SET_IN_CUR_PIC_CHROMA_V                                          (0x00000744U)
+#define NVC5B7_SET_IN_CUR_PIC_CHROMA_V_OFFSET                                   31:0
+#define NVC5B7_SET_IN_CUR_PIC_CHROMA_V_OFFSET_HIGH_FIELD                        31U
+#define NVC5B7_SET_IN_CUR_PIC_CHROMA_V_OFFSET_LOW_FIELD                         0U
+#define NVC5B7_SET_IN_QP_MAP                                                    (0x00000748U)
+#define NVC5B7_SET_IN_QP_MAP_OFFSET                                             31:0
+#define NVC5B7_SET_IN_QP_MAP_OFFSET_HIGH_FIELD                                  31U
+#define NVC5B7_SET_IN_QP_MAP_OFFSET_LOW_FIELD                                   0U
+#define NVC5B7_SET_OUT_REF_PIC_CHROMA                                           (0x0000074CU)
+#define NVC5B7_SET_OUT_REF_PIC_CHROMA_OFFSET                                    31:0
+#define NVC5B7_SET_OUT_REF_PIC_CHROMA_OFFSET_HIGH_FIELD                         31U
+#define NVC5B7_SET_OUT_REF_PIC_CHROMA_OFFSET_LOW_FIELD                          0U
+#define NVC5B7_SET_IN_PARTITION_BUF                                             (0x00000750U)
+#define NVC5B7_SET_IN_PARTITION_BUF_OFFSET                                      31:0
+#define NVC5B7_SET_IN_PARTITION_BUF_OFFSET_HIGH_FIELD                           31U
+#define NVC5B7_SET_IN_PARTITION_BUF_OFFSET_LOW_FIELD                            0U
+#define NVC5B7_SET_IN_CUR_PIC1_TASK_STATUS                                      (0x00000758U)
+#define NVC5B7_SET_IN_CUR_PIC1_TASK_STATUS_OFFSET                               31:0
+#define NVC5B7_SET_IN_CUR_PIC1_TASK_STATUS_OFFSET_HIGH_FIELD                    31U
+#define NVC5B7_SET_IN_CUR_PIC1_TASK_STATUS_OFFSET_LOW_FIELD                     0U
+#define NVC5B7_SET_IN_CUR_PIC2_TASK_STATUS                                      (0x0000075CU)
+#define NVC5B7_SET_IN_CUR_PIC2_TASK_STATUS_OFFSET                               31:0
+#define NVC5B7_SET_IN_CUR_PIC2_TASK_STATUS_OFFSET_HIGH_FIELD                    31U
+#define NVC5B7_SET_IN_CUR_PIC2_TASK_STATUS_OFFSET_LOW_FIELD                     0U
+#define NVC5B7_SET_OUT_TASK_STATUS                                              (0x00000760U)
+#define NVC5B7_SET_OUT_TASK_STATUS_OFFSET                                       31:0
+#define NVC5B7_SET_OUT_TASK_STATUS_OFFSET_HIGH_FIELD                            31U
+#define NVC5B7_SET_OUT_TASK_STATUS_OFFSET_LOW_FIELD                             0U
+#define NVC5B7_SET_IN_MV_HINTS_TASK_STATUS                                      (0x00000764U)
+#define NVC5B7_SET_IN_MV_HINTS_TASK_STATUS_OFFSET                               31:0
+#define NVC5B7_SET_IN_MV_HINTS_TASK_STATUS_OFFSET_HIGH_FIELD                    31U
+#define NVC5B7_SET_IN_MV_HINTS_TASK_STATUS_OFFSET_LOW_FIELD                     0U
+
+#define NVC5B7_ERROR_NONE                                                       (0x00000000U)
+#define NVC5B7_OS_ERROR_EXECUTE_INSUFFICIENT_DATA                               (0x00000001U)
+#define NVC5B7_OS_ERROR_SEMAPHORE_INSUFFICIENT_DATA                             (0x00000002U)
+#define NVC5B7_OS_ERROR_INVALID_METHOD                                          (0x00000003U)
+#define NVC5B7_OS_ERROR_INVALID_DMA_PAGE                                        (0x00000004U)
+#define NVC5B7_OS_ERROR_UNHANDLED_INTERRUPT                                     (0x00000005U)
+#define NVC5B7_OS_ERROR_EXCEPTION                                               (0x00000006U)
+#define NVC5B7_OS_ERROR_INVALID_CTXSW_REQUEST                                   (0x00000007U)
+#define NVC5B7_OS_ERROR_APPLICATION                                             (0x00000008U)
+#define NVC5B7_OS_INTERRUPT_EXECUTE_AWAKEN                                      (0x00000100U)
+#define NVC5B7_OS_INTERRUPT_BACKEND_SEMAPHORE_AWAKEN                            (0x00000200U)
+#define NVC5B7_OS_INTERRUPT_CTX_ERROR_FBIF                                      (0x00000300U)
+#define NVC5B7_OS_INTERRUPT_LIMIT_VIOLATION                                     (0x00000400U)
+#define NVC5B7_OS_INTERRUPT_LIMIT_AND_FBIF_CTX_ERROR                            (0x00000500U)
+#define NVC5B7_OS_INTERRUPT_HALT_ENGINE                                         (0x00000600U)
+#define NVC5B7_OS_INTERRUPT_TRAP_NONSTALL                                       (0x00000700U)
+#define NVC5B7_OS_INTERRUPT_CTX_SAVE_DONE                                       (0x00000800U)
+#define NVC5B7_OS_INTERRUPT_CTX_RESTORE_DONE                                    (0x00000900U)
+#define NVC5B7_ENC_ERROR_H264_APPTIMER_EXPIRED                                  (0x30000001U)
+#define NVC5B7_ENC_ERROR_H264_INVALID_INPUT                                     (0x30000002U)
+#define NVC5B7_ENC_ERROR_H264_HWERR_INTERRUPT                                   (0x30000003U)
+#define NVC5B7_ENC_ERROR_H264_BAD_MAGIC                                         (0x30000004U)
+
+#ifdef __cplusplus
+};     /* extern "C" */
+#endif
+#endif // _clc5b7_h
+
diff --git a/src/nouveau/headers/nvidia/classes/clc6b0.h b/src/nouveau/headers/nvidia/classes/clc6b0.h
new file mode 100644
index 0000000000000000000000000000000000000000..4e45bd18a17488647a21e5e75ccdede3499a9ab3
--- /dev/null
+++ b/src/nouveau/headers/nvidia/classes/clc6b0.h
@@ -0,0 +1,452 @@
+/*
+ * SPDX-FileCopyrightText: Copyright (c) 1993-2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+ * SPDX-License-Identifier: MIT
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef clc6b0_h_
+#define clc6b0_h_
+
+#include "nvtypes.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define NVC6B0_VIDEO_DECODER                                                       (0x0000C6B0)
+
+#define NVC6B0_NOP                                                              (0x00000100)
+#define NVC6B0_NOP_PARAMETER                                                    31:0
+#define NVC6B0_PM_TRIGGER                                                       (0x00000140)
+#define NVC6B0_PM_TRIGGER_V                                                     31:0
+#define NVC6B0_SET_APPLICATION_ID                                               (0x00000200)
+#define NVC6B0_SET_APPLICATION_ID_ID                                            31:0
+#define NVC6B0_SET_APPLICATION_ID_ID_MPEG12                                     (0x00000001)
+#define NVC6B0_SET_APPLICATION_ID_ID_VC1                                        (0x00000002)
+#define NVC6B0_SET_APPLICATION_ID_ID_H264                                       (0x00000003)
+#define NVC6B0_SET_APPLICATION_ID_ID_MPEG4                                      (0x00000004)
+#define NVC6B0_SET_APPLICATION_ID_ID_VP8                                        (0x00000005)
+#define NVC6B0_SET_APPLICATION_ID_ID_HEVC                                       (0x00000007)
+#define NVC6B0_SET_APPLICATION_ID_ID_VP9                                        (0x00000009)
+#define NVC6B0_SET_APPLICATION_ID_ID_HEVC_PARSER                                (0x0000000C)
+#define NVC6B0_SET_APPLICATION_ID_ID_VP9_WITH_PARSER                            (0x00000011)
+#define NVC6B0_SET_WATCHDOG_TIMER                                               (0x00000204)
+#define NVC6B0_SET_WATCHDOG_TIMER_TIMER                                         31:0
+#define NVC6B0_SEMAPHORE_A                                                      (0x00000240)
+#define NVC6B0_SEMAPHORE_A_UPPER                                                7:0
+#define NVC6B0_SEMAPHORE_B                                                      (0x00000244)
+#define NVC6B0_SEMAPHORE_B_LOWER                                                31:0
+#define NVC6B0_SEMAPHORE_C                                                      (0x00000248)
+#define NVC6B0_SEMAPHORE_C_PAYLOAD                                              31:0
+#define NVC6B0_EXECUTE                                                          (0x00000300)
+#define NVC6B0_EXECUTE_NOTIFY                                                   0:0
+#define NVC6B0_EXECUTE_NOTIFY_DISABLE                                           (0x00000000)
+#define NVC6B0_EXECUTE_NOTIFY_ENABLE                                            (0x00000001)
+#define NVC6B0_EXECUTE_NOTIFY_ON                                                1:1
+#define NVC6B0_EXECUTE_NOTIFY_ON_END                                            (0x00000000)
+#define NVC6B0_EXECUTE_NOTIFY_ON_BEGIN                                          (0x00000001)
+#define NVC6B0_EXECUTE_PREDICATION                                              2:2
+#define NVC6B0_EXECUTE_PREDICATION_DISABLE                                      (0x00000000)
+#define NVC6B0_EXECUTE_PREDICATION_ENABLE                                       (0x00000001)
+#define NVC6B0_EXECUTE_PREDICATION_OP                                           3:3
+#define NVC6B0_EXECUTE_PREDICATION_OP_EQUAL_ZERO                                (0x00000000)
+#define NVC6B0_EXECUTE_PREDICATION_OP_NOT_EQUAL_ZERO                            (0x00000001)
+#define NVC6B0_EXECUTE_AWAKEN                                                   8:8
+#define NVC6B0_EXECUTE_AWAKEN_DISABLE                                           (0x00000000)
+#define NVC6B0_EXECUTE_AWAKEN_ENABLE                                            (0x00000001)
+#define NVC6B0_SEMAPHORE_D                                                      (0x00000304)
+#define NVC6B0_SEMAPHORE_D_STRUCTURE_SIZE                                       0:0
+#define NVC6B0_SEMAPHORE_D_STRUCTURE_SIZE_ONE                                   (0x00000000)
+#define NVC6B0_SEMAPHORE_D_STRUCTURE_SIZE_FOUR                                  (0x00000001)
+#define NVC6B0_SEMAPHORE_D_AWAKEN_ENABLE                                        8:8
+#define NVC6B0_SEMAPHORE_D_AWAKEN_ENABLE_FALSE                                  (0x00000000)
+#define NVC6B0_SEMAPHORE_D_AWAKEN_ENABLE_TRUE                                   (0x00000001)
+#define NVC6B0_SEMAPHORE_D_OPERATION                                            17:16
+#define NVC6B0_SEMAPHORE_D_OPERATION_RELEASE                                    (0x00000000)
+#define NVC6B0_SEMAPHORE_D_OPERATION_RESERVED0                                  (0x00000001)
+#define NVC6B0_SEMAPHORE_D_OPERATION_RESERVED1                                  (0x00000002)
+#define NVC6B0_SEMAPHORE_D_OPERATION_TRAP                                       (0x00000003)
+#define NVC6B0_SEMAPHORE_D_FLUSH_DISABLE                                        21:21
+#define NVC6B0_SEMAPHORE_D_FLUSH_DISABLE_FALSE                                  (0x00000000)
+#define NVC6B0_SEMAPHORE_D_FLUSH_DISABLE_TRUE                                   (0x00000001)
+#define NVC6B0_SEMAPHORE_D_CONDITIONAL_TRAP                                     22:22
+#define NVC6B0_SEMAPHORE_D_CONDITIONAL_TRAP_FALSE                               (0x00000000)
+#define NVC6B0_SEMAPHORE_D_CONDITIONAL_TRAP_TRUE                                (0x00000001)
+#define NVC6B0_SET_PREDICATION_OFFSET_UPPER                                     (0x00000308)
+#define NVC6B0_SET_PREDICATION_OFFSET_UPPER_OFFSET                              7:0
+#define NVC6B0_SET_PREDICATION_OFFSET_LOWER                                     (0x0000030C)
+#define NVC6B0_SET_PREDICATION_OFFSET_LOWER_OFFSET                              31:0
+#define NVC6B0_SET_CONTROL_PARAMS                                               (0x00000400)
+#define NVC6B0_SET_CONTROL_PARAMS_CODEC_TYPE                                    3:0
+#define NVC6B0_SET_CONTROL_PARAMS_CODEC_TYPE_MPEG1                              (0x00000000)
+#define NVC6B0_SET_CONTROL_PARAMS_CODEC_TYPE_MPEG2                              (0x00000001)
+#define NVC6B0_SET_CONTROL_PARAMS_CODEC_TYPE_VC1                                (0x00000002)
+#define NVC6B0_SET_CONTROL_PARAMS_CODEC_TYPE_H264                               (0x00000003)
+#define NVC6B0_SET_CONTROL_PARAMS_CODEC_TYPE_MPEG4                              (0x00000004)
+#define NVC6B0_SET_CONTROL_PARAMS_CODEC_TYPE_DIVX3                              (0x00000004)
+#define NVC6B0_SET_CONTROL_PARAMS_CODEC_TYPE_VP8                                (0x00000005)
+#define NVC6B0_SET_CONTROL_PARAMS_CODEC_TYPE_HEVC                               (0x00000007)
+#define NVC6B0_SET_CONTROL_PARAMS_CODEC_TYPE_VP9                                (0x00000009)
+#define NVC6B0_SET_CONTROL_PARAMS_GPTIMER_ON                                    4:4
+#define NVC6B0_SET_CONTROL_PARAMS_RET_ERROR                                     5:5
+#define NVC6B0_SET_CONTROL_PARAMS_ERR_CONCEAL_ON                                6:6
+#define NVC6B0_SET_CONTROL_PARAMS_ERROR_FRM_IDX                                 12:7
+#define NVC6B0_SET_CONTROL_PARAMS_MBTIMER_ON                                    13:13
+#define NVC6B0_SET_CONTROL_PARAMS_EC_INTRA_FRAME_USING_PSLC                     14:14
+#define NVC6B0_SET_CONTROL_PARAMS_IGNORE_SOME_FIELDS_CRC_CHECK                  15:15
+#define NVC6B0_SET_CONTROL_PARAMS_EVENT_TRACE_LOGGING_ON                        16:16
+#define NVC6B0_SET_CONTROL_PARAMS_ALL_INTRA_FRAME                               17:17
+#define NVC6B0_SET_CONTROL_PARAMS_RESERVED                                      31:18
+#define NVC6B0_SET_DRV_PIC_SETUP_OFFSET                                         (0x00000404)
+#define NVC6B0_SET_DRV_PIC_SETUP_OFFSET_OFFSET                                  31:0
+#define NVC6B0_SET_IN_BUF_BASE_OFFSET                                           (0x00000408)
+#define NVC6B0_SET_IN_BUF_BASE_OFFSET_OFFSET                                    31:0
+#define NVC6B0_SET_PICTURE_INDEX                                                (0x0000040C)
+#define NVC6B0_SET_PICTURE_INDEX_INDEX                                          31:0
+#define NVC6B0_SET_SLICE_OFFSETS_BUF_OFFSET                                     (0x00000410)
+#define NVC6B0_SET_SLICE_OFFSETS_BUF_OFFSET_OFFSET                              31:0
+#define NVC6B0_SET_COLOC_DATA_OFFSET                                            (0x00000414)
+#define NVC6B0_SET_COLOC_DATA_OFFSET_OFFSET                                     31:0
+#define NVC6B0_SET_HISTORY_OFFSET                                               (0x00000418)
+#define NVC6B0_SET_HISTORY_OFFSET_OFFSET                                        31:0
+#define NVC6B0_SET_DISPLAY_BUF_SIZE                                             (0x0000041C)
+#define NVC6B0_SET_DISPLAY_BUF_SIZE_SIZE                                        31:0
+#define NVC6B0_SET_HISTOGRAM_OFFSET                                             (0x00000420)
+#define NVC6B0_SET_HISTOGRAM_OFFSET_OFFSET                                      31:0
+#define NVC6B0_SET_NVDEC_STATUS_OFFSET                                          (0x00000424)
+#define NVC6B0_SET_NVDEC_STATUS_OFFSET_OFFSET                                   31:0
+#define NVC6B0_SET_DISPLAY_BUF_LUMA_OFFSET                                      (0x00000428)
+#define NVC6B0_SET_DISPLAY_BUF_LUMA_OFFSET_OFFSET                               31:0
+#define NVC6B0_SET_DISPLAY_BUF_CHROMA_OFFSET                                    (0x0000042C)
+#define NVC6B0_SET_DISPLAY_BUF_CHROMA_OFFSET_OFFSET                             31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET0                                         (0x00000430)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET0_OFFSET                                  31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET1                                         (0x00000434)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET1_OFFSET                                  31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET2                                         (0x00000438)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET2_OFFSET                                  31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET3                                         (0x0000043C)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET3_OFFSET                                  31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET4                                         (0x00000440)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET4_OFFSET                                  31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET5                                         (0x00000444)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET5_OFFSET                                  31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET6                                         (0x00000448)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET6_OFFSET                                  31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET7                                         (0x0000044C)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET7_OFFSET                                  31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET8                                         (0x00000450)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET8_OFFSET                                  31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET9                                         (0x00000454)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET9_OFFSET                                  31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET10                                        (0x00000458)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET10_OFFSET                                 31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET11                                        (0x0000045C)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET11_OFFSET                                 31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET12                                        (0x00000460)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET12_OFFSET                                 31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET13                                        (0x00000464)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET13_OFFSET                                 31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET14                                        (0x00000468)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET14_OFFSET                                 31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET15                                        (0x0000046C)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET15_OFFSET                                 31:0
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET16                                        (0x00000470)
+#define NVC6B0_SET_PICTURE_LUMA_OFFSET16_OFFSET                                 31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET0                                       (0x00000474)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET0_OFFSET                                31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET1                                       (0x00000478)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET1_OFFSET                                31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET2                                       (0x0000047C)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET2_OFFSET                                31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET3                                       (0x00000480)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET3_OFFSET                                31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET4                                       (0x00000484)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET4_OFFSET                                31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET5                                       (0x00000488)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET5_OFFSET                                31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET6                                       (0x0000048C)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET6_OFFSET                                31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET7                                       (0x00000490)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET7_OFFSET                                31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET8                                       (0x00000494)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET8_OFFSET                                31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET9                                       (0x00000498)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET9_OFFSET                                31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET10                                      (0x0000049C)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET10_OFFSET                               31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET11                                      (0x000004A0)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET11_OFFSET                               31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET12                                      (0x000004A4)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET12_OFFSET                               31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET13                                      (0x000004A8)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET13_OFFSET                               31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET14                                      (0x000004AC)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET14_OFFSET                               31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET15                                      (0x000004B0)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET15_OFFSET                               31:0
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET16                                      (0x000004B4)
+#define NVC6B0_SET_PICTURE_CHROMA_OFFSET16_OFFSET                               31:0
+#define NVC6B0_SET_PIC_SCRATCH_BUF_OFFSET                                       (0x000004B8)
+#define NVC6B0_SET_PIC_SCRATCH_BUF_OFFSET_OFFSET                                31:0
+#define NVC6B0_SET_EXTERNAL_MVBUFFER_OFFSET                                     (0x000004BC)
+#define NVC6B0_SET_EXTERNAL_MVBUFFER_OFFSET_OFFSET                              31:0
+#define NVC6B0_H264_SET_MBHIST_BUF_OFFSET                                       (0x00000500)
+#define NVC6B0_H264_SET_MBHIST_BUF_OFFSET_OFFSET                                31:0
+#define NVC6B0_VP8_SET_PROB_DATA_OFFSET                                         (0x00000540)
+#define NVC6B0_VP8_SET_PROB_DATA_OFFSET_OFFSET                                  31:0
+#define NVC6B0_VP8_SET_HEADER_PARTITION_BUF_BASE_OFFSET                         (0x00000544)
+#define NVC6B0_VP8_SET_HEADER_PARTITION_BUF_BASE_OFFSET_OFFSET                  31:0
+#define NVC6B0_HEVC_SET_SCALING_LIST_OFFSET                                     (0x00000580)
+#define NVC6B0_HEVC_SET_SCALING_LIST_OFFSET_OFFSET                              31:0
+#define NVC6B0_HEVC_SET_TILE_SIZES_OFFSET                                       (0x00000584)
+#define NVC6B0_HEVC_SET_TILE_SIZES_OFFSET_OFFSET                                31:0
+#define NVC6B0_HEVC_SET_FILTER_BUFFER_OFFSET                                    (0x00000588)
+#define NVC6B0_HEVC_SET_FILTER_BUFFER_OFFSET_OFFSET                             31:0
+#define NVC6B0_HEVC_SET_SAO_BUFFER_OFFSET                                       (0x0000058C)
+#define NVC6B0_HEVC_SET_SAO_BUFFER_OFFSET_OFFSET                                31:0
+#define NVC6B0_HEVC_SET_SLICE_INFO_BUFFER_OFFSET                                (0x00000590)
+#define NVC6B0_HEVC_SET_SLICE_INFO_BUFFER_OFFSET_OFFSET                         31:0
+#define NVC6B0_HEVC_SET_SLICE_GROUP_INDEX                                       (0x00000594)
+#define NVC6B0_HEVC_SET_SLICE_GROUP_INDEX_OFFSET                                31:0
+#define NVC6B0_VP9_SET_PROB_TAB_BUF_OFFSET                                      (0x000005C0)
+#define NVC6B0_VP9_SET_PROB_TAB_BUF_OFFSET_OFFSET                               31:0
+#define NVC6B0_VP9_SET_CTX_COUNTER_BUF_OFFSET                                   (0x000005C4)
+#define NVC6B0_VP9_SET_CTX_COUNTER_BUF_OFFSET_OFFSET                            31:0
+#define NVC6B0_VP9_SET_SEGMENT_READ_BUF_OFFSET                                  (0x000005C8)
+#define NVC6B0_VP9_SET_SEGMENT_READ_BUF_OFFSET_OFFSET                           31:0
+#define NVC6B0_VP9_SET_SEGMENT_WRITE_BUF_OFFSET                                 (0x000005CC)
+#define NVC6B0_VP9_SET_SEGMENT_WRITE_BUF_OFFSET_OFFSET                          31:0
+#define NVC6B0_VP9_SET_TILE_SIZE_BUF_OFFSET                                     (0x000005D0)
+#define NVC6B0_VP9_SET_TILE_SIZE_BUF_OFFSET_OFFSET                              31:0
+#define NVC6B0_VP9_SET_COL_MVWRITE_BUF_OFFSET                                   (0x000005D4)
+#define NVC6B0_VP9_SET_COL_MVWRITE_BUF_OFFSET_OFFSET                            31:0
+#define NVC6B0_VP9_SET_COL_MVREAD_BUF_OFFSET                                    (0x000005D8)
+#define NVC6B0_VP9_SET_COL_MVREAD_BUF_OFFSET_OFFSET                             31:0
+#define NVC6B0_VP9_SET_FILTER_BUFFER_OFFSET                                     (0x000005DC)
+#define NVC6B0_VP9_SET_FILTER_BUFFER_OFFSET_OFFSET                              31:0
+#define NVC6B0_VP9_PARSER_SET_PIC_SETUP_OFFSET                                  (0x000005E0)
+#define NVC6B0_VP9_PARSER_SET_PIC_SETUP_OFFSET_OFFSET                           31:0
+#define NVC6B0_VP9_PARSER_SET_PREV_PIC_SETUP_OFFSET                             (0x000005E4)
+#define NVC6B0_VP9_PARSER_SET_PREV_PIC_SETUP_OFFSET_OFFSET                      31:0
+#define NVC6B0_VP9_PARSER_SET_PROB_TAB_BUF_OFFSET                               (0x000005E8)
+#define NVC6B0_VP9_PARSER_SET_PROB_TAB_BUF_OFFSET_OFFSET                        31:0
+#define NVC6B0_PM_TRIGGER_END                                                   (0x00001114)
+#define NVC6B0_PM_TRIGGER_END_V                                                 31:0
+
+#define NVC6B0_ERROR_NONE                                                       (0x00000000)
+#define NVC6B0_OS_ERROR_EXECUTE_INSUFFICIENT_DATA                               (0x00000001)
+#define NVC6B0_OS_ERROR_SEMAPHORE_INSUFFICIENT_DATA                             (0x00000002)
+#define NVC6B0_OS_ERROR_INVALID_METHOD                                          (0x00000003)
+#define NVC6B0_OS_ERROR_INVALID_DMA_PAGE                                        (0x00000004)
+#define NVC6B0_OS_ERROR_UNHANDLED_INTERRUPT                                     (0x00000005)
+#define NVC6B0_OS_ERROR_EXCEPTION                                               (0x00000006)
+#define NVC6B0_OS_ERROR_INVALID_CTXSW_REQUEST                                   (0x00000007)
+#define NVC6B0_OS_ERROR_APPLICATION                                             (0x00000008)
+#define NVC6B0_OS_ERROR_SW_BREAKPT                                              (0x00000009)
+#define NVC6B0_OS_INTERRUPT_EXECUTE_AWAKEN                                      (0x00000100)
+#define NVC6B0_OS_INTERRUPT_BACKEND_SEMAPHORE_AWAKEN                            (0x00000200)
+#define NVC6B0_OS_INTERRUPT_CTX_ERROR_FBIF                                      (0x00000300)
+#define NVC6B0_OS_INTERRUPT_LIMIT_VIOLATION                                     (0x00000400)
+#define NVC6B0_OS_INTERRUPT_LIMIT_AND_FBIF_CTX_ERROR                            (0x00000500)
+#define NVC6B0_OS_INTERRUPT_HALT_ENGINE                                         (0x00000600)
+#define NVC6B0_OS_INTERRUPT_TRAP_NONSTALL                                       (0x00000700)
+#define NVC6B0_H264_VLD_ERR_SEQ_DATA_INCONSISTENT                               (0x00004001)
+#define NVC6B0_H264_VLD_ERR_PIC_DATA_INCONSISTENT                               (0x00004002)
+#define NVC6B0_H264_VLD_ERR_SLC_DATA_BUF_ADDR_OUT_OF_BOUNDS                     (0x00004100)
+#define NVC6B0_H264_VLD_ERR_BITSTREAM_ERROR                                     (0x00004101)
+#define NVC6B0_H264_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                          (0x000041F8)
+#define NVC6B0_H264_VLD_ERR_SLC_HDR_OUT_SIZE_NOT_MULT256                        (0x00004200)
+#define NVC6B0_H264_VLD_ERR_SLC_DATA_OUT_SIZE_NOT_MULT256                       (0x00004201)
+#define NVC6B0_H264_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                        (0x00004203)
+#define NVC6B0_H264_VLD_ERR_CTX_DMA_ID_SLC_HDR_OUT_INVALID                      (0x00004204)
+#define NVC6B0_H264_VLD_ERR_SLC_HDR_OUT_BUF_TOO_SMALL                           (0x00004205)
+#define NVC6B0_H264_VLD_ERR_SLC_HDR_OUT_BUF_ALREADY_VALID                       (0x00004206)
+#define NVC6B0_H264_VLD_ERR_SLC_DATA_OUT_BUF_TOO_SMALL                          (0x00004207)
+#define NVC6B0_H264_VLD_ERR_DATA_BUF_CNT_TOO_SMALL                              (0x00004208)
+#define NVC6B0_H264_VLD_ERR_BITSTREAM_EMPTY                                     (0x00004209)
+#define NVC6B0_H264_VLD_ERR_FRAME_WIDTH_TOO_LARGE                               (0x0000420A)
+#define NVC6B0_H264_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                              (0x0000420B)
+#define NVC6B0_H264_VLD_ERR_HIST_BUF_TOO_SMALL                                  (0x00004300)
+#define NVC6B0_VC1_VLD_ERR_PIC_DATA_BUF_ADDR_OUT_OF_BOUND                       (0x00005100)
+#define NVC6B0_VC1_VLD_ERR_BITSTREAM_ERROR                                      (0x00005101)
+#define NVC6B0_VC1_VLD_ERR_PIC_HDR_OUT_SIZE_NOT_MULT256                         (0x00005200)
+#define NVC6B0_VC1_VLD_ERR_PIC_DATA_OUT_SIZE_NOT_MULT256                        (0x00005201)
+#define NVC6B0_VC1_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                           (0x00005202)
+#define NVC6B0_VC1_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                         (0x00005203)
+#define NVC6B0_VC1_VLD_ERR_CTX_DMA_ID_PIC_HDR_OUT_INVALID                       (0x00005204)
+#define NVC6B0_VC1_VLD_ERR_SLC_HDR_OUT_BUF_TOO_SMALL                            (0x00005205)
+#define NVC6B0_VC1_VLD_ERR_PIC_HDR_OUT_BUF_ALREADY_VALID                        (0x00005206)
+#define NVC6B0_VC1_VLD_ERR_PIC_DATA_OUT_BUF_TOO_SMALL                           (0x00005207)
+#define NVC6B0_VC1_VLD_ERR_DATA_INFO_IN_BUF_TOO_SMALL                           (0x00005208)
+#define NVC6B0_VC1_VLD_ERR_BITSTREAM_EMPTY                                      (0x00005209)
+#define NVC6B0_VC1_VLD_ERR_FRAME_WIDTH_TOO_LARGE                                (0x0000520A)
+#define NVC6B0_VC1_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                               (0x0000520B)
+#define NVC6B0_VC1_VLD_ERR_PIC_DATA_OUT_BUF_FULL_TIME_OUT                       (0x00005300)
+#define NVC6B0_MPEG12_VLD_ERR_SLC_DATA_BUF_ADDR_OUT_OF_BOUNDS                   (0x00006100)
+#define NVC6B0_MPEG12_VLD_ERR_BITSTREAM_ERROR                                   (0x00006101)
+#define NVC6B0_MPEG12_VLD_ERR_SLC_DATA_OUT_SIZE_NOT_MULT256                     (0x00006200)
+#define NVC6B0_MPEG12_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                        (0x00006201)
+#define NVC6B0_MPEG12_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                      (0x00006202)
+#define NVC6B0_MPEG12_VLD_ERR_SLC_DATA_OUT_BUF_TOO_SMALL                        (0x00006203)
+#define NVC6B0_MPEG12_VLD_ERR_DATA_INFO_IN_BUF_TOO_SMALL                        (0x00006204)
+#define NVC6B0_MPEG12_VLD_ERR_BITSTREAM_EMPTY                                   (0x00006205)
+#define NVC6B0_MPEG12_VLD_ERR_INVALID_PIC_STRUCTURE                             (0x00006206)
+#define NVC6B0_MPEG12_VLD_ERR_INVALID_PIC_CODING_TYPE                           (0x00006207)
+#define NVC6B0_MPEG12_VLD_ERR_FRAME_WIDTH_TOO_LARGE                             (0x00006208)
+#define NVC6B0_MPEG12_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                            (0x00006209)
+#define NVC6B0_MPEG12_VLD_ERR_SLC_DATA_OUT_BUF_FULL_TIME_OUT                    (0x00006300)
+#define NVC6B0_CMN_VLD_ERR_PDEC_RETURNED_ERROR                                  (0x00007101)
+#define NVC6B0_CMN_VLD_ERR_EDOB_FLUSH_TIME_OUT                                  (0x00007102)
+#define NVC6B0_CMN_VLD_ERR_EDOB_REWIND_TIME_OUT                                 (0x00007103)
+#define NVC6B0_CMN_VLD_ERR_VLD_WD_TIME_OUT                                      (0x00007104)
+#define NVC6B0_CMN_VLD_ERR_NUM_SLICES_ZERO                                      (0x00007105)
+#define NVC6B0_MPEG4_VLD_ERR_PIC_DATA_BUF_ADDR_OUT_OF_BOUND                     (0x00008100)
+#define NVC6B0_MPEG4_VLD_ERR_BITSTREAM_ERROR                                    (0x00008101)
+#define NVC6B0_MPEG4_VLD_ERR_PIC_HDR_OUT_SIZE_NOT_MULT256                       (0x00008200)
+#define NVC6B0_MPEG4_VLD_ERR_PIC_DATA_OUT_SIZE_NOT_MULT256                      (0x00008201)
+#define NVC6B0_MPEG4_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                         (0x00008202)
+#define NVC6B0_MPEG4_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                       (0x00008203)
+#define NVC6B0_MPEG4_VLD_ERR_CTX_DMA_ID_PIC_HDR_OUT_INVALID                     (0x00008204)
+#define NVC6B0_MPEG4_VLD_ERR_SLC_HDR_OUT_BUF_TOO_SMALL                          (0x00008205)
+#define NVC6B0_MPEG4_VLD_ERR_PIC_HDR_OUT_BUF_ALREADY_VALID                      (0x00008206)
+#define NVC6B0_MPEG4_VLD_ERR_PIC_DATA_OUT_BUF_TOO_SMALL                         (0x00008207)
+#define NVC6B0_MPEG4_VLD_ERR_DATA_INFO_IN_BUF_TOO_SMALL                         (0x00008208)
+#define NVC6B0_MPEG4_VLD_ERR_BITSTREAM_EMPTY                                    (0x00008209)
+#define NVC6B0_MPEG4_VLD_ERR_FRAME_WIDTH_TOO_LARGE                              (0x0000820A)
+#define NVC6B0_MPEG4_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                             (0x0000820B)
+#define NVC6B0_MPEG4_VLD_ERR_PIC_DATA_OUT_BUF_FULL_TIME_OUT                     (0x00051E01)
+#define NVC6B0_DEC_ERROR_MPEG12_APPTIMER_EXPIRED                                (0xDEC10001)
+#define NVC6B0_DEC_ERROR_MPEG12_MVTIMER_EXPIRED                                 (0xDEC10002)
+#define NVC6B0_DEC_ERROR_MPEG12_INVALID_TOKEN                                   (0xDEC10003)
+#define NVC6B0_DEC_ERROR_MPEG12_SLICEDATA_MISSING                               (0xDEC10004)
+#define NVC6B0_DEC_ERROR_MPEG12_HWERR_INTERRUPT                                 (0xDEC10005)
+#define NVC6B0_DEC_ERROR_MPEG12_DETECTED_VLD_FAILURE                            (0xDEC10006)
+#define NVC6B0_DEC_ERROR_MPEG12_PICTURE_INIT                                    (0xDEC10100)
+#define NVC6B0_DEC_ERROR_MPEG12_STATEMACHINE_FAILURE                            (0xDEC10101)
+#define NVC6B0_DEC_ERROR_MPEG12_INVALID_CTXID_PIC                               (0xDEC10901)
+#define NVC6B0_DEC_ERROR_MPEG12_INVALID_CTXID_UCODE                             (0xDEC10902)
+#define NVC6B0_DEC_ERROR_MPEG12_INVALID_CTXID_FC                                (0xDEC10903)
+#define NVC6B0_DEC_ERROR_MPEG12_INVALID_CTXID_SLH                               (0xDEC10904)
+#define NVC6B0_DEC_ERROR_MPEG12_INVALID_UCODE_SIZE                              (0xDEC10905)
+#define NVC6B0_DEC_ERROR_MPEG12_INVALID_SLICE_COUNT                             (0xDEC10906)
+#define NVC6B0_DEC_ERROR_VC1_APPTIMER_EXPIRED                                   (0xDEC20001)
+#define NVC6B0_DEC_ERROR_VC1_MVTIMER_EXPIRED                                    (0xDEC20002)
+#define NVC6B0_DEC_ERROR_VC1_INVALID_TOKEN                                      (0xDEC20003)
+#define NVC6B0_DEC_ERROR_VC1_SLICEDATA_MISSING                                  (0xDEC20004)
+#define NVC6B0_DEC_ERROR_VC1_HWERR_INTERRUPT                                    (0xDEC20005)
+#define NVC6B0_DEC_ERROR_VC1_DETECTED_VLD_FAILURE                               (0xDEC20006)
+#define NVC6B0_DEC_ERROR_VC1_TIMEOUT_POLLING_FOR_DATA                           (0xDEC20007)
+#define NVC6B0_DEC_ERROR_VC1_PDEC_PIC_END_UNALIGNED                             (0xDEC20008)
+#define NVC6B0_DEC_ERROR_VC1_WDTIMER_EXPIRED                                    (0xDEC20009)
+#define NVC6B0_DEC_ERROR_VC1_ERRINTSTART                                        (0xDEC20010)
+#define NVC6B0_DEC_ERROR_VC1_IQT_ERRINT                                         (0xDEC20011)
+#define NVC6B0_DEC_ERROR_VC1_MC_ERRINT                                          (0xDEC20012)
+#define NVC6B0_DEC_ERROR_VC1_MC_IQT_ERRINT                                      (0xDEC20013)
+#define NVC6B0_DEC_ERROR_VC1_REC_ERRINT                                         (0xDEC20014)
+#define NVC6B0_DEC_ERROR_VC1_REC_IQT_ERRINT                                     (0xDEC20015)
+#define NVC6B0_DEC_ERROR_VC1_REC_MC_ERRINT                                      (0xDEC20016)
+#define NVC6B0_DEC_ERROR_VC1_REC_MC_IQT_ERRINT                                  (0xDEC20017)
+#define NVC6B0_DEC_ERROR_VC1_DBF_ERRINT                                         (0xDEC20018)
+#define NVC6B0_DEC_ERROR_VC1_DBF_IQT_ERRINT                                     (0xDEC20019)
+#define NVC6B0_DEC_ERROR_VC1_DBF_MC_ERRINT                                      (0xDEC2001A)
+#define NVC6B0_DEC_ERROR_VC1_DBF_MC_IQT_ERRINT                                  (0xDEC2001B)
+#define NVC6B0_DEC_ERROR_VC1_DBF_REC_ERRINT                                     (0xDEC2001C)
+#define NVC6B0_DEC_ERROR_VC1_DBF_REC_IQT_ERRINT                                 (0xDEC2001D)
+#define NVC6B0_DEC_ERROR_VC1_DBF_REC_MC_ERRINT                                  (0xDEC2001E)
+#define NVC6B0_DEC_ERROR_VC1_DBF_REC_MC_IQT_ERRINT                              (0xDEC2001F)
+#define NVC6B0_DEC_ERROR_VC1_PICTURE_INIT                                       (0xDEC20100)
+#define NVC6B0_DEC_ERROR_VC1_STATEMACHINE_FAILURE                               (0xDEC20101)
+#define NVC6B0_DEC_ERROR_VC1_INVALID_CTXID_PIC                                  (0xDEC20901)
+#define NVC6B0_DEC_ERROR_VC1_INVALID_CTXID_UCODE                                (0xDEC20902)
+#define NVC6B0_DEC_ERROR_VC1_INVALID_CTXID_FC                                   (0xDEC20903)
+#define NVC6B0_DEC_ERROR_VC1_INVAILD_CTXID_SLH                                  (0xDEC20904)
+#define NVC6B0_DEC_ERROR_VC1_INVALID_UCODE_SIZE                                 (0xDEC20905)
+#define NVC6B0_DEC_ERROR_VC1_INVALID_SLICE_COUNT                                (0xDEC20906)
+#define NVC6B0_DEC_ERROR_H264_APPTIMER_EXPIRED                                  (0xDEC30001)
+#define NVC6B0_DEC_ERROR_H264_MVTIMER_EXPIRED                                   (0xDEC30002)
+#define NVC6B0_DEC_ERROR_H264_INVALID_TOKEN                                     (0xDEC30003)
+#define NVC6B0_DEC_ERROR_H264_SLICEDATA_MISSING                                 (0xDEC30004)
+#define NVC6B0_DEC_ERROR_H264_HWERR_INTERRUPT                                   (0xDEC30005)
+#define NVC6B0_DEC_ERROR_H264_DETECTED_VLD_FAILURE                              (0xDEC30006)
+#define NVC6B0_DEC_ERROR_H264_ERRINTSTART                                       (0xDEC30010)
+#define NVC6B0_DEC_ERROR_H264_IQT_ERRINT                                        (0xDEC30011)
+#define NVC6B0_DEC_ERROR_H264_MC_ERRINT                                         (0xDEC30012)
+#define NVC6B0_DEC_ERROR_H264_MC_IQT_ERRINT                                     (0xDEC30013)
+#define NVC6B0_DEC_ERROR_H264_REC_ERRINT                                        (0xDEC30014)
+#define NVC6B0_DEC_ERROR_H264_REC_IQT_ERRINT                                    (0xDEC30015)
+#define NVC6B0_DEC_ERROR_H264_REC_MC_ERRINT                                     (0xDEC30016)
+#define NVC6B0_DEC_ERROR_H264_REC_MC_IQT_ERRINT                                 (0xDEC30017)
+#define NVC6B0_DEC_ERROR_H264_DBF_ERRINT                                        (0xDEC30018)
+#define NVC6B0_DEC_ERROR_H264_DBF_IQT_ERRINT                                    (0xDEC30019)
+#define NVC6B0_DEC_ERROR_H264_DBF_MC_ERRINT                                     (0xDEC3001A)
+#define NVC6B0_DEC_ERROR_H264_DBF_MC_IQT_ERRINT                                 (0xDEC3001B)
+#define NVC6B0_DEC_ERROR_H264_DBF_REC_ERRINT                                    (0xDEC3001C)
+#define NVC6B0_DEC_ERROR_H264_DBF_REC_IQT_ERRINT                                (0xDEC3001D)
+#define NVC6B0_DEC_ERROR_H264_DBF_REC_MC_ERRINT                                 (0xDEC3001E)
+#define NVC6B0_DEC_ERROR_H264_DBF_REC_MC_IQT_ERRINT                             (0xDEC3001F)
+#define NVC6B0_DEC_ERROR_H264_PICTURE_INIT                                      (0xDEC30100)
+#define NVC6B0_DEC_ERROR_H264_STATEMACHINE_FAILURE                              (0xDEC30101)
+#define NVC6B0_DEC_ERROR_H264_INVALID_CTXID_PIC                                 (0xDEC30901)
+#define NVC6B0_DEC_ERROR_H264_INVALID_CTXID_UCODE                               (0xDEC30902)
+#define NVC6B0_DEC_ERROR_H264_INVALID_CTXID_FC                                  (0xDEC30903)
+#define NVC6B0_DEC_ERROR_H264_INVALID_CTXID_SLH                                 (0xDEC30904)
+#define NVC6B0_DEC_ERROR_H264_INVALID_UCODE_SIZE                                (0xDEC30905)
+#define NVC6B0_DEC_ERROR_H264_INVALID_SLICE_COUNT                               (0xDEC30906)
+#define NVC6B0_DEC_ERROR_MPEG4_APPTIMER_EXPIRED                                 (0xDEC40001)
+#define NVC6B0_DEC_ERROR_MPEG4_MVTIMER_EXPIRED                                  (0xDEC40002)
+#define NVC6B0_DEC_ERROR_MPEG4_INVALID_TOKEN                                    (0xDEC40003)
+#define NVC6B0_DEC_ERROR_MPEG4_SLICEDATA_MISSING                                (0xDEC40004)
+#define NVC6B0_DEC_ERROR_MPEG4_HWERR_INTERRUPT                                  (0xDEC40005)
+#define NVC6B0_DEC_ERROR_MPEG4_DETECTED_VLD_FAILURE                             (0xDEC40006)
+#define NVC6B0_DEC_ERROR_MPEG4_TIMEOUT_POLLING_FOR_DATA                         (0xDEC40007)
+#define NVC6B0_DEC_ERROR_MPEG4_PDEC_PIC_END_UNALIGNED                           (0xDEC40008)
+#define NVC6B0_DEC_ERROR_MPEG4_WDTIMER_EXPIRED                                  (0xDEC40009)
+#define NVC6B0_DEC_ERROR_MPEG4_ERRINTSTART                                      (0xDEC40010)
+#define NVC6B0_DEC_ERROR_MPEG4_IQT_ERRINT                                       (0xDEC40011)
+#define NVC6B0_DEC_ERROR_MPEG4_MC_ERRINT                                        (0xDEC40012)
+#define NVC6B0_DEC_ERROR_MPEG4_MC_IQT_ERRINT                                    (0xDEC40013)
+#define NVC6B0_DEC_ERROR_MPEG4_REC_ERRINT                                       (0xDEC40014)
+#define NVC6B0_DEC_ERROR_MPEG4_REC_IQT_ERRINT                                   (0xDEC40015)
+#define NVC6B0_DEC_ERROR_MPEG4_REC_MC_ERRINT                                    (0xDEC40016)
+#define NVC6B0_DEC_ERROR_MPEG4_REC_MC_IQT_ERRINT                                (0xDEC40017)
+#define NVC6B0_DEC_ERROR_MPEG4_DBF_ERRINT                                       (0xDEC40018)
+#define NVC6B0_DEC_ERROR_MPEG4_DBF_IQT_ERRINT                                   (0xDEC40019)
+#define NVC6B0_DEC_ERROR_MPEG4_DBF_MC_ERRINT                                    (0xDEC4001A)
+#define NVC6B0_DEC_ERROR_MPEG4_DBF_MC_IQT_ERRINT                                (0xDEC4001B)
+#define NVC6B0_DEC_ERROR_MPEG4_DBF_REC_ERRINT                                   (0xDEC4001C)
+#define NVC6B0_DEC_ERROR_MPEG4_DBF_REC_IQT_ERRINT                               (0xDEC4001D)
+#define NVC6B0_DEC_ERROR_MPEG4_DBF_REC_MC_ERRINT                                (0xDEC4001E)
+#define NVC6B0_DEC_ERROR_MPEG4_DBF_REC_MC_IQT_ERRINT                            (0xDEC4001F)
+#define NVC6B0_DEC_ERROR_MPEG4_PICTURE_INIT                                     (0xDEC40100)
+#define NVC6B0_DEC_ERROR_MPEG4_STATEMACHINE_FAILURE                             (0xDEC40101)
+#define NVC6B0_DEC_ERROR_MPEG4_INVALID_CTXID_PIC                                (0xDEC40901)
+#define NVC6B0_DEC_ERROR_MPEG4_INVALID_CTXID_UCODE                              (0xDEC40902)
+#define NVC6B0_DEC_ERROR_MPEG4_INVALID_CTXID_FC                                 (0xDEC40903)
+#define NVC6B0_DEC_ERROR_MPEG4_INVALID_CTXID_SLH                                (0xDEC40904)
+#define NVC6B0_DEC_ERROR_MPEG4_INVALID_UCODE_SIZE                               (0xDEC40905)
+#define NVC6B0_DEC_ERROR_MPEG4_INVALID_SLICE_COUNT                              (0xDEC40906)
+#endif // (!defined(NVRM_UNPUBLISHED_OPAQUE) || NVRM_UNPUBLISHED_OPAQUE == 1)
+
+#ifdef __cplusplus
+};     /* extern "C" */
+#endif
+#endif // clc6b0_h
+
diff --git a/src/nouveau/headers/nvidia/classes/clc7b0.h b/src/nouveau/headers/nvidia/classes/clc7b0.h
new file mode 100644
index 0000000000000000000000000000000000000000..7ee988e4cc566744f658b74703b5de3488ccdab0
--- /dev/null
+++ b/src/nouveau/headers/nvidia/classes/clc7b0.h
@@ -0,0 +1,597 @@
+/*
+ * SPDX-FileCopyrightText: Copyright (c) 1993-2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+ * SPDX-License-Identifier: MIT
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef clc7b0_h_
+#define clc7b0_h_
+
+#include "nvtypes.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define NVC7B0_VIDEO_DECODER                                                       (0x0000C7B0)
+
+#define NVC7B0_NOP                                                              (0x00000100)
+#define NVC7B0_NOP_PARAMETER                                                    31:0
+#define NVC7B0_PM_TRIGGER                                                       (0x00000140)
+#define NVC7B0_PM_TRIGGER_V                                                     31:0
+#define NVC7B0_SET_APPLICATION_ID                                               (0x00000200)
+#define NVC7B0_SET_APPLICATION_ID_ID                                            31:0
+#define NVC7B0_SET_APPLICATION_ID_ID_MPEG12                                     (0x00000001)
+#define NVC7B0_SET_APPLICATION_ID_ID_VC1                                        (0x00000002)
+#define NVC7B0_SET_APPLICATION_ID_ID_H264                                       (0x00000003)
+#define NVC7B0_SET_APPLICATION_ID_ID_MPEG4                                      (0x00000004)
+#define NVC7B0_SET_APPLICATION_ID_ID_VP8                                        (0x00000005)
+#define NVC7B0_SET_APPLICATION_ID_ID_CTR64                                      (0x00000006)
+#define NVC7B0_SET_APPLICATION_ID_ID_HEVC                                       (0x00000007)
+#define NVC7B0_SET_APPLICATION_ID_ID_NEW_H264                                   (0x00000008)
+#define NVC7B0_SET_APPLICATION_ID_ID_VP9                                        (0x00000009)
+#define NVC7B0_SET_APPLICATION_ID_ID_PASS1                                      (0x0000000A)
+#define NVC7B0_SET_APPLICATION_ID_ID_HEVC_PARSER                                (0x0000000C)
+#define NVC7B0_SET_APPLICATION_ID_ID_UCODE_TEST                                 (0x0000000D)
+#define NVC7B0_SET_APPLICATION_ID_ID_HWDRM_PR_DECRYPTAUDIO                      (0x0000000E)
+#define NVC7B0_SET_APPLICATION_ID_ID_HWDRM_PR_DECRYPTAUDIOMULTIPLE              (0x0000000F)
+#define NVC7B0_SET_APPLICATION_ID_ID_HWDRM_PR_PREPROCESSENCRYPTEDDATA           (0x00000010)
+#define NVC7B0_SET_APPLICATION_ID_ID_VP9_WITH_PARSER                            (0x00000011)
+#define NVC7B0_SET_APPLICATION_ID_ID_AVD                                        (0x00000012)
+#define NVC7B0_SET_APPLICATION_ID_ID_HW_DRM_PR4_DECRYPTCONTENTMULTIPLE          (0x00000013)
+#define NVC7B0_SET_APPLICATION_ID_ID_DHKE                                       (0x00000020)
+#define NVC7B0_SET_WATCHDOG_TIMER                                               (0x00000204)
+#define NVC7B0_SET_WATCHDOG_TIMER_TIMER                                         31:0
+#define NVC7B0_SEMAPHORE_A                                                      (0x00000240)
+#define NVC7B0_SEMAPHORE_A_UPPER                                                7:0
+#define NVC7B0_SEMAPHORE_B                                                      (0x00000244)
+#define NVC7B0_SEMAPHORE_B_LOWER                                                31:0
+#define NVC7B0_SEMAPHORE_C                                                      (0x00000248)
+#define NVC7B0_SEMAPHORE_C_PAYLOAD                                              31:0
+#define NVC7B0_CTX_SAVE_AREA                                                    (0x0000024C)
+#define NVC7B0_CTX_SAVE_AREA_OFFSET                                             31:0
+#define NVC7B0_CTX_SWITCH                                                       (0x00000250)
+#define NVC7B0_CTX_SWITCH_OP                                                    1:0
+#define NVC7B0_CTX_SWITCH_OP_CTX_UPDATE                                         (0x00000000)
+#define NVC7B0_CTX_SWITCH_OP_CTX_SAVE                                           (0x00000001)
+#define NVC7B0_CTX_SWITCH_OP_CTX_RESTORE                                        (0x00000002)
+#define NVC7B0_CTX_SWITCH_OP_CTX_FORCERESTORE                                   (0x00000003)
+#define NVC7B0_CTX_SWITCH_CTXID_VALID                                           2:2
+#define NVC7B0_CTX_SWITCH_CTXID_VALID_FALSE                                     (0x00000000)
+#define NVC7B0_CTX_SWITCH_CTXID_VALID_TRUE                                      (0x00000001)
+#define NVC7B0_CTX_SWITCH_RESERVED0                                             7:3
+#define NVC7B0_CTX_SWITCH_CTX_ID                                                23:8
+#define NVC7B0_CTX_SWITCH_RESERVED1                                             31:24
+#define NVC7B0_SET_SEMAPHORE_PAYLOAD_LOWER                                      (0x00000254)
+#define NVC7B0_SET_SEMAPHORE_PAYLOAD_LOWER_PAYLOAD_LOWER                        31:0
+#define NVC7B0_SET_SEMAPHORE_PAYLOAD_UPPER                                      (0x00000258)
+#define NVC7B0_SET_SEMAPHORE_PAYLOAD_UPPER_PAYLOAD_UPPER                        31:0
+#define NVC7B0_SET_MONITORED_FENCE_SIGNAL_ADDRESS_BASE_A                        (0x0000025C)
+#define NVC7B0_SET_MONITORED_FENCE_SIGNAL_ADDRESS_BASE_A_LOWER                  31:0
+#define NVC7B0_SET_MONITORED_FENCE_SIGNAL_ADDRESS_BASE_B                        (0x00000260)
+#define NVC7B0_SET_MONITORED_FENCE_SIGNAL_ADDRESS_BASE_B_UPPER                  31:0
+#define NVC7B0_EXECUTE                                                          (0x00000300)
+#define NVC7B0_EXECUTE_NOTIFY                                                   0:0
+#define NVC7B0_EXECUTE_NOTIFY_DISABLE                                           (0x00000000)
+#define NVC7B0_EXECUTE_NOTIFY_ENABLE                                            (0x00000001)
+#define NVC7B0_EXECUTE_NOTIFY_ON                                                1:1
+#define NVC7B0_EXECUTE_NOTIFY_ON_END                                            (0x00000000)
+#define NVC7B0_EXECUTE_NOTIFY_ON_BEGIN                                          (0x00000001)
+#define NVC7B0_EXECUTE_PREDICATION                                              2:2
+#define NVC7B0_EXECUTE_PREDICATION_DISABLE                                      (0x00000000)
+#define NVC7B0_EXECUTE_PREDICATION_ENABLE                                       (0x00000001)
+#define NVC7B0_EXECUTE_PREDICATION_OP                                           3:3
+#define NVC7B0_EXECUTE_PREDICATION_OP_EQUAL_ZERO                                (0x00000000)
+#define NVC7B0_EXECUTE_PREDICATION_OP_NOT_EQUAL_ZERO                            (0x00000001)
+#define NVC7B0_EXECUTE_AWAKEN                                                   8:8
+#define NVC7B0_EXECUTE_AWAKEN_DISABLE                                           (0x00000000)
+#define NVC7B0_EXECUTE_AWAKEN_ENABLE                                            (0x00000001)
+#define NVC7B0_SEMAPHORE_D                                                      (0x00000304)
+#define NVC7B0_SEMAPHORE_D_STRUCTURE_SIZE                                       1:0
+#define NVC7B0_SEMAPHORE_D_STRUCTURE_SIZE_ONE                                   (0x00000000)
+#define NVC7B0_SEMAPHORE_D_STRUCTURE_SIZE_FOUR                                  (0x00000001)
+#define NVC7B0_SEMAPHORE_D_STRUCTURE_SIZE_TWO                                   (0x00000002)
+#define NVC7B0_SEMAPHORE_D_AWAKEN_ENABLE                                        8:8
+#define NVC7B0_SEMAPHORE_D_AWAKEN_ENABLE_FALSE                                  (0x00000000)
+#define NVC7B0_SEMAPHORE_D_AWAKEN_ENABLE_TRUE                                   (0x00000001)
+#define NVC7B0_SEMAPHORE_D_OPERATION                                            17:16
+#define NVC7B0_SEMAPHORE_D_OPERATION_RELEASE                                    (0x00000000)
+#define NVC7B0_SEMAPHORE_D_OPERATION_RESERVED_0                                 (0x00000001)
+#define NVC7B0_SEMAPHORE_D_OPERATION_RESERVED_1                                 (0x00000002)
+#define NVC7B0_SEMAPHORE_D_OPERATION_TRAP                                       (0x00000003)
+#define NVC7B0_SEMAPHORE_D_FLUSH_DISABLE                                        21:21
+#define NVC7B0_SEMAPHORE_D_FLUSH_DISABLE_FALSE                                  (0x00000000)
+#define NVC7B0_SEMAPHORE_D_FLUSH_DISABLE_TRUE                                   (0x00000001)
+#define NVC7B0_SEMAPHORE_D_TRAP_TYPE                                            23:22
+#define NVC7B0_SEMAPHORE_D_TRAP_TYPE_UNCONDITIONAL                              (0x00000000)
+#define NVC7B0_SEMAPHORE_D_TRAP_TYPE_CONDITIONAL                                (0x00000001)
+#define NVC7B0_SEMAPHORE_D_TRAP_TYPE_CONDITIONAL_EXT                            (0x00000002)
+#define NVC7B0_SEMAPHORE_D_PAYLOAD_SIZE                                         24:24
+#define NVC7B0_SEMAPHORE_D_PAYLOAD_SIZE_32BIT                                   (0x00000000)
+#define NVC7B0_SEMAPHORE_D_PAYLOAD_SIZE_64BIT                                   (0x00000001)
+#define NVC7B0_SET_PREDICATION_OFFSET_UPPER                                     (0x00000308)
+#define NVC7B0_SET_PREDICATION_OFFSET_UPPER_OFFSET                              7:0
+#define NVC7B0_SET_PREDICATION_OFFSET_LOWER                                     (0x0000030C)
+#define NVC7B0_SET_PREDICATION_OFFSET_LOWER_OFFSET                              31:0
+#define NVC7B0_SET_AUXILIARY_DATA_BUFFER                                        (0x00000310)
+#define NVC7B0_SET_AUXILIARY_DATA_BUFFER_OFFSET                                 31:0
+#define NVC7B0_SET_CONTROL_PARAMS                                               (0x00000400)
+#define NVC7B0_SET_CONTROL_PARAMS_CODEC_TYPE                                    3:0
+#define NVC7B0_SET_CONTROL_PARAMS_CODEC_TYPE_MPEG1                              (0x00000000)
+#define NVC7B0_SET_CONTROL_PARAMS_CODEC_TYPE_MPEG2                              (0x00000001)
+#define NVC7B0_SET_CONTROL_PARAMS_CODEC_TYPE_VC1                                (0x00000002)
+#define NVC7B0_SET_CONTROL_PARAMS_CODEC_TYPE_H264                               (0x00000003)
+#define NVC7B0_SET_CONTROL_PARAMS_CODEC_TYPE_MPEG4                              (0x00000004)
+// #define NVC7B0_SET_CONTROL_PARAMS_CODEC_TYPE_DIVX3                              (0x00000004)
+#define NVC7B0_SET_CONTROL_PARAMS_CODEC_TYPE_VP8                                (0x00000005)
+#define NVC7B0_SET_CONTROL_PARAMS_CODEC_TYPE_HEVC                               (0x00000007)
+#define NVC7B0_SET_CONTROL_PARAMS_CODEC_TYPE_VP9                                (0x00000009)
+#define NVC7B0_SET_CONTROL_PARAMS_CODEC_TYPE_AV1                                (0x0000000A)
+#define NVC7B0_SET_CONTROL_PARAMS_GPTIMER_ON                                    4:4
+#define NVC7B0_SET_CONTROL_PARAMS_RET_ERROR                                     5:5
+#define NVC7B0_SET_CONTROL_PARAMS_ERR_CONCEAL_ON                                6:6
+#define NVC7B0_SET_CONTROL_PARAMS_ERROR_FRM_IDX                                 12:7
+#define NVC7B0_SET_CONTROL_PARAMS_MBTIMER_ON                                    13:13
+#define NVC7B0_SET_CONTROL_PARAMS_EC_INTRA_FRAME_USING_PSLC                     14:14
+#define NVC7B0_SET_CONTROL_PARAMS_IGNORE_SOME_FIELDS_CRC_CHECK                  15:15
+#define NVC7B0_SET_CONTROL_PARAMS_EVENT_TRACE_LOGGING_ON                        16:16
+#define NVC7B0_SET_CONTROL_PARAMS_ALL_INTRA_FRAME                               17:17
+#define NVC7B0_SET_CONTROL_PARAMS_TESTRUN_ENV                                   19:18
+#define NVC7B0_SET_CONTROL_PARAMS_TESTRUN_ENV_TRACE3D_RUN                       (0x00000000)
+#define NVC7B0_SET_CONTROL_PARAMS_TESTRUN_ENV_PROD_RUN                          (0x00000001)
+#define NVC7B0_SET_CONTROL_PARAMS_RESERVED                                      26:20
+#define NVC7B0_SET_CONTROL_PARAMS_ENABLE_ENCRYPT                                27:27
+#define NVC7B0_SET_CONTROL_PARAMS_ENCRYPTMODE                                   31:28
+#define NVC7B0_SET_DRV_PIC_SETUP_OFFSET                                         (0x00000404)
+#define NVC7B0_SET_DRV_PIC_SETUP_OFFSET_OFFSET                                  31:0
+#define NVC7B0_SET_IN_BUF_BASE_OFFSET                                           (0x00000408)
+#define NVC7B0_SET_IN_BUF_BASE_OFFSET_OFFSET                                    31:0
+#define NVC7B0_SET_PICTURE_INDEX                                                (0x0000040C)
+#define NVC7B0_SET_PICTURE_INDEX_INDEX                                          31:0
+#define NVC7B0_SET_SLICE_OFFSETS_BUF_OFFSET                                     (0x00000410)
+#define NVC7B0_SET_SLICE_OFFSETS_BUF_OFFSET_OFFSET                              31:0
+#define NVC7B0_SET_COLOC_DATA_OFFSET                                            (0x00000414)
+#define NVC7B0_SET_COLOC_DATA_OFFSET_OFFSET                                     31:0
+#define NVC7B0_SET_HISTORY_OFFSET                                               (0x00000418)
+#define NVC7B0_SET_HISTORY_OFFSET_OFFSET                                        31:0
+#define NVC7B0_SET_DISPLAY_BUF_SIZE                                             (0x0000041C)
+#define NVC7B0_SET_DISPLAY_BUF_SIZE_SIZE                                        31:0
+#define NVC7B0_SET_HISTOGRAM_OFFSET                                             (0x00000420)
+#define NVC7B0_SET_HISTOGRAM_OFFSET_OFFSET                                      31:0
+#define NVC7B0_SET_NVDEC_STATUS_OFFSET                                          (0x00000424)
+#define NVC7B0_SET_NVDEC_STATUS_OFFSET_OFFSET                                   31:0
+#define NVC7B0_SET_DISPLAY_BUF_LUMA_OFFSET                                      (0x00000428)
+#define NVC7B0_SET_DISPLAY_BUF_LUMA_OFFSET_OFFSET                               31:0
+#define NVC7B0_SET_DISPLAY_BUF_CHROMA_OFFSET                                    (0x0000042C)
+#define NVC7B0_SET_DISPLAY_BUF_CHROMA_OFFSET_OFFSET                             31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET0                                         (0x00000430)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET0_OFFSET                                  31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET1                                         (0x00000434)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET1_OFFSET                                  31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET2                                         (0x00000438)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET2_OFFSET                                  31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET3                                         (0x0000043C)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET3_OFFSET                                  31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET4                                         (0x00000440)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET4_OFFSET                                  31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET5                                         (0x00000444)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET5_OFFSET                                  31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET6                                         (0x00000448)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET6_OFFSET                                  31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET7                                         (0x0000044C)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET7_OFFSET                                  31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET8                                         (0x00000450)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET8_OFFSET                                  31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET9                                         (0x00000454)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET9_OFFSET                                  31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET10                                        (0x00000458)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET10_OFFSET                                 31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET11                                        (0x0000045C)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET11_OFFSET                                 31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET12                                        (0x00000460)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET12_OFFSET                                 31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET13                                        (0x00000464)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET13_OFFSET                                 31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET14                                        (0x00000468)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET14_OFFSET                                 31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET15                                        (0x0000046C)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET15_OFFSET                                 31:0
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET16                                        (0x00000470)
+#define NVC7B0_SET_PICTURE_LUMA_OFFSET16_OFFSET                                 31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET0                                       (0x00000474)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET0_OFFSET                                31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET1                                       (0x00000478)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET1_OFFSET                                31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET2                                       (0x0000047C)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET2_OFFSET                                31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET3                                       (0x00000480)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET3_OFFSET                                31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET4                                       (0x00000484)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET4_OFFSET                                31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET5                                       (0x00000488)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET5_OFFSET                                31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET6                                       (0x0000048C)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET6_OFFSET                                31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET7                                       (0x00000490)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET7_OFFSET                                31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET8                                       (0x00000494)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET8_OFFSET                                31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET9                                       (0x00000498)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET9_OFFSET                                31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET10                                      (0x0000049C)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET10_OFFSET                               31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET11                                      (0x000004A0)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET11_OFFSET                               31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET12                                      (0x000004A4)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET12_OFFSET                               31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET13                                      (0x000004A8)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET13_OFFSET                               31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET14                                      (0x000004AC)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET14_OFFSET                               31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET15                                      (0x000004B0)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET15_OFFSET                               31:0
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET16                                      (0x000004B4)
+#define NVC7B0_SET_PICTURE_CHROMA_OFFSET16_OFFSET                               31:0
+#define NVC7B0_SET_PIC_SCRATCH_BUF_OFFSET                                       (0x000004B8)
+#define NVC7B0_SET_PIC_SCRATCH_BUF_OFFSET_OFFSET                                31:0
+#define NVC7B0_SET_EXTERNAL_MVBUFFER_OFFSET                                     (0x000004BC)
+#define NVC7B0_SET_EXTERNAL_MVBUFFER_OFFSET_OFFSET                              31:0
+#define NVC7B0_SET_SUB_SAMPLE_MAP_OFFSET                                        (0x000004C0)
+#define NVC7B0_SET_SUB_SAMPLE_MAP_OFFSET_OFFSET                                 31:0
+#define NVC7B0_SET_SUB_SAMPLE_MAP_IV_OFFSET                                     (0x000004C4)
+#define NVC7B0_SET_SUB_SAMPLE_MAP_IV_OFFSET_OFFSET                              31:0
+#define NVC7B0_SET_INTRA_TOP_BUF_OFFSET                                         (0x000004C8)
+#define NVC7B0_SET_INTRA_TOP_BUF_OFFSET_OFFSET                                  31:0
+#define NVC7B0_SET_TILE_SIZE_BUF_OFFSET                                         (0x000004CC)
+#define NVC7B0_SET_TILE_SIZE_BUF_OFFSET_OFFSET                                  31:0
+#define NVC7B0_SET_FILTER_BUFFER_OFFSET                                         (0x000004D0)
+#define NVC7B0_SET_FILTER_BUFFER_OFFSET_OFFSET                                  31:0
+#define NVC7B0_SET_CRC_STRUCT_OFFSET                                            (0x000004D4)
+#define NVC7B0_SET_CRC_STRUCT_OFFSET_OFFSET                                     31:0
+#define NVC7B0_SET_PR_SSM_CONTENT_INFO_BUF_OFFSET                               (0x000004D8)
+#define NVC7B0_SET_PR_SSM_CONTENT_INFO_BUF_OFFSET_OFFSET                        31:0
+#define NVC7B0_H264_SET_MBHIST_BUF_OFFSET                                       (0x00000500)
+#define NVC7B0_H264_SET_MBHIST_BUF_OFFSET_OFFSET                                31:0
+#define NVC7B0_VP8_SET_PROB_DATA_OFFSET                                         (0x00000540)
+#define NVC7B0_VP8_SET_PROB_DATA_OFFSET_OFFSET                                  31:0
+#define NVC7B0_VP8_SET_HEADER_PARTITION_BUF_BASE_OFFSET                         (0x00000544)
+#define NVC7B0_VP8_SET_HEADER_PARTITION_BUF_BASE_OFFSET_OFFSET                  31:0
+#define NVC7B0_HEVC_SET_SCALING_LIST_OFFSET                                     (0x00000580)
+#define NVC7B0_HEVC_SET_SCALING_LIST_OFFSET_OFFSET                              31:0
+#define NVC7B0_HEVC_SET_TILE_SIZES_OFFSET                                       (0x00000584)
+#define NVC7B0_HEVC_SET_TILE_SIZES_OFFSET_OFFSET                                31:0
+#define NVC7B0_HEVC_SET_FILTER_BUFFER_OFFSET                                    (0x00000588)
+#define NVC7B0_HEVC_SET_FILTER_BUFFER_OFFSET_OFFSET                             31:0
+#define NVC7B0_HEVC_SET_SAO_BUFFER_OFFSET                                       (0x0000058C)
+#define NVC7B0_HEVC_SET_SAO_BUFFER_OFFSET_OFFSET                                31:0
+#define NVC7B0_HEVC_SET_SLICE_INFO_BUFFER_OFFSET                                (0x00000590)
+#define NVC7B0_HEVC_SET_SLICE_INFO_BUFFER_OFFSET_OFFSET                         31:0
+#define NVC7B0_HEVC_SET_SLICE_GROUP_INDEX                                       (0x00000594)
+#define NVC7B0_HEVC_SET_SLICE_GROUP_INDEX_OFFSET                                31:0
+#define NVC7B0_VP9_SET_PROB_TAB_BUF_OFFSET                                      (0x000005C0)
+#define NVC7B0_VP9_SET_PROB_TAB_BUF_OFFSET_OFFSET                               31:0
+#define NVC7B0_VP9_SET_CTX_COUNTER_BUF_OFFSET                                   (0x000005C4)
+#define NVC7B0_VP9_SET_CTX_COUNTER_BUF_OFFSET_OFFSET                            31:0
+#define NVC7B0_VP9_SET_SEGMENT_READ_BUF_OFFSET                                  (0x000005C8)
+#define NVC7B0_VP9_SET_SEGMENT_READ_BUF_OFFSET_OFFSET                           31:0
+#define NVC7B0_VP9_SET_SEGMENT_WRITE_BUF_OFFSET                                 (0x000005CC)
+#define NVC7B0_VP9_SET_SEGMENT_WRITE_BUF_OFFSET_OFFSET                          31:0
+#define NVC7B0_VP9_SET_TILE_SIZE_BUF_OFFSET                                     (0x000005D0)
+#define NVC7B0_VP9_SET_TILE_SIZE_BUF_OFFSET_OFFSET                              31:0
+#define NVC7B0_VP9_SET_COL_MVWRITE_BUF_OFFSET                                   (0x000005D4)
+#define NVC7B0_VP9_SET_COL_MVWRITE_BUF_OFFSET_OFFSET                            31:0
+#define NVC7B0_VP9_SET_COL_MVREAD_BUF_OFFSET                                    (0x000005D8)
+#define NVC7B0_VP9_SET_COL_MVREAD_BUF_OFFSET_OFFSET                             31:0
+#define NVC7B0_VP9_SET_FILTER_BUFFER_OFFSET                                     (0x000005DC)
+#define NVC7B0_VP9_SET_FILTER_BUFFER_OFFSET_OFFSET                              31:0
+#define NVC7B0_VP9_PARSER_SET_PIC_SETUP_OFFSET                                  (0x000005E0)
+#define NVC7B0_VP9_PARSER_SET_PIC_SETUP_OFFSET_OFFSET                           31:0
+#define NVC7B0_VP9_PARSER_SET_PREV_PIC_SETUP_OFFSET                             (0x000005E4)
+#define NVC7B0_VP9_PARSER_SET_PREV_PIC_SETUP_OFFSET_OFFSET                      31:0
+#define NVC7B0_VP9_PARSER_SET_PROB_TAB_BUF_OFFSET                               (0x000005E8)
+#define NVC7B0_VP9_PARSER_SET_PROB_TAB_BUF_OFFSET_OFFSET                        31:0
+#define NVC7B0_PASS1_SET_CLEAR_HEADER_OFFSET                                    (0x00000600)
+#define NVC7B0_PASS1_SET_CLEAR_HEADER_OFFSET_OFFSET                             31:0
+#define NVC7B0_PASS1_SET_RE_ENCRYPT_OFFSET                                      (0x00000604)
+#define NVC7B0_PASS1_SET_RE_ENCRYPT_OFFSET_OFFSET                               31:0
+#define NVC7B0_PASS1_SET_VP8_TOKEN_OFFSET                                       (0x00000608)
+#define NVC7B0_PASS1_SET_VP8_TOKEN_OFFSET_OFFSET                                31:0
+#define NVC7B0_PASS1_SET_INPUT_DATA_OFFSET                                      (0x0000060C)
+#define NVC7B0_PASS1_SET_INPUT_DATA_OFFSET_OFFSET                               31:0
+#define NVC7B0_PASS1_SET_OUTPUT_DATA_SIZE_OFFSET                                (0x00000610)
+#define NVC7B0_PASS1_SET_OUTPUT_DATA_SIZE_OFFSET_OFFSET                         31:0
+#define NVC7B0_AV1_SET_PROB_TAB_READ_BUF_OFFSET                                 (0x00000640)
+#define NVC7B0_AV1_SET_PROB_TAB_READ_BUF_OFFSET_OFFSET                          31:0
+#define NVC7B0_AV1_SET_PROB_TAB_WRITE_BUF_OFFSET                                (0x00000644)
+#define NVC7B0_AV1_SET_PROB_TAB_WRITE_BUF_OFFSET_OFFSET                         31:0
+#define NVC7B0_AV1_SET_SEGMENT_READ_BUF_OFFSET                                  (0x00000648)
+#define NVC7B0_AV1_SET_SEGMENT_READ_BUF_OFFSET_OFFSET                           31:0
+#define NVC7B0_AV1_SET_SEGMENT_WRITE_BUF_OFFSET                                 (0x0000064C)
+#define NVC7B0_AV1_SET_SEGMENT_WRITE_BUF_OFFSET_OFFSET                          31:0
+#define NVC7B0_AV1_SET_COL_MV0_READ_BUF_OFFSET                                  (0x00000650)
+#define NVC7B0_AV1_SET_COL_MV0_READ_BUF_OFFSET_OFFSET                           31:0
+#define NVC7B0_AV1_SET_COL_MV1_READ_BUF_OFFSET                                  (0x00000654)
+#define NVC7B0_AV1_SET_COL_MV1_READ_BUF_OFFSET_OFFSET                           31:0
+#define NVC7B0_AV1_SET_COL_MV2_READ_BUF_OFFSET                                  (0x00000658)
+#define NVC7B0_AV1_SET_COL_MV2_READ_BUF_OFFSET_OFFSET                           31:0
+#define NVC7B0_AV1_SET_COL_MVWRITE_BUF_OFFSET                                   (0x0000065C)
+#define NVC7B0_AV1_SET_COL_MVWRITE_BUF_OFFSET_OFFSET                            31:0
+#define NVC7B0_AV1_SET_GLOBAL_MODEL_BUF_OFFSET                                  (0x00000660)
+#define NVC7B0_AV1_SET_GLOBAL_MODEL_BUF_OFFSET_OFFSET                           31:0
+#define NVC7B0_AV1_SET_FILM_GRAIN_BUF_OFFSET                                    (0x00000664)
+#define NVC7B0_AV1_SET_FILM_GRAIN_BUF_OFFSET_OFFSET                             31:0
+#define NVC7B0_AV1_SET_TILE_STREAM_INFO_BUF_OFFSET                              (0x00000668)
+#define NVC7B0_AV1_SET_TILE_STREAM_INFO_BUF_OFFSET_OFFSET                       31:0
+#define NVC7B0_AV1_SET_SUB_STREAM_ENTRY_BUF_OFFSET                              (0x0000066C)
+#define NVC7B0_AV1_SET_SUB_STREAM_ENTRY_BUF_OFFSET_OFFSET                       31:0
+#define NVC7B0_H264_SET_SCALING_LIST_OFFSET                                     (0x00000680)
+#define NVC7B0_H264_SET_SCALING_LIST_OFFSET_OFFSET                              31:0
+#define NVC7B0_H264_SET_VLDHIST_BUF_OFFSET                                      (0x00000684)
+#define NVC7B0_H264_SET_VLDHIST_BUF_OFFSET_OFFSET                               31:0
+#define NVC7B0_H264_SET_EDOBOFFSET0                                             (0x00000688)
+#define NVC7B0_H264_SET_EDOBOFFSET0_OFFSET                                      31:0
+#define NVC7B0_H264_SET_EDOBOFFSET1                                             (0x0000068C)
+#define NVC7B0_H264_SET_EDOBOFFSET1_OFFSET                                      31:0
+#define NVC7B0_H264_SET_EDOBOFFSET2                                             (0x00000690)
+#define NVC7B0_H264_SET_EDOBOFFSET2_OFFSET                                      31:0
+#define NVC7B0_H264_SET_EDOBOFFSET3                                             (0x00000694)
+#define NVC7B0_H264_SET_EDOBOFFSET3_OFFSET                                      31:0
+#define NVC7B0_SET_CONTENT_INITIAL_VECTOR(b)                                    (0x00000C00 + (b)*0x00000004)
+#define NVC7B0_SET_CONTENT_INITIAL_VECTOR_VALUE                                 31:0
+#define NVC7B0_SET_CTL_COUNT                                                    (0x00000C10)
+#define NVC7B0_SET_CTL_COUNT_VALUE                                              31:0
+#define NVC7B0_SET_UPPER_SRC                                                    (0x00000C14)
+#define NVC7B0_SET_UPPER_SRC_OFFSET                                             7:0
+#define NVC7B0_SET_LOWER_SRC                                                    (0x00000C18)
+#define NVC7B0_SET_LOWER_SRC_OFFSET                                             31:0
+#define NVC7B0_SET_UPPER_DST                                                    (0x00000C1C)
+#define NVC7B0_SET_UPPER_DST_OFFSET                                             7:0
+#define NVC7B0_SET_LOWER_DST                                                    (0x00000C20)
+#define NVC7B0_SET_LOWER_DST_OFFSET                                             31:0
+#define NVC7B0_SET_BLOCK_COUNT                                                  (0x00000C24)
+#define NVC7B0_SET_BLOCK_COUNT_VALUE                                            31:0
+#define NVC7B0_PR_SET_REQUEST_BUF_OFFSET                                        (0x00000D00)
+#define NVC7B0_PR_SET_REQUEST_BUF_OFFSET_OFFSET                                 31:0
+#define NVC7B0_PR_SET_REQUEST_BUF_SIZE                                          (0x00000D04)
+#define NVC7B0_PR_SET_REQUEST_BUF_SIZE_SIZE                                     31:0
+#define NVC7B0_PR_SET_RESPONSE_BUF_OFFSET                                       (0x00000D08)
+#define NVC7B0_PR_SET_RESPONSE_BUF_OFFSET_OFFSET                                31:0
+#define NVC7B0_PR_SET_RESPONSE_BUF_SIZE                                         (0x00000D0C)
+#define NVC7B0_PR_SET_RESPONSE_BUF_SIZE_SIZE                                    31:0
+#define NVC7B0_PR_SET_REQUEST_MESSAGE_BUF_OFFSET                                (0x00000D10)
+#define NVC7B0_PR_SET_REQUEST_MESSAGE_BUF_OFFSET_OFFSET                         31:0
+#define NVC7B0_PR_SET_RESPONSE_MESSAGE_BUF_OFFSET                               (0x00000D14)
+#define NVC7B0_PR_SET_RESPONSE_MESSAGE_BUF_OFFSET_OFFSET                        31:0
+#define NVC7B0_PR_SET_LOCAL_DECRYPT_BUF_OFFSET                                  (0x00000D18)
+#define NVC7B0_PR_SET_LOCAL_DECRYPT_BUF_OFFSET_OFFSET                           31:0
+#define NVC7B0_PR_SET_LOCAL_DECRYPT_BUF_SIZE                                    (0x00000D1C)
+#define NVC7B0_PR_SET_LOCAL_DECRYPT_BUF_SIZE_SIZE                               31:0
+#define NVC7B0_PR_SET_CONTENT_DECRYPT_INFO_BUF_OFFSET                           (0x00000D20)
+#define NVC7B0_PR_SET_CONTENT_DECRYPT_INFO_BUF_OFFSET_OFFSET                    31:0
+#define NVC7B0_PR_SET_REENCRYPTED_BITSTREAM_BUF_OFFSET                          (0x00000D24)
+#define NVC7B0_PR_SET_REENCRYPTED_BITSTREAM_BUF_OFFSET_OFFSET                   31:0
+#define NVC7B0_DH_KE_SET_CHALLENGE_BUF_OFFSET                                   (0x00000E00)
+#define NVC7B0_DH_KE_SET_CHALLENGE_BUF_OFFSET_OFFSET                            31:0
+#define NVC7B0_DH_KE_SET_RESPONSE_BUF_OFFSET                                    (0x00000E04)
+#define NVC7B0_DH_KE_SET_RESPONSE_BUF_OFFSET_OFFSET                             31:0
+#define NVC7B0_SET_SESSION_KEY(b)                                               (0x00000F00 + (b)*0x00000004)
+#define NVC7B0_SET_SESSION_KEY_VALUE                                            31:0
+#define NVC7B0_SET_CONTENT_KEY(b)                                               (0x00000F10 + (b)*0x00000004)
+#define NVC7B0_SET_CONTENT_KEY_VALUE                                            31:0
+#define NVC7B0_PM_TRIGGER_END                                                   (0x00001114)
+#define NVC7B0_PM_TRIGGER_END_V                                                 31:0
+
+#define NVC7B0_ERROR_NONE                                                       (0x00000000)
+#define NVC7B0_OS_ERROR_EXECUTE_INSUFFICIENT_DATA                               (0x00000001)
+#define NVC7B0_OS_ERROR_SEMAPHORE_INSUFFICIENT_DATA                             (0x00000002)
+#define NVC7B0_OS_ERROR_INVALID_METHOD                                          (0x00000003)
+#define NVC7B0_OS_ERROR_INVALID_DMA_PAGE                                        (0x00000004)
+#define NVC7B0_OS_ERROR_UNHANDLED_INTERRUPT                                     (0x00000005)
+#define NVC7B0_OS_ERROR_EXCEPTION                                               (0x00000006)
+#define NVC7B0_OS_ERROR_INVALID_CTXSW_REQUEST                                   (0x00000007)
+#define NVC7B0_OS_ERROR_APPLICATION                                             (0x00000008)
+#define NVC7B0_OS_ERROR_SW_BREAKPT                                              (0x00000009)
+#define NVC7B0_OS_INTERRUPT_EXECUTE_AWAKEN                                      (0x00000100)
+#define NVC7B0_OS_INTERRUPT_BACKEND_SEMAPHORE_AWAKEN                            (0x00000200)
+#define NVC7B0_OS_INTERRUPT_CTX_ERROR_FBIF                                      (0x00000300)
+#define NVC7B0_OS_INTERRUPT_LIMIT_VIOLATION                                     (0x00000400)
+#define NVC7B0_OS_INTERRUPT_LIMIT_AND_FBIF_CTX_ERROR                            (0x00000500)
+#define NVC7B0_OS_INTERRUPT_HALT_ENGINE                                         (0x00000600)
+#define NVC7B0_OS_INTERRUPT_TRAP_NONSTALL                                       (0x00000700)
+#define NVC7B0_H264_VLD_ERR_SEQ_DATA_INCONSISTENT                               (0x00004001)
+#define NVC7B0_H264_VLD_ERR_PIC_DATA_INCONSISTENT                               (0x00004002)
+#define NVC7B0_H264_VLD_ERR_SLC_DATA_BUF_ADDR_OUT_OF_BOUNDS                     (0x00004100)
+#define NVC7B0_H264_VLD_ERR_BITSTREAM_ERROR                                     (0x00004101)
+#define NVC7B0_H264_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                          (0x000041F8)
+#define NVC7B0_H264_VLD_ERR_SLC_HDR_OUT_SIZE_NOT_MULT256                        (0x00004200)
+#define NVC7B0_H264_VLD_ERR_SLC_DATA_OUT_SIZE_NOT_MULT256                       (0x00004201)
+#define NVC7B0_H264_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                        (0x00004203)
+#define NVC7B0_H264_VLD_ERR_CTX_DMA_ID_SLC_HDR_OUT_INVALID                      (0x00004204)
+#define NVC7B0_H264_VLD_ERR_SLC_HDR_OUT_BUF_TOO_SMALL                           (0x00004205)
+#define NVC7B0_H264_VLD_ERR_SLC_HDR_OUT_BUF_ALREADY_VALID                       (0x00004206)
+#define NVC7B0_H264_VLD_ERR_SLC_DATA_OUT_BUF_TOO_SMALL                          (0x00004207)
+#define NVC7B0_H264_VLD_ERR_DATA_BUF_CNT_TOO_SMALL                              (0x00004208)
+#define NVC7B0_H264_VLD_ERR_BITSTREAM_EMPTY                                     (0x00004209)
+#define NVC7B0_H264_VLD_ERR_FRAME_WIDTH_TOO_LARGE                               (0x0000420A)
+#define NVC7B0_H264_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                              (0x0000420B)
+#define NVC7B0_H264_VLD_ERR_HIST_BUF_TOO_SMALL                                  (0x00004300)
+#define NVC7B0_VC1_VLD_ERR_PIC_DATA_BUF_ADDR_OUT_OF_BOUND                       (0x00005100)
+#define NVC7B0_VC1_VLD_ERR_BITSTREAM_ERROR                                      (0x00005101)
+#define NVC7B0_VC1_VLD_ERR_PIC_HDR_OUT_SIZE_NOT_MULT256                         (0x00005200)
+#define NVC7B0_VC1_VLD_ERR_PIC_DATA_OUT_SIZE_NOT_MULT256                        (0x00005201)
+#define NVC7B0_VC1_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                           (0x00005202)
+#define NVC7B0_VC1_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                         (0x00005203)
+#define NVC7B0_VC1_VLD_ERR_CTX_DMA_ID_PIC_HDR_OUT_INVALID                       (0x00005204)
+#define NVC7B0_VC1_VLD_ERR_SLC_HDR_OUT_BUF_TOO_SMALL                            (0x00005205)
+#define NVC7B0_VC1_VLD_ERR_PIC_HDR_OUT_BUF_ALREADY_VALID                        (0x00005206)
+#define NVC7B0_VC1_VLD_ERR_PIC_DATA_OUT_BUF_TOO_SMALL                           (0x00005207)
+#define NVC7B0_VC1_VLD_ERR_DATA_INFO_IN_BUF_TOO_SMALL                           (0x00005208)
+#define NVC7B0_VC1_VLD_ERR_BITSTREAM_EMPTY                                      (0x00005209)
+#define NVC7B0_VC1_VLD_ERR_FRAME_WIDTH_TOO_LARGE                                (0x0000520A)
+#define NVC7B0_VC1_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                               (0x0000520B)
+#define NVC7B0_VC1_VLD_ERR_PIC_DATA_OUT_BUF_FULL_TIME_OUT                       (0x00005300)
+#define NVC7B0_MPEG12_VLD_ERR_SLC_DATA_BUF_ADDR_OUT_OF_BOUNDS                   (0x00006100)
+#define NVC7B0_MPEG12_VLD_ERR_BITSTREAM_ERROR                                   (0x00006101)
+#define NVC7B0_MPEG12_VLD_ERR_SLC_DATA_OUT_SIZE_NOT_MULT256                     (0x00006200)
+#define NVC7B0_MPEG12_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                        (0x00006201)
+#define NVC7B0_MPEG12_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                      (0x00006202)
+#define NVC7B0_MPEG12_VLD_ERR_SLC_DATA_OUT_BUF_TOO_SMALL                        (0x00006203)
+#define NVC7B0_MPEG12_VLD_ERR_DATA_INFO_IN_BUF_TOO_SMALL                        (0x00006204)
+#define NVC7B0_MPEG12_VLD_ERR_BITSTREAM_EMPTY                                   (0x00006205)
+#define NVC7B0_MPEG12_VLD_ERR_INVALID_PIC_STRUCTURE                             (0x00006206)
+#define NVC7B0_MPEG12_VLD_ERR_INVALID_PIC_CODING_TYPE                           (0x00006207)
+#define NVC7B0_MPEG12_VLD_ERR_FRAME_WIDTH_TOO_LARGE                             (0x00006208)
+#define NVC7B0_MPEG12_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                            (0x00006209)
+#define NVC7B0_MPEG12_VLD_ERR_SLC_DATA_OUT_BUF_FULL_TIME_OUT                    (0x00006300)
+#define NVC7B0_CMN_VLD_ERR_PDEC_RETURNED_ERROR                                  (0x00007101)
+#define NVC7B0_CMN_VLD_ERR_EDOB_FLUSH_TIME_OUT                                  (0x00007102)
+#define NVC7B0_CMN_VLD_ERR_EDOB_REWIND_TIME_OUT                                 (0x00007103)
+#define NVC7B0_CMN_VLD_ERR_VLD_WD_TIME_OUT                                      (0x00007104)
+#define NVC7B0_CMN_VLD_ERR_NUM_SLICES_ZERO                                      (0x00007105)
+#define NVC7B0_MPEG4_VLD_ERR_PIC_DATA_BUF_ADDR_OUT_OF_BOUND                     (0x00008100)
+#define NVC7B0_MPEG4_VLD_ERR_BITSTREAM_ERROR                                    (0x00008101)
+#define NVC7B0_MPEG4_VLD_ERR_PIC_HDR_OUT_SIZE_NOT_MULT256                       (0x00008200)
+#define NVC7B0_MPEG4_VLD_ERR_PIC_DATA_OUT_SIZE_NOT_MULT256                      (0x00008201)
+#define NVC7B0_MPEG4_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                         (0x00008202)
+#define NVC7B0_MPEG4_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                       (0x00008203)
+#define NVC7B0_MPEG4_VLD_ERR_CTX_DMA_ID_PIC_HDR_OUT_INVALID                     (0x00008204)
+#define NVC7B0_MPEG4_VLD_ERR_SLC_HDR_OUT_BUF_TOO_SMALL                          (0x00008205)
+#define NVC7B0_MPEG4_VLD_ERR_PIC_HDR_OUT_BUF_ALREADY_VALID                      (0x00008206)
+#define NVC7B0_MPEG4_VLD_ERR_PIC_DATA_OUT_BUF_TOO_SMALL                         (0x00008207)
+#define NVC7B0_MPEG4_VLD_ERR_DATA_INFO_IN_BUF_TOO_SMALL                         (0x00008208)
+#define NVC7B0_MPEG4_VLD_ERR_BITSTREAM_EMPTY                                    (0x00008209)
+#define NVC7B0_MPEG4_VLD_ERR_FRAME_WIDTH_TOO_LARGE                              (0x0000820A)
+#define NVC7B0_MPEG4_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                             (0x0000820B)
+#define NVC7B0_MPEG4_VLD_ERR_PIC_DATA_OUT_BUF_FULL_TIME_OUT                     (0x00051E01)
+#define NVC7B0_DEC_ERROR_MPEG12_APPTIMER_EXPIRED                                (0xDEC10001)
+#define NVC7B0_DEC_ERROR_MPEG12_MVTIMER_EXPIRED                                 (0xDEC10002)
+#define NVC7B0_DEC_ERROR_MPEG12_INVALID_TOKEN                                   (0xDEC10003)
+#define NVC7B0_DEC_ERROR_MPEG12_SLICEDATA_MISSING                               (0xDEC10004)
+#define NVC7B0_DEC_ERROR_MPEG12_HWERR_INTERRUPT                                 (0xDEC10005)
+#define NVC7B0_DEC_ERROR_MPEG12_DETECTED_VLD_FAILURE                            (0xDEC10006)
+#define NVC7B0_DEC_ERROR_MPEG12_PICTURE_INIT                                    (0xDEC10100)
+#define NVC7B0_DEC_ERROR_MPEG12_STATEMACHINE_FAILURE                            (0xDEC10101)
+#define NVC7B0_DEC_ERROR_MPEG12_INVALID_CTXID_PIC                               (0xDEC10901)
+#define NVC7B0_DEC_ERROR_MPEG12_INVALID_CTXID_UCODE                             (0xDEC10902)
+#define NVC7B0_DEC_ERROR_MPEG12_INVALID_CTXID_FC                                (0xDEC10903)
+#define NVC7B0_DEC_ERROR_MPEG12_INVALID_CTXID_SLH                               (0xDEC10904)
+#define NVC7B0_DEC_ERROR_MPEG12_INVALID_UCODE_SIZE                              (0xDEC10905)
+#define NVC7B0_DEC_ERROR_MPEG12_INVALID_SLICE_COUNT                             (0xDEC10906)
+#define NVC7B0_DEC_ERROR_VC1_APPTIMER_EXPIRED                                   (0xDEC20001)
+#define NVC7B0_DEC_ERROR_VC1_MVTIMER_EXPIRED                                    (0xDEC20002)
+#define NVC7B0_DEC_ERROR_VC1_INVALID_TOKEN                                      (0xDEC20003)
+#define NVC7B0_DEC_ERROR_VC1_SLICEDATA_MISSING                                  (0xDEC20004)
+#define NVC7B0_DEC_ERROR_VC1_HWERR_INTERRUPT                                    (0xDEC20005)
+#define NVC7B0_DEC_ERROR_VC1_DETECTED_VLD_FAILURE                               (0xDEC20006)
+#define NVC7B0_DEC_ERROR_VC1_TIMEOUT_POLLING_FOR_DATA                           (0xDEC20007)
+#define NVC7B0_DEC_ERROR_VC1_PDEC_PIC_END_UNALIGNED                             (0xDEC20008)
+#define NVC7B0_DEC_ERROR_VC1_WDTIMER_EXPIRED                                    (0xDEC20009)
+#define NVC7B0_DEC_ERROR_VC1_ERRINTSTART                                        (0xDEC20010)
+#define NVC7B0_DEC_ERROR_VC1_IQT_ERRINT                                         (0xDEC20011)
+#define NVC7B0_DEC_ERROR_VC1_MC_ERRINT                                          (0xDEC20012)
+#define NVC7B0_DEC_ERROR_VC1_MC_IQT_ERRINT                                      (0xDEC20013)
+#define NVC7B0_DEC_ERROR_VC1_REC_ERRINT                                         (0xDEC20014)
+#define NVC7B0_DEC_ERROR_VC1_REC_IQT_ERRINT                                     (0xDEC20015)
+#define NVC7B0_DEC_ERROR_VC1_REC_MC_ERRINT                                      (0xDEC20016)
+#define NVC7B0_DEC_ERROR_VC1_REC_MC_IQT_ERRINT                                  (0xDEC20017)
+#define NVC7B0_DEC_ERROR_VC1_DBF_ERRINT                                         (0xDEC20018)
+#define NVC7B0_DEC_ERROR_VC1_DBF_IQT_ERRINT                                     (0xDEC20019)
+#define NVC7B0_DEC_ERROR_VC1_DBF_MC_ERRINT                                      (0xDEC2001A)
+#define NVC7B0_DEC_ERROR_VC1_DBF_MC_IQT_ERRINT                                  (0xDEC2001B)
+#define NVC7B0_DEC_ERROR_VC1_DBF_REC_ERRINT                                     (0xDEC2001C)
+#define NVC7B0_DEC_ERROR_VC1_DBF_REC_IQT_ERRINT                                 (0xDEC2001D)
+#define NVC7B0_DEC_ERROR_VC1_DBF_REC_MC_ERRINT                                  (0xDEC2001E)
+#define NVC7B0_DEC_ERROR_VC1_DBF_REC_MC_IQT_ERRINT                              (0xDEC2001F)
+#define NVC7B0_DEC_ERROR_VC1_PICTURE_INIT                                       (0xDEC20100)
+#define NVC7B0_DEC_ERROR_VC1_STATEMACHINE_FAILURE                               (0xDEC20101)
+#define NVC7B0_DEC_ERROR_VC1_INVALID_CTXID_PIC                                  (0xDEC20901)
+#define NVC7B0_DEC_ERROR_VC1_INVALID_CTXID_UCODE                                (0xDEC20902)
+#define NVC7B0_DEC_ERROR_VC1_INVALID_CTXID_FC                                   (0xDEC20903)
+#define NVC7B0_DEC_ERROR_VC1_INVAILD_CTXID_SLH                                  (0xDEC20904)
+#define NVC7B0_DEC_ERROR_VC1_INVALID_UCODE_SIZE                                 (0xDEC20905)
+#define NVC7B0_DEC_ERROR_VC1_INVALID_SLICE_COUNT                                (0xDEC20906)
+#define NVC7B0_DEC_ERROR_H264_APPTIMER_EXPIRED                                  (0xDEC30001)
+#define NVC7B0_DEC_ERROR_H264_MVTIMER_EXPIRED                                   (0xDEC30002)
+#define NVC7B0_DEC_ERROR_H264_INVALID_TOKEN                                     (0xDEC30003)
+#define NVC7B0_DEC_ERROR_H264_SLICEDATA_MISSING                                 (0xDEC30004)
+#define NVC7B0_DEC_ERROR_H264_HWERR_INTERRUPT                                   (0xDEC30005)
+#define NVC7B0_DEC_ERROR_H264_DETECTED_VLD_FAILURE                              (0xDEC30006)
+#define NVC7B0_DEC_ERROR_H264_ERRINTSTART                                       (0xDEC30010)
+#define NVC7B0_DEC_ERROR_H264_IQT_ERRINT                                        (0xDEC30011)
+#define NVC7B0_DEC_ERROR_H264_MC_ERRINT                                         (0xDEC30012)
+#define NVC7B0_DEC_ERROR_H264_MC_IQT_ERRINT                                     (0xDEC30013)
+#define NVC7B0_DEC_ERROR_H264_REC_ERRINT                                        (0xDEC30014)
+#define NVC7B0_DEC_ERROR_H264_REC_IQT_ERRINT                                    (0xDEC30015)
+#define NVC7B0_DEC_ERROR_H264_REC_MC_ERRINT                                     (0xDEC30016)
+#define NVC7B0_DEC_ERROR_H264_REC_MC_IQT_ERRINT                                 (0xDEC30017)
+#define NVC7B0_DEC_ERROR_H264_DBF_ERRINT                                        (0xDEC30018)
+#define NVC7B0_DEC_ERROR_H264_DBF_IQT_ERRINT                                    (0xDEC30019)
+#define NVC7B0_DEC_ERROR_H264_DBF_MC_ERRINT                                     (0xDEC3001A)
+#define NVC7B0_DEC_ERROR_H264_DBF_MC_IQT_ERRINT                                 (0xDEC3001B)
+#define NVC7B0_DEC_ERROR_H264_DBF_REC_ERRINT                                    (0xDEC3001C)
+#define NVC7B0_DEC_ERROR_H264_DBF_REC_IQT_ERRINT                                (0xDEC3001D)
+#define NVC7B0_DEC_ERROR_H264_DBF_REC_MC_ERRINT                                 (0xDEC3001E)
+#define NVC7B0_DEC_ERROR_H264_DBF_REC_MC_IQT_ERRINT                             (0xDEC3001F)
+#define NVC7B0_DEC_ERROR_H264_PICTURE_INIT                                      (0xDEC30100)
+#define NVC7B0_DEC_ERROR_H264_STATEMACHINE_FAILURE                              (0xDEC30101)
+#define NVC7B0_DEC_ERROR_H264_INVALID_CTXID_PIC                                 (0xDEC30901)
+#define NVC7B0_DEC_ERROR_H264_INVALID_CTXID_UCODE                               (0xDEC30902)
+#define NVC7B0_DEC_ERROR_H264_INVALID_CTXID_FC                                  (0xDEC30903)
+#define NVC7B0_DEC_ERROR_H264_INVALID_CTXID_SLH                                 (0xDEC30904)
+#define NVC7B0_DEC_ERROR_H264_INVALID_UCODE_SIZE                                (0xDEC30905)
+#define NVC7B0_DEC_ERROR_H264_INVALID_SLICE_COUNT                               (0xDEC30906)
+#define NVC7B0_DEC_ERROR_MPEG4_APPTIMER_EXPIRED                                 (0xDEC40001)
+#define NVC7B0_DEC_ERROR_MPEG4_MVTIMER_EXPIRED                                  (0xDEC40002)
+#define NVC7B0_DEC_ERROR_MPEG4_INVALID_TOKEN                                    (0xDEC40003)
+#define NVC7B0_DEC_ERROR_MPEG4_SLICEDATA_MISSING                                (0xDEC40004)
+#define NVC7B0_DEC_ERROR_MPEG4_HWERR_INTERRUPT                                  (0xDEC40005)
+#define NVC7B0_DEC_ERROR_MPEG4_DETECTED_VLD_FAILURE                             (0xDEC40006)
+#define NVC7B0_DEC_ERROR_MPEG4_TIMEOUT_POLLING_FOR_DATA                         (0xDEC40007)
+#define NVC7B0_DEC_ERROR_MPEG4_PDEC_PIC_END_UNALIGNED                           (0xDEC40008)
+#define NVC7B0_DEC_ERROR_MPEG4_WDTIMER_EXPIRED                                  (0xDEC40009)
+#define NVC7B0_DEC_ERROR_MPEG4_ERRINTSTART                                      (0xDEC40010)
+#define NVC7B0_DEC_ERROR_MPEG4_IQT_ERRINT                                       (0xDEC40011)
+#define NVC7B0_DEC_ERROR_MPEG4_MC_ERRINT                                        (0xDEC40012)
+#define NVC7B0_DEC_ERROR_MPEG4_MC_IQT_ERRINT                                    (0xDEC40013)
+#define NVC7B0_DEC_ERROR_MPEG4_REC_ERRINT                                       (0xDEC40014)
+#define NVC7B0_DEC_ERROR_MPEG4_REC_IQT_ERRINT                                   (0xDEC40015)
+#define NVC7B0_DEC_ERROR_MPEG4_REC_MC_ERRINT                                    (0xDEC40016)
+#define NVC7B0_DEC_ERROR_MPEG4_REC_MC_IQT_ERRINT                                (0xDEC40017)
+#define NVC7B0_DEC_ERROR_MPEG4_DBF_ERRINT                                       (0xDEC40018)
+#define NVC7B0_DEC_ERROR_MPEG4_DBF_IQT_ERRINT                                   (0xDEC40019)
+#define NVC7B0_DEC_ERROR_MPEG4_DBF_MC_ERRINT                                    (0xDEC4001A)
+#define NVC7B0_DEC_ERROR_MPEG4_DBF_MC_IQT_ERRINT                                (0xDEC4001B)
+#define NVC7B0_DEC_ERROR_MPEG4_DBF_REC_ERRINT                                   (0xDEC4001C)
+#define NVC7B0_DEC_ERROR_MPEG4_DBF_REC_IQT_ERRINT                               (0xDEC4001D)
+#define NVC7B0_DEC_ERROR_MPEG4_DBF_REC_MC_ERRINT                                (0xDEC4001E)
+#define NVC7B0_DEC_ERROR_MPEG4_DBF_REC_MC_IQT_ERRINT                            (0xDEC4001F)
+#define NVC7B0_DEC_ERROR_MPEG4_PICTURE_INIT                                     (0xDEC40100)
+#define NVC7B0_DEC_ERROR_MPEG4_STATEMACHINE_FAILURE                             (0xDEC40101)
+#define NVC7B0_DEC_ERROR_MPEG4_INVALID_CTXID_PIC                                (0xDEC40901)
+#define NVC7B0_DEC_ERROR_MPEG4_INVALID_CTXID_UCODE                              (0xDEC40902)
+#define NVC7B0_DEC_ERROR_MPEG4_INVALID_CTXID_FC                                 (0xDEC40903)
+#define NVC7B0_DEC_ERROR_MPEG4_INVALID_CTXID_SLH                                (0xDEC40904)
+#define NVC7B0_DEC_ERROR_MPEG4_INVALID_UCODE_SIZE                               (0xDEC40905)
+#define NVC7B0_DEC_ERROR_MPEG4_INVALID_SLICE_COUNT                              (0xDEC40906)
+
+#ifdef __cplusplus
+};     /* extern "C" */
+#endif
+#endif // clc7b0_h
diff --git a/src/nouveau/headers/nvidia/classes/clc7b7.h b/src/nouveau/headers/nvidia/classes/clc7b7.h
new file mode 100644
index 0000000000000000000000000000000000000000..47cd493b901688c078755b4e8fd6cf12ded81d28
--- /dev/null
+++ b/src/nouveau/headers/nvidia/classes/clc7b7.h
@@ -0,0 +1,312 @@
+/*
+ * SPDX-FileCopyrightText: Copyright (c) 1993-2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+ * SPDX-License-Identifier: MIT
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef clc7b7_h_
+#define clc7b7_h_
+
+#include "nvtypes.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define NVC7B7_VIDEO_ENCODER                                                             (0x0000C7B7)
+
+#define NVC7B7_NOP                                                              (0x00000100)
+#define NVC7B7_NOP_PARAMETER                                                    31:0
+#define NVC7B7_PM_TRIGGER                                                       (0x00000140)
+#define NVC7B7_PM_TRIGGER_V                                                     31:0
+#define NVC7B7_SET_APPLICATION_ID                                               (0x00000200)
+#define NVC7B7_SET_APPLICATION_ID_ID                                            31:0
+#define NVC7B7_SET_APPLICATION_ID_ID_NVENC_H264                                 (0x00000001)
+#define NVC7B7_SET_APPLICATION_ID_ID_NVENC_VP8                                  (0x00000002)
+#define NVC7B7_SET_APPLICATION_ID_ID_NVENC_H265                                 (0x00000003)
+#define NVC7B7_SET_APPLICATION_ID_ID_NVENC_VP9                                  (0x00000004)
+#define NVC7B7_SET_APPLICATION_ID_ID_NVENC_RC                                   (0x00000005)
+#define NVC7B7_SET_APPLICATION_ID_ID_NVENC_OFS                                  (0x00000006)
+#define NVC7B7_SET_WATCHDOG_TIMER                                               (0x00000204)
+#define NVC7B7_SET_WATCHDOG_TIMER_TIMER                                         31:0
+#define NVC7B7_SEMAPHORE_A                                                      (0x00000240)
+#define NVC7B7_SEMAPHORE_A_UPPER                                                7:0
+#define NVC7B7_SEMAPHORE_B                                                      (0x00000244)
+#define NVC7B7_SEMAPHORE_B_LOWER                                                31:0
+#define NVC7B7_SEMAPHORE_C                                                      (0x00000248)
+#define NVC7B7_SEMAPHORE_C_PAYLOAD                                              31:0
+#define NVC7B7_SET_SEMAPHORE_PAYLOAD_LOWER                                      (0x00000254)
+#define NVC7B7_SET_SEMAPHORE_PAYLOAD_LOWER_PAYLOAD_LOWER                        31:0
+#define NVC7B7_SET_SEMAPHORE_PAYLOAD_UPPER                                      (0x00000258)
+#define NVC7B7_SET_SEMAPHORE_PAYLOAD_UPPER_PAYLOAD_UPPER                        31:0
+#define NVC7B7_SET_MONITORED_FENCE_SIGNAL_ADDRESS_BASE_A                        (0x0000025C)
+#define NVC7B7_SET_MONITORED_FENCE_SIGNAL_ADDRESS_BASE_A_LOWER                  31:0
+#define NVC7B7_SET_MONITORED_FENCE_SIGNAL_ADDRESS_BASE_B                        (0x00000260)
+#define NVC7B7_SET_MONITORED_FENCE_SIGNAL_ADDRESS_BASE_B_UPPER                  31:0
+#define NVC7B7_EXECUTE                                                          (0x00000300)
+#define NVC7B7_EXECUTE_NOTIFY                                                   0:0
+#define NVC7B7_EXECUTE_NOTIFY_DISABLE                                           (0x00000000)
+#define NVC7B7_EXECUTE_NOTIFY_ENABLE                                            (0x00000001)
+#define NVC7B7_EXECUTE_NOTIFY_ON                                                1:1
+#define NVC7B7_EXECUTE_NOTIFY_ON_END                                            (0x00000000)
+#define NVC7B7_EXECUTE_NOTIFY_ON_BEGIN                                          (0x00000001)
+#define NVC7B7_EXECUTE_PREDICATION                                              2:2
+#define NVC7B7_EXECUTE_PREDICATION_DISABLE                                      (0x00000000)
+#define NVC7B7_EXECUTE_PREDICATION_ENABLE                                       (0x00000001)
+#define NVC7B7_EXECUTE_PREDICATION_OP                                           3:3
+#define NVC7B7_EXECUTE_PREDICATION_OP_EQUAL_ZERO                                (0x00000000)
+#define NVC7B7_EXECUTE_PREDICATION_OP_NOT_EQUAL_ZERO                            (0x00000001)
+#define NVC7B7_EXECUTE_AWAKEN                                                   8:8
+#define NVC7B7_EXECUTE_AWAKEN_DISABLE                                           (0x00000000)
+#define NVC7B7_EXECUTE_AWAKEN_ENABLE                                            (0x00000001)
+#define NVC7B7_SEMAPHORE_D                                                      (0x00000304)
+#define NVC7B7_SEMAPHORE_D_STRUCTURE_SIZE                                       1:0
+#define NVC7B7_SEMAPHORE_D_STRUCTURE_SIZE_ONE                                   (0x00000000)
+#define NVC7B7_SEMAPHORE_D_STRUCTURE_SIZE_FOUR                                  (0x00000001)
+#define NVC7B7_SEMAPHORE_D_STRUCTURE_SIZE_TWO                                   (0x00000002)
+#define NVC7B7_SEMAPHORE_D_AWAKEN_ENABLE                                        8:8
+#define NVC7B7_SEMAPHORE_D_AWAKEN_ENABLE_FALSE                                  (0x00000000)
+#define NVC7B7_SEMAPHORE_D_AWAKEN_ENABLE_TRUE                                   (0x00000001)
+#define NVC7B7_SEMAPHORE_D_OPERATION                                            17:16
+#define NVC7B7_SEMAPHORE_D_OPERATION_RELEASE                                    (0x00000000)
+#define NVC7B7_SEMAPHORE_D_OPERATION_MONITORED_FENCE                            (0x00000001)
+#define NVC7B7_SEMAPHORE_D_OPERATION_MONITORED_FENCE_EXT                        (0x00000002)
+#define NVC7B7_SEMAPHORE_D_OPERATION_TRAP                                       (0x00000003)
+#define NVC7B7_SEMAPHORE_D_FLUSH_DISABLE                                        21:21
+#define NVC7B7_SEMAPHORE_D_FLUSH_DISABLE_FALSE                                  (0x00000000)
+#define NVC7B7_SEMAPHORE_D_FLUSH_DISABLE_TRUE                                   (0x00000001)
+#define NVC7B7_SEMAPHORE_D_CONDITIONAL_TRAP                                     22:22
+#define NVC7B7_SEMAPHORE_D_CONDITIONAL_TRAP_FALSE                               (0x00000000)
+#define NVC7B7_SEMAPHORE_D_CONDITIONAL_TRAP_TRUE                                (0x00000001)
+#define NVC7B7_SEMAPHORE_D_PAYLOAD_SIZE                                         23:23
+#define NVC7B7_SEMAPHORE_D_PAYLOAD_SIZE_32BIT                                   (0x00000000)
+#define NVC7B7_SEMAPHORE_D_PAYLOAD_SIZE_64BIT                                   (0x00000001)
+#define NVC7B7_SET_PREDICATION_OFFSET_UPPER                                     (0x00000308)
+#define NVC7B7_SET_PREDICATION_OFFSET_UPPER_OFFSET                              7:0
+#define NVC7B7_SET_PREDICATION_OFFSET_LOWER                                     (0x0000030C)
+#define NVC7B7_SET_PREDICATION_OFFSET_LOWER_OFFSET                              31:0
+#define NVC7B7_SET_IN_REF_PIC0_LUMA                                             (0x00000400)
+#define NVC7B7_SET_IN_REF_PIC0_LUMA_OFFSET                                      31:0
+#define NVC7B7_SET_IN_REF_PIC1_LUMA                                             (0x00000404)
+#define NVC7B7_SET_IN_REF_PIC1_LUMA_OFFSET                                      31:0
+#define NVC7B7_SET_IN_REF_PIC2_LUMA                                             (0x00000408)
+#define NVC7B7_SET_IN_REF_PIC2_LUMA_OFFSET                                      31:0
+#define NVC7B7_SET_IN_REF_PIC3_LUMA                                             (0x0000040C)
+#define NVC7B7_SET_IN_REF_PIC3_LUMA_OFFSET                                      31:0
+#define NVC7B7_SET_IN_REF_PIC4_LUMA                                             (0x00000410)
+#define NVC7B7_SET_IN_REF_PIC4_LUMA_OFFSET                                      31:0
+#define NVC7B7_SET_IN_REF_PIC5_LUMA                                             (0x00000414)
+#define NVC7B7_SET_IN_REF_PIC5_LUMA_OFFSET                                      31:0
+#define NVC7B7_SET_IN_REF_PIC6_LUMA                                             (0x00000418)
+#define NVC7B7_SET_IN_REF_PIC6_LUMA_OFFSET                                      31:0
+#define NVC7B7_SET_IN_REF_PIC7_LUMA                                             (0x0000041C)
+#define NVC7B7_SET_IN_REF_PIC7_LUMA_OFFSET                                      31:0
+#define NVC7B7_SET_IN_REF_PIC8_LUMA                                             (0x00000420)
+#define NVC7B7_SET_IN_REF_PIC8_LUMA_OFFSET                                      31:0
+#define NVC7B7_SET_IN_REF_PIC9_LUMA                                             (0x00000424)
+#define NVC7B7_SET_IN_REF_PIC9_LUMA_OFFSET                                      31:0
+#define NVC7B7_SET_IN_REF_PIC10_LUMA                                            (0x00000428)
+#define NVC7B7_SET_IN_REF_PIC10_LUMA_OFFSET                                     31:0
+#define NVC7B7_SET_IN_REF_PIC11_LUMA                                            (0x0000042C)
+#define NVC7B7_SET_IN_REF_PIC11_LUMA_OFFSET                                     31:0
+#define NVC7B7_SET_IN_REF_PIC12_LUMA                                            (0x00000430)
+#define NVC7B7_SET_IN_REF_PIC12_LUMA_OFFSET                                     31:0
+#define NVC7B7_SET_IN_REF_PIC13_LUMA                                            (0x00000434)
+#define NVC7B7_SET_IN_REF_PIC13_LUMA_OFFSET                                     31:0
+#define NVC7B7_SET_IN_REF_PIC14_LUMA                                            (0x00000438)
+#define NVC7B7_SET_IN_REF_PIC14_LUMA_OFFSET                                     31:0
+#define NVC7B7_SET_IN_REF_PIC15_LUMA                                            (0x0000043C)
+#define NVC7B7_SET_IN_REF_PIC15_LUMA_OFFSET                                     31:0
+#define NVC7B7_SET_IN_REF_PIC0_CHROMA                                           (0x00000440)
+#define NVC7B7_SET_IN_REF_PIC0_CHROMA_OFFSET                                    31:0
+#define NVC7B7_SET_IN_REF_PIC1_CHROMA                                           (0x00000444)
+#define NVC7B7_SET_IN_REF_PIC1_CHROMA_OFFSET                                    31:0
+#define NVC7B7_SET_IN_REF_PIC2_CHROMA                                           (0x00000448)
+#define NVC7B7_SET_IN_REF_PIC2_CHROMA_OFFSET                                    31:0
+#define NVC7B7_SET_IN_REF_PIC3_CHROMA                                           (0x0000044C)
+#define NVC7B7_SET_IN_REF_PIC3_CHROMA_OFFSET                                    31:0
+#define NVC7B7_SET_IN_REF_PIC4_CHROMA                                           (0x00000450)
+#define NVC7B7_SET_IN_REF_PIC4_CHROMA_OFFSET                                    31:0
+#define NVC7B7_SET_IN_REF_PIC5_CHROMA                                           (0x00000454)
+#define NVC7B7_SET_IN_REF_PIC5_CHROMA_OFFSET                                    31:0
+#define NVC7B7_SET_IN_REF_PIC6_CHROMA                                           (0x00000458)
+#define NVC7B7_SET_IN_REF_PIC6_CHROMA_OFFSET                                    31:0
+#define NVC7B7_SET_IN_REF_PIC7_CHROMA                                           (0x0000045C)
+#define NVC7B7_SET_IN_REF_PIC7_CHROMA_OFFSET                                    31:0
+#define NVC7B7_SET_IN_REF_PIC8_CHROMA                                           (0x00000460)
+#define NVC7B7_SET_IN_REF_PIC8_CHROMA_OFFSET                                    31:0
+#define NVC7B7_SET_IN_REF_PIC9_CHROMA                                           (0x00000464)
+#define NVC7B7_SET_IN_REF_PIC9_CHROMA_OFFSET                                    31:0
+#define NVC7B7_SET_IN_REF_PIC10_CHROMA                                          (0x00000468)
+#define NVC7B7_SET_IN_REF_PIC10_CHROMA_OFFSET                                   31:0
+#define NVC7B7_SET_IN_REF_PIC11_CHROMA                                          (0x0000046C)
+#define NVC7B7_SET_IN_REF_PIC11_CHROMA_OFFSET                                   31:0
+#define NVC7B7_SET_IN_REF_PIC12_CHROMA                                          (0x00000470)
+#define NVC7B7_SET_IN_REF_PIC12_CHROMA_OFFSET                                   31:0
+#define NVC7B7_SET_IN_REF_PIC13_CHROMA                                          (0x00000474)
+#define NVC7B7_SET_IN_REF_PIC13_CHROMA_OFFSET                                   31:0
+#define NVC7B7_SET_IN_REF_PIC14_CHROMA                                          (0x00000478)
+#define NVC7B7_SET_IN_REF_PIC14_CHROMA_OFFSET                                   31:0
+#define NVC7B7_SET_IN_REF_PIC15_CHROMA                                          (0x0000047C)
+#define NVC7B7_SET_IN_REF_PIC15_CHROMA_OFFSET                                   31:0
+#define NVC7B7_SET_IN_REF_PIC_LAST_LUMA                                         (0x00000500)
+#define NVC7B7_SET_IN_REF_PIC_LAST_LUMA_OFFSET                                  31:0
+#define NVC7B7_SET_IN_REF_PIC_GOLDEN_LUMA                                       (0x00000504)
+#define NVC7B7_SET_IN_REF_PIC_GOLDEN_LUMA_OFFSET                                31:0
+#define NVC7B7_SET_IN_REF_PIC_ALTREF_LUMA                                       (0x00000508)
+#define NVC7B7_SET_IN_REF_PIC_ALTREF_LUMA_OFFSET                                31:0
+#define NVC7B7_SET_UCODE_STATE                                                  (0x0000050C)
+#define NVC7B7_SET_UCODE_STATE_OFFSET                                           31:0
+#define NVC7B7_SET_IO_VP8_ENC_STATUS                                            (0x00000510)
+#define NVC7B7_SET_IO_VP8_ENC_STATUS_OFFSET                                     31:0
+#define NVC7B7_SET_OUT_BITSTREAM_RES                                            (0x00000514)
+#define NVC7B7_SET_OUT_BITSTREAM_RES_OFFSET                                     31:0
+#define NVC7B7_SET_IN_REF_PIC_LAST_CHROMA                                       (0x00000518)
+#define NVC7B7_SET_IN_REF_PIC_LAST_CHROMA_OFFSET                                31:0
+#define NVC7B7_SET_IN_REF_PIC_GOLDEN_CHROMA                                     (0x0000051C)
+#define NVC7B7_SET_IN_REF_PIC_GOLDEN_CHROMA_OFFSET                              31:0
+#define NVC7B7_SET_IN_REF_PIC_ALTREF_CHROMA                                     (0x00000520)
+#define NVC7B7_SET_IN_REF_PIC_ALTREF_CHROMA_OFFSET                              31:0
+#define NVC7B7_SET_OUT_VP9_COUNTER_DATA                                         (0x00000524)
+#define NVC7B7_SET_OUT_VP9_COUNTER_DATA_OFFSET                                  31:0
+#define NVC7B7_SET_IN_VP9_PROBABILITY_DATA                                      (0x00000528)
+#define NVC7B7_SET_IN_VP9_PROBABILITY_DATA_OFFSET                               31:0
+#define NVC7B7_SET_IN_VP9_CUR_TEMPORAL_DATA                                     (0x0000052C)
+#define NVC7B7_SET_IN_VP9_CUR_TEMPORAL_DATA_OFFSET                              31:0
+#define NVC7B7_SET_IN_VP9_REF_TEMPORAL_DATA                                     (0x00000530)
+#define NVC7B7_SET_IN_VP9_REF_TEMPORAL_DATA_OFFSET                              31:0
+#define NVC7B7_SET_IN_VP9_COMBINEDLINE_BUF                                      (0x00000534)
+#define NVC7B7_SET_IN_VP9_COMBINEDLINE_BUF_OFFSET                               31:0
+#define NVC7B7_SET_IN_VP9_FILTERLINE_BUF                                        (0x00000538)
+#define NVC7B7_SET_IN_VP9_FILTERLINE_BUF_OFFSET                                 31:0
+#define NVC7B7_SET_IN_VP9_FILTERCOLLINE_BUF                                     (0x0000053C)
+#define NVC7B7_SET_IN_VP9_FILTERCOLLINE_BUF_OFFSET                              31:0
+#define NVC7B7_SET_IN_VP9_MOCOMP_PIC_LUMA                                       (0x00000544)
+#define NVC7B7_SET_IN_VP9_MOCOMP_PIC_LUMA_OFFSET                                31:0
+#define NVC7B7_SET_IN_VP9_MOCOMP_PIC_CHROMA                                     (0x00000548)
+#define NVC7B7_SET_IN_VP9_MOCOMP_PIC_CHROMA_OFFSET                              31:0
+#define NVC7B7_SET_CONTROL_PARAMS                                               (0x00000700)
+#define NVC7B7_SET_CONTROL_PARAMS_CODEC_TYPE                                    3:0
+#define NVC7B7_SET_CONTROL_PARAMS_CODEC_TYPE_H264                               (0x00000003)
+#define NVC7B7_SET_CONTROL_PARAMS_FORCE_OUT_PIC                                 8:8
+#define NVC7B7_SET_CONTROL_PARAMS_FORCE_OUT_COL                                 9:9
+#define NVC7B7_SET_CONTROL_PARAMS_MEONLY                                        10:10
+#define NVC7B7_SET_CONTROL_PARAMS_SLICE_STAT_ON                                 11:11
+#define NVC7B7_SET_CONTROL_PARAMS_GPTIMER_ON                                    12:12
+#define NVC7B7_SET_CONTROL_PARAMS_STOP_PROB_UPDATE                              13:13
+#define NVC7B7_SET_CONTROL_PARAMS_DUMP_CYCLE_COUNT                              14:14
+#define NVC7B7_SET_CONTROL_PARAMS_MPEC_STAT_ON                                  15:15
+#define NVC7B7_SET_CONTROL_PARAMS_DEBUG_MODE                                    16:16
+#define NVC7B7_SET_CONTROL_PARAMS_SUBFRAME_MODE                                 18:17
+#define NVC7B7_SET_CONTROL_PARAMS_SUBFRAME_MODE_NONE                            (0x00000000)
+#define NVC7B7_SET_CONTROL_PARAMS_SUBFRAME_MODE_SLICE_FLUSH                     (0x00000001)
+#define NVC7B7_SET_CONTROL_PARAMS_SUBFRAME_MODE_SLICE_OFFSETS_WITHOUT_FLUSH     (0x00000002)
+#define NVC7B7_SET_CONTROL_PARAMS_SUBFRAME_MODE_SLICE_OFFSETS_WITH_FLUSH        (0x00000003)
+#define NVC7B7_SET_CONTROL_PARAMS_RCSTAT_WRITE                                  19:19
+#define NVC7B7_SET_CONTROL_PARAMS_RCSTAT_READ                                   20:20
+#define NVC7B7_SET_CONTROL_PARAMS_ENCRYPT_ON                                    21:21
+#define NVC7B7_SET_CONTROL_PARAMS_RCMODE                                        31:24
+#define NVC7B7_SET_CONTROL_PARAMS_RCMODE_CONSTQP                                (0x00000000)
+#define NVC7B7_SET_PICTURE_INDEX                                                (0x00000704)
+#define NVC7B7_SET_PICTURE_INDEX_INDEX                                          31:0
+#define NVC7B7_SET_OUT_ENCRYPT_PARAMS                                           (0x00000708)
+#define NVC7B7_SET_OUT_ENCRYPT_PARAMS_OFFSET                                    31:0
+#define NVC7B7_SET_IN_RCDATA                                                    (0x0000070C)
+#define NVC7B7_SET_IN_RCDATA_OFFSET                                             31:0
+#define NVC7B7_SET_IN_DRV_PIC_SETUP                                             (0x00000710)
+#define NVC7B7_SET_IN_DRV_PIC_SETUP_OFFSET                                      31:0
+#define NVC7B7_SET_IN_CEAHINTS_DATA                                             (0x00000714)
+#define NVC7B7_SET_IN_CEAHINTS_DATA_OFFSET                                      31:0
+#define NVC7B7_SET_OUT_ENC_STATUS                                               (0x00000718)
+#define NVC7B7_SET_OUT_ENC_STATUS_OFFSET                                        31:0
+#define NVC7B7_SET_OUT_BITSTREAM                                                (0x0000071C)
+#define NVC7B7_SET_OUT_BITSTREAM_OFFSET                                         31:0
+#define NVC7B7_SET_IOHISTORY                                                    (0x00000720)
+#define NVC7B7_SET_IOHISTORY_OFFSET                                             31:0
+#define NVC7B7_SET_IO_RC_PROCESS                                                (0x00000724)
+#define NVC7B7_SET_IO_RC_PROCESS_OFFSET                                         31:0
+#define NVC7B7_SET_IN_COLOC_DATA                                                (0x00000728)
+#define NVC7B7_SET_IN_COLOC_DATA_OFFSET                                         31:0
+#define NVC7B7_SET_OUT_COLOC_DATA                                               (0x0000072C)
+#define NVC7B7_SET_OUT_COLOC_DATA_OFFSET                                        31:0
+#define NVC7B7_SET_OUT_REF_PIC_LUMA                                             (0x00000730)
+#define NVC7B7_SET_OUT_REF_PIC_LUMA_OFFSET                                      31:0
+#define NVC7B7_SET_IN_CUR_PIC                                                   (0x00000734)
+#define NVC7B7_SET_IN_CUR_PIC_OFFSET                                            31:0
+#define NVC7B7_SET_IN_MEPRED_DATA                                               (0x00000738)
+#define NVC7B7_SET_IN_MEPRED_DATA_OFFSET                                        31:0
+#define NVC7B7_SET_OUT_MEPRED_DATA                                              (0x0000073C)
+#define NVC7B7_SET_OUT_MEPRED_DATA_OFFSET                                       31:0
+#define NVC7B7_SET_IN_CUR_PIC_CHROMA_U                                          (0x00000740)
+#define NVC7B7_SET_IN_CUR_PIC_CHROMA_U_OFFSET                                   31:0
+#define NVC7B7_SET_IN_CUR_PIC_CHROMA_V                                          (0x00000744)
+#define NVC7B7_SET_IN_CUR_PIC_CHROMA_V_OFFSET                                   31:0
+#define NVC7B7_SET_IN_QP_MAP                                                    (0x00000748)
+#define NVC7B7_SET_IN_QP_MAP_OFFSET                                             31:0
+#define NVC7B7_SET_OUT_REF_PIC_CHROMA                                           (0x0000074C)
+#define NVC7B7_SET_OUT_REF_PIC_CHROMA_OFFSET                                    31:0
+#define NVC7B7_SET_IN_PARTITION_BUF                                             (0x00000750)
+#define NVC7B7_SET_IN_PARTITION_BUF_OFFSET                                      31:0
+#define NVC7B7_SET_IN_CUR_PIC_TASK_STATUS                                       (0x00000758)
+#define NVC7B7_SET_IN_CUR_PIC_TASK_STATUS_OFFSET                                31:0
+#define NVC7B7_SET_IN_REF_PIC_TASK_STATUS                                       (0x0000075C)
+#define NVC7B7_SET_IN_REF_PIC_TASK_STATUS_OFFSET                                31:0
+#define NVC7B7_SET_OUT_TASK_STATUS                                              (0x00000760)
+#define NVC7B7_SET_OUT_TASK_STATUS_OFFSET                                       31:0
+#define NVC7B7_SET_IN_MV_HINTS_TASK_STATUS                                      (0x00000764)
+#define NVC7B7_SET_IN_MV_HINTS_TASK_STATUS_OFFSET                               31:0
+#define NVC7B7_SET_OUT_SCALE_REF_PIC_LUMA                                       (0x00000768)
+#define NVC7B7_SET_OUT_SCALE_REF_PIC_LUMA_OFFSET                                31:0
+#define NVC7B7_SET_OUT_SCALE_REF_PIC_CHROMA                                     (0x0000076C)
+#define NVC7B7_SET_OUT_SCALE_REF_PIC_CHROMA_OFFSET                              31:0
+#define NVC7B7_SET_IO_OFS_ERROR_PROPAGATION                                     (0x00000770)
+#define NVC7B7_SET_IO_OFS_ERROR_PROPAGATION_OFFSET                              31:0
+#define NVC7B7_PM_TRIGGER_END                                                   (0x00001114)
+#define NVC7B7_PM_TRIGGER_END_V                                                 31:0
+
+#define NVC7B7_ERROR_NONE                                                       (0x00000000)
+#define NVC7B7_OS_ERROR_EXECUTE_INSUFFICIENT_DATA                               (0x00000001)
+#define NVC7B7_OS_ERROR_SEMAPHORE_INSUFFICIENT_DATA                             (0x00000002)
+#define NVC7B7_OS_ERROR_INVALID_METHOD                                          (0x00000003)
+#define NVC7B7_OS_ERROR_INVALID_DMA_PAGE                                        (0x00000004)
+#define NVC7B7_OS_ERROR_UNHANDLED_INTERRUPT                                     (0x00000005)
+#define NVC7B7_OS_ERROR_EXCEPTION                                               (0x00000006)
+#define NVC7B7_OS_ERROR_INVALID_CTXSW_REQUEST                                   (0x00000007)
+#define NVC7B7_OS_ERROR_APPLICATION                                             (0x00000008)
+#define NVC7B7_OS_INTERRUPT_EXECUTE_AWAKEN                                      (0x00000100)
+#define NVC7B7_OS_INTERRUPT_BACKEND_SEMAPHORE_AWAKEN                            (0x00000200)
+#define NVC7B7_OS_INTERRUPT_CTX_ERROR_FBIF                                      (0x00000300)
+#define NVC7B7_OS_INTERRUPT_LIMIT_VIOLATION                                     (0x00000400)
+#define NVC7B7_OS_INTERRUPT_LIMIT_AND_FBIF_CTX_ERROR                            (0x00000500)
+#define NVC7B7_OS_INTERRUPT_HALT_ENGINE                                         (0x00000600)
+#define NVC7B7_OS_INTERRUPT_TRAP_NONSTALL                                       (0x00000700)
+#define NVC7B7_OS_INTERRUPT_CTX_SAVE_DONE                                       (0x00000800)
+#define NVC7B7_OS_INTERRUPT_CTX_RESTORE_DONE                                    (0x00000900)
+#define NVC7B7_ENC_ERROR_H264_APPTIMER_EXPIRED                                  (0x30000001)
+#define NVC7B7_ENC_ERROR_H264_INVALID_INPUT                                     (0x30000002)
+#define NVC7B7_ENC_ERROR_H264_HWERR_INTERRUPT                                   (0x30000003)
+#define NVC7B7_ENC_ERROR_H264_BAD_MAGIC                                         (0x30000004)
+#endif // (!defined(NVRM_UNPUBLISHED_OPAQUE) || NVRM_UNPUBLISHED_OPAQUE == 1)
+
+#ifdef __cplusplus
+};     /* extern "C" */
+#endif
+#endif // clc7b7_h
+
diff --git a/src/nouveau/headers/nvidia/classes/clc9b0.h b/src/nouveau/headers/nvidia/classes/clc9b0.h
new file mode 100644
index 0000000000000000000000000000000000000000..45bd5205ee30d2b7f2976497a9c6556aec4ffcbe
--- /dev/null
+++ b/src/nouveau/headers/nvidia/classes/clc9b0.h
@@ -0,0 +1,603 @@
+/*
+ * SPDX-FileCopyrightText: Copyright (c) 1993-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+ * SPDX-License-Identifier: MIT
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef clc9b0_h_
+#define clc9b0_h_
+
+#include "nvtypes.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define NVC9B0_VIDEO_DECODER                                                       (0x0000C9B0)
+
+#define NVC9B0_NOP                                                              (0x00000100)
+#define NVC9B0_NOP_PARAMETER                                                    31:0
+#define NVC9B0_PM_TRIGGER                                                       (0x00000140)
+#define NVC9B0_PM_TRIGGER_V                                                     31:0
+#define NVC9B0_SET_APPLICATION_ID                                               (0x00000200)
+#define NVC9B0_SET_APPLICATION_ID_ID                                            31:0
+#define NVC9B0_SET_APPLICATION_ID_ID_MPEG12                                     (0x00000001)
+#define NVC9B0_SET_APPLICATION_ID_ID_VC1                                        (0x00000002)
+#define NVC9B0_SET_APPLICATION_ID_ID_H264                                       (0x00000003)
+#define NVC9B0_SET_APPLICATION_ID_ID_MPEG4                                      (0x00000004)
+#define NVC9B0_SET_APPLICATION_ID_ID_VP8                                        (0x00000005)
+#define NVC9B0_SET_APPLICATION_ID_ID_CTR64                                      (0x00000006)
+#define NVC9B0_SET_APPLICATION_ID_ID_HEVC                                       (0x00000007)
+#define NVC9B0_SET_APPLICATION_ID_ID_NEW_H264                                   (0x00000008)
+#define NVC9B0_SET_APPLICATION_ID_ID_VP9                                        (0x00000009)
+#define NVC9B0_SET_APPLICATION_ID_ID_PASS1                                      (0x0000000A)
+#define NVC9B0_SET_APPLICATION_ID_ID_HEVC_PARSER                                (0x0000000C)
+#define NVC9B0_SET_APPLICATION_ID_ID_UCODE_TEST                                 (0x0000000D)
+#define NVC9B0_SET_APPLICATION_ID_ID_HWDRM_PR_DECRYPTAUDIO                      (0x0000000E)
+#define NVC9B0_SET_APPLICATION_ID_ID_HWDRM_PR_DECRYPTAUDIOMULTIPLE              (0x0000000F)
+#define NVC9B0_SET_APPLICATION_ID_ID_HWDRM_PR_PREPROCESSENCRYPTEDDATA           (0x00000010)
+#define NVC9B0_SET_APPLICATION_ID_ID_VP9_WITH_PARSER                            (0x00000011)
+#define NVC9B0_SET_APPLICATION_ID_ID_AVD                                        (0x00000012)
+#define NVC9B0_SET_APPLICATION_ID_ID_HW_DRM_PR4_DECRYPTCONTENTMULTIPLE          (0x00000013)
+#define NVC9B0_SET_APPLICATION_ID_ID_DHKE                                       (0x00000020)
+#define NVC9B0_SET_WATCHDOG_TIMER                                               (0x00000204)
+#define NVC9B0_SET_WATCHDOG_TIMER_TIMER                                         31:0
+#define NVC9B0_SEMAPHORE_A                                                      (0x00000240)
+#define NVC9B0_SEMAPHORE_A_UPPER                                                7:0
+#define NVC9B0_SEMAPHORE_B                                                      (0x00000244)
+#define NVC9B0_SEMAPHORE_B_LOWER                                                31:0
+#define NVC9B0_SEMAPHORE_C                                                      (0x00000248)
+#define NVC9B0_SEMAPHORE_C_PAYLOAD                                              31:0
+#define NVC9B0_CTX_SAVE_AREA                                                    (0x0000024C)
+#define NVC9B0_CTX_SAVE_AREA_OFFSET                                             31:0
+#define NVC9B0_CTX_SWITCH                                                       (0x00000250)
+#define NVC9B0_CTX_SWITCH_OP                                                    1:0
+#define NVC9B0_CTX_SWITCH_OP_CTX_UPDATE                                         (0x00000000)
+#define NVC9B0_CTX_SWITCH_OP_CTX_SAVE                                           (0x00000001)
+#define NVC9B0_CTX_SWITCH_OP_CTX_RESTORE                                        (0x00000002)
+#define NVC9B0_CTX_SWITCH_OP_CTX_FORCERESTORE                                   (0x00000003)
+#define NVC9B0_CTX_SWITCH_CTXID_VALID                                           2:2
+#define NVC9B0_CTX_SWITCH_CTXID_VALID_FALSE                                     (0x00000000)
+#define NVC9B0_CTX_SWITCH_CTXID_VALID_TRUE                                      (0x00000001)
+#define NVC9B0_CTX_SWITCH_RESERVED0                                             7:3
+#define NVC9B0_CTX_SWITCH_CTX_ID                                                23:8
+#define NVC9B0_CTX_SWITCH_RESERVED1                                             31:24
+#define NVC9B0_SET_SEMAPHORE_PAYLOAD_LOWER                                      (0x00000254)
+#define NVC9B0_SET_SEMAPHORE_PAYLOAD_LOWER_PAYLOAD_LOWER                        31:0
+#define NVC9B0_SET_SEMAPHORE_PAYLOAD_UPPER                                      (0x00000258)
+#define NVC9B0_SET_SEMAPHORE_PAYLOAD_UPPER_PAYLOAD_UPPER                        31:0
+#define NVC9B0_SET_MONITORED_FENCE_SIGNAL_ADDRESS_BASE_A                        (0x0000025C)
+#define NVC9B0_SET_MONITORED_FENCE_SIGNAL_ADDRESS_BASE_A_LOWER                  31:0
+#define NVC9B0_SET_MONITORED_FENCE_SIGNAL_ADDRESS_BASE_B                        (0x00000260)
+#define NVC9B0_SET_MONITORED_FENCE_SIGNAL_ADDRESS_BASE_B_UPPER                  31:0
+#define NVC9B0_EXECUTE                                                          (0x00000300)
+#define NVC9B0_EXECUTE_NOTIFY                                                   0:0
+#define NVC9B0_EXECUTE_NOTIFY_DISABLE                                           (0x00000000)
+#define NVC9B0_EXECUTE_NOTIFY_ENABLE                                            (0x00000001)
+#define NVC9B0_EXECUTE_NOTIFY_ON                                                1:1
+#define NVC9B0_EXECUTE_NOTIFY_ON_END                                            (0x00000000)
+#define NVC9B0_EXECUTE_NOTIFY_ON_BEGIN                                          (0x00000001)
+#define NVC9B0_EXECUTE_PREDICATION                                              2:2
+#define NVC9B0_EXECUTE_PREDICATION_DISABLE                                      (0x00000000)
+#define NVC9B0_EXECUTE_PREDICATION_ENABLE                                       (0x00000001)
+#define NVC9B0_EXECUTE_PREDICATION_OP                                           3:3
+#define NVC9B0_EXECUTE_PREDICATION_OP_EQUAL_ZERO                                (0x00000000)
+#define NVC9B0_EXECUTE_PREDICATION_OP_NOT_EQUAL_ZERO                            (0x00000001)
+#define NVC9B0_EXECUTE_AWAKEN                                                   8:8
+#define NVC9B0_EXECUTE_AWAKEN_DISABLE                                           (0x00000000)
+#define NVC9B0_EXECUTE_AWAKEN_ENABLE                                            (0x00000001)
+#define NVC9B0_SEMAPHORE_D                                                      (0x00000304)
+#define NVC9B0_SEMAPHORE_D_STRUCTURE_SIZE                                       1:0
+#define NVC9B0_SEMAPHORE_D_STRUCTURE_SIZE_ONE                                   (0x00000000)
+#define NVC9B0_SEMAPHORE_D_STRUCTURE_SIZE_FOUR                                  (0x00000001)
+#define NVC9B0_SEMAPHORE_D_STRUCTURE_SIZE_TWO                                   (0x00000002)
+#define NVC9B0_SEMAPHORE_D_AWAKEN_ENABLE                                        8:8
+#define NVC9B0_SEMAPHORE_D_AWAKEN_ENABLE_FALSE                                  (0x00000000)
+#define NVC9B0_SEMAPHORE_D_AWAKEN_ENABLE_TRUE                                   (0x00000001)
+#define NVC9B0_SEMAPHORE_D_OPERATION                                            17:16
+#define NVC9B0_SEMAPHORE_D_OPERATION_RELEASE                                    (0x00000000)
+#define NVC9B0_SEMAPHORE_D_OPERATION_RESERVED_0                                 (0x00000001)
+#define NVC9B0_SEMAPHORE_D_OPERATION_RESERVED_1                                 (0x00000002)
+#define NVC9B0_SEMAPHORE_D_OPERATION_TRAP                                       (0x00000003)
+#define NVC9B0_SEMAPHORE_D_FLUSH_DISABLE                                        21:21
+#define NVC9B0_SEMAPHORE_D_FLUSH_DISABLE_FALSE                                  (0x00000000)
+#define NVC9B0_SEMAPHORE_D_FLUSH_DISABLE_TRUE                                   (0x00000001)
+#define NVC9B0_SEMAPHORE_D_TRAP_TYPE                                            23:22
+#define NVC9B0_SEMAPHORE_D_TRAP_TYPE_UNCONDITIONAL                              (0x00000000)
+#define NVC9B0_SEMAPHORE_D_TRAP_TYPE_CONDITIONAL                                (0x00000001)
+#define NVC9B0_SEMAPHORE_D_TRAP_TYPE_CONDITIONAL_EXT                            (0x00000002)
+#define NVC9B0_SEMAPHORE_D_PAYLOAD_SIZE                                         24:24
+#define NVC9B0_SEMAPHORE_D_PAYLOAD_SIZE_32BIT                                   (0x00000000)
+#define NVC9B0_SEMAPHORE_D_PAYLOAD_SIZE_64BIT                                   (0x00000001)
+#define NVC9B0_SET_PREDICATION_OFFSET_UPPER                                     (0x00000308)
+#define NVC9B0_SET_PREDICATION_OFFSET_UPPER_OFFSET                              7:0
+#define NVC9B0_SET_PREDICATION_OFFSET_LOWER                                     (0x0000030C)
+#define NVC9B0_SET_PREDICATION_OFFSET_LOWER_OFFSET                              31:0
+#define NVC9B0_SET_AUXILIARY_DATA_BUFFER                                        (0x00000310)
+#define NVC9B0_SET_AUXILIARY_DATA_BUFFER_OFFSET                                 31:0
+#define NVC9B0_SET_CONTROL_PARAMS                                               (0x00000400)
+#define NVC9B0_SET_CONTROL_PARAMS_CODEC_TYPE                                    3:0
+#define NVC9B0_SET_CONTROL_PARAMS_CODEC_TYPE_MPEG1                              (0x00000000)
+#define NVC9B0_SET_CONTROL_PARAMS_CODEC_TYPE_MPEG2                              (0x00000001)
+#define NVC9B0_SET_CONTROL_PARAMS_CODEC_TYPE_VC1                                (0x00000002)
+#define NVC9B0_SET_CONTROL_PARAMS_CODEC_TYPE_H264                               (0x00000003)
+#define NVC9B0_SET_CONTROL_PARAMS_CODEC_TYPE_MPEG4                              (0x00000004)
+// #define NVC9B0_SET_CONTROL_PARAMS_CODEC_TYPE_DIVX3                              (0x00000004)
+#define NVC9B0_SET_CONTROL_PARAMS_CODEC_TYPE_VP8                                (0x00000005)
+#define NVC9B0_SET_CONTROL_PARAMS_CODEC_TYPE_HEVC                               (0x00000007)
+#define NVC9B0_SET_CONTROL_PARAMS_CODEC_TYPE_VP9                                (0x00000009)
+#define NVC9B0_SET_CONTROL_PARAMS_CODEC_TYPE_AV1                                (0x0000000A)
+#define NVC9B0_SET_CONTROL_PARAMS_GPTIMER_ON                                    4:4
+#define NVC9B0_SET_CONTROL_PARAMS_RET_ERROR                                     5:5
+#define NVC9B0_SET_CONTROL_PARAMS_ERR_CONCEAL_ON                                6:6
+#define NVC9B0_SET_CONTROL_PARAMS_ERROR_FRM_IDX                                 12:7
+#define NVC9B0_SET_CONTROL_PARAMS_MBTIMER_ON                                    13:13
+#define NVC9B0_SET_CONTROL_PARAMS_EC_INTRA_FRAME_USING_PSLC                     14:14
+#define NVC9B0_SET_CONTROL_PARAMS_IGNORE_SOME_FIELDS_CRC_CHECK                  15:15
+#define NVC9B0_SET_CONTROL_PARAMS_EVENT_TRACE_LOGGING_ON                        16:16
+#define NVC9B0_SET_CONTROL_PARAMS_ALL_INTRA_FRAME                               17:17
+#define NVC9B0_SET_CONTROL_PARAMS_TESTRUN_ENV                                   19:18
+#define NVC9B0_SET_CONTROL_PARAMS_TESTRUN_ENV_TRACE3D_RUN                       (0x00000000)
+#define NVC9B0_SET_CONTROL_PARAMS_TESTRUN_ENV_PROD_RUN                          (0x00000001)
+#define NVC9B0_SET_CONTROL_PARAMS_HINT_DUMP_EN                                  20:20
+#define NVC9B0_SET_CONTROL_PARAMS_RESERVED                                      25:21
+#define NVC9B0_SET_CONTROL_PARAMS_NVDECSIM_SKIP_SCP                             26:26
+#define NVC9B0_SET_CONTROL_PARAMS_ENABLE_ENCRYPT                                27:27
+#define NVC9B0_SET_CONTROL_PARAMS_ENCRYPTMODE                                   31:28
+#define NVC9B0_SET_DRV_PIC_SETUP_OFFSET                                         (0x00000404)
+#define NVC9B0_SET_DRV_PIC_SETUP_OFFSET_OFFSET                                  31:0
+#define NVC9B0_SET_IN_BUF_BASE_OFFSET                                           (0x00000408)
+#define NVC9B0_SET_IN_BUF_BASE_OFFSET_OFFSET                                    31:0
+#define NVC9B0_SET_PICTURE_INDEX                                                (0x0000040C)
+#define NVC9B0_SET_PICTURE_INDEX_INDEX                                          31:0
+#define NVC9B0_SET_SLICE_OFFSETS_BUF_OFFSET                                     (0x00000410)
+#define NVC9B0_SET_SLICE_OFFSETS_BUF_OFFSET_OFFSET                              31:0
+#define NVC9B0_SET_COLOC_DATA_OFFSET                                            (0x00000414)
+#define NVC9B0_SET_COLOC_DATA_OFFSET_OFFSET                                     31:0
+#define NVC9B0_SET_HISTORY_OFFSET                                               (0x00000418)
+#define NVC9B0_SET_HISTORY_OFFSET_OFFSET                                        31:0
+#define NVC9B0_SET_DISPLAY_BUF_SIZE                                             (0x0000041C)
+#define NVC9B0_SET_DISPLAY_BUF_SIZE_SIZE                                        31:0
+#define NVC9B0_SET_HISTOGRAM_OFFSET                                             (0x00000420)
+#define NVC9B0_SET_HISTOGRAM_OFFSET_OFFSET                                      31:0
+#define NVC9B0_SET_NVDEC_STATUS_OFFSET                                          (0x00000424)
+#define NVC9B0_SET_NVDEC_STATUS_OFFSET_OFFSET                                   31:0
+#define NVC9B0_SET_DISPLAY_BUF_LUMA_OFFSET                                      (0x00000428)
+#define NVC9B0_SET_DISPLAY_BUF_LUMA_OFFSET_OFFSET                               31:0
+#define NVC9B0_SET_DISPLAY_BUF_CHROMA_OFFSET                                    (0x0000042C)
+#define NVC9B0_SET_DISPLAY_BUF_CHROMA_OFFSET_OFFSET                             31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET0                                         (0x00000430)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET0_OFFSET                                  31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET1                                         (0x00000434)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET1_OFFSET                                  31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET2                                         (0x00000438)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET2_OFFSET                                  31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET3                                         (0x0000043C)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET3_OFFSET                                  31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET4                                         (0x00000440)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET4_OFFSET                                  31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET5                                         (0x00000444)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET5_OFFSET                                  31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET6                                         (0x00000448)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET6_OFFSET                                  31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET7                                         (0x0000044C)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET7_OFFSET                                  31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET8                                         (0x00000450)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET8_OFFSET                                  31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET9                                         (0x00000454)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET9_OFFSET                                  31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET10                                        (0x00000458)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET10_OFFSET                                 31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET11                                        (0x0000045C)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET11_OFFSET                                 31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET12                                        (0x00000460)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET12_OFFSET                                 31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET13                                        (0x00000464)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET13_OFFSET                                 31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET14                                        (0x00000468)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET14_OFFSET                                 31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET15                                        (0x0000046C)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET15_OFFSET                                 31:0
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET16                                        (0x00000470)
+#define NVC9B0_SET_PICTURE_LUMA_OFFSET16_OFFSET                                 31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET0                                       (0x00000474)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET0_OFFSET                                31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET1                                       (0x00000478)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET1_OFFSET                                31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET2                                       (0x0000047C)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET2_OFFSET                                31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET3                                       (0x00000480)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET3_OFFSET                                31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET4                                       (0x00000484)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET4_OFFSET                                31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET5                                       (0x00000488)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET5_OFFSET                                31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET6                                       (0x0000048C)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET6_OFFSET                                31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET7                                       (0x00000490)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET7_OFFSET                                31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET8                                       (0x00000494)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET8_OFFSET                                31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET9                                       (0x00000498)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET9_OFFSET                                31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET10                                      (0x0000049C)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET10_OFFSET                               31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET11                                      (0x000004A0)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET11_OFFSET                               31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET12                                      (0x000004A4)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET12_OFFSET                               31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET13                                      (0x000004A8)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET13_OFFSET                               31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET14                                      (0x000004AC)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET14_OFFSET                               31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET15                                      (0x000004B0)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET15_OFFSET                               31:0
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET16                                      (0x000004B4)
+#define NVC9B0_SET_PICTURE_CHROMA_OFFSET16_OFFSET                               31:0
+#define NVC9B0_SET_PIC_SCRATCH_BUF_OFFSET                                       (0x000004B8)
+#define NVC9B0_SET_PIC_SCRATCH_BUF_OFFSET_OFFSET                                31:0
+#define NVC9B0_SET_EXTERNAL_MVBUFFER_OFFSET                                     (0x000004BC)
+#define NVC9B0_SET_EXTERNAL_MVBUFFER_OFFSET_OFFSET                              31:0
+#define NVC9B0_SET_SUB_SAMPLE_MAP_OFFSET                                        (0x000004C0)
+#define NVC9B0_SET_SUB_SAMPLE_MAP_OFFSET_OFFSET                                 31:0
+#define NVC9B0_SET_SUB_SAMPLE_MAP_IV_OFFSET                                     (0x000004C4)
+#define NVC9B0_SET_SUB_SAMPLE_MAP_IV_OFFSET_OFFSET                              31:0
+#define NVC9B0_SET_INTRA_TOP_BUF_OFFSET                                         (0x000004C8)
+#define NVC9B0_SET_INTRA_TOP_BUF_OFFSET_OFFSET                                  31:0
+#define NVC9B0_SET_TILE_SIZE_BUF_OFFSET                                         (0x000004CC)
+#define NVC9B0_SET_TILE_SIZE_BUF_OFFSET_OFFSET                                  31:0
+#define NVC9B0_SET_FILTER_BUFFER_OFFSET                                         (0x000004D0)
+#define NVC9B0_SET_FILTER_BUFFER_OFFSET_OFFSET                                  31:0
+#define NVC9B0_SET_CRC_STRUCT_OFFSET                                            (0x000004D4)
+#define NVC9B0_SET_CRC_STRUCT_OFFSET_OFFSET                                     31:0
+#define NVC9B0_SET_PR_SSM_CONTENT_INFO_BUF_OFFSET                               (0x000004D8)
+#define NVC9B0_SET_PR_SSM_CONTENT_INFO_BUF_OFFSET_OFFSET                        31:0
+#define NVC9B0_H264_SET_MBHIST_BUF_OFFSET                                       (0x00000500)
+#define NVC9B0_H264_SET_MBHIST_BUF_OFFSET_OFFSET                                31:0
+#define NVC9B0_VP8_SET_PROB_DATA_OFFSET                                         (0x00000540)
+#define NVC9B0_VP8_SET_PROB_DATA_OFFSET_OFFSET                                  31:0
+#define NVC9B0_VP8_SET_HEADER_PARTITION_BUF_BASE_OFFSET                         (0x00000544)
+#define NVC9B0_VP8_SET_HEADER_PARTITION_BUF_BASE_OFFSET_OFFSET                  31:0
+#define NVC9B0_HEVC_SET_SCALING_LIST_OFFSET                                     (0x00000580)
+#define NVC9B0_HEVC_SET_SCALING_LIST_OFFSET_OFFSET                              31:0
+#define NVC9B0_HEVC_SET_TILE_SIZES_OFFSET                                       (0x00000584)
+#define NVC9B0_HEVC_SET_TILE_SIZES_OFFSET_OFFSET                                31:0
+#define NVC9B0_HEVC_SET_FILTER_BUFFER_OFFSET                                    (0x00000588)
+#define NVC9B0_HEVC_SET_FILTER_BUFFER_OFFSET_OFFSET                             31:0
+#define NVC9B0_HEVC_SET_SAO_BUFFER_OFFSET                                       (0x0000058C)
+#define NVC9B0_HEVC_SET_SAO_BUFFER_OFFSET_OFFSET                                31:0
+#define NVC9B0_HEVC_SET_SLICE_INFO_BUFFER_OFFSET                                (0x00000590)
+#define NVC9B0_HEVC_SET_SLICE_INFO_BUFFER_OFFSET_OFFSET                         31:0
+#define NVC9B0_HEVC_SET_SLICE_GROUP_INDEX                                       (0x00000594)
+#define NVC9B0_HEVC_SET_SLICE_GROUP_INDEX_OFFSET                                31:0
+#define NVC9B0_VP9_SET_PROB_TAB_BUF_OFFSET                                      (0x000005C0)
+#define NVC9B0_VP9_SET_PROB_TAB_BUF_OFFSET_OFFSET                               31:0
+#define NVC9B0_VP9_SET_CTX_COUNTER_BUF_OFFSET                                   (0x000005C4)
+#define NVC9B0_VP9_SET_CTX_COUNTER_BUF_OFFSET_OFFSET                            31:0
+#define NVC9B0_VP9_SET_SEGMENT_READ_BUF_OFFSET                                  (0x000005C8)
+#define NVC9B0_VP9_SET_SEGMENT_READ_BUF_OFFSET_OFFSET                           31:0
+#define NVC9B0_VP9_SET_SEGMENT_WRITE_BUF_OFFSET                                 (0x000005CC)
+#define NVC9B0_VP9_SET_SEGMENT_WRITE_BUF_OFFSET_OFFSET                          31:0
+#define NVC9B0_VP9_SET_TILE_SIZE_BUF_OFFSET                                     (0x000005D0)
+#define NVC9B0_VP9_SET_TILE_SIZE_BUF_OFFSET_OFFSET                              31:0
+#define NVC9B0_VP9_SET_COL_MVWRITE_BUF_OFFSET                                   (0x000005D4)
+#define NVC9B0_VP9_SET_COL_MVWRITE_BUF_OFFSET_OFFSET                            31:0
+#define NVC9B0_VP9_SET_COL_MVREAD_BUF_OFFSET                                    (0x000005D8)
+#define NVC9B0_VP9_SET_COL_MVREAD_BUF_OFFSET_OFFSET                             31:0
+#define NVC9B0_VP9_SET_FILTER_BUFFER_OFFSET                                     (0x000005DC)
+#define NVC9B0_VP9_SET_FILTER_BUFFER_OFFSET_OFFSET                              31:0
+#define NVC9B0_VP9_PARSER_SET_PIC_SETUP_OFFSET                                  (0x000005E0)
+#define NVC9B0_VP9_PARSER_SET_PIC_SETUP_OFFSET_OFFSET                           31:0
+#define NVC9B0_VP9_PARSER_SET_PREV_PIC_SETUP_OFFSET                             (0x000005E4)
+#define NVC9B0_VP9_PARSER_SET_PREV_PIC_SETUP_OFFSET_OFFSET                      31:0
+#define NVC9B0_VP9_PARSER_SET_PROB_TAB_BUF_OFFSET                               (0x000005E8)
+#define NVC9B0_VP9_PARSER_SET_PROB_TAB_BUF_OFFSET_OFFSET                        31:0
+#define NVC9B0_VP9_SET_HINT_DUMP_BUF_OFFSET                                     (0x000005EC)
+#define NVC9B0_VP9_SET_HINT_DUMP_BUF_OFFSET_OFFSET                              31:0
+#define NVC9B0_PASS1_SET_CLEAR_HEADER_OFFSET                                    (0x00000600)
+#define NVC9B0_PASS1_SET_CLEAR_HEADER_OFFSET_OFFSET                             31:0
+#define NVC9B0_PASS1_SET_RE_ENCRYPT_OFFSET                                      (0x00000604)
+#define NVC9B0_PASS1_SET_RE_ENCRYPT_OFFSET_OFFSET                               31:0
+#define NVC9B0_PASS1_SET_VP8_TOKEN_OFFSET                                       (0x00000608)
+#define NVC9B0_PASS1_SET_VP8_TOKEN_OFFSET_OFFSET                                31:0
+#define NVC9B0_PASS1_SET_INPUT_DATA_OFFSET                                      (0x0000060C)
+#define NVC9B0_PASS1_SET_INPUT_DATA_OFFSET_OFFSET                               31:0
+#define NVC9B0_PASS1_SET_OUTPUT_DATA_SIZE_OFFSET                                (0x00000610)
+#define NVC9B0_PASS1_SET_OUTPUT_DATA_SIZE_OFFSET_OFFSET                         31:0
+#define NVC9B0_AV1_SET_PROB_TAB_READ_BUF_OFFSET                                 (0x00000640)
+#define NVC9B0_AV1_SET_PROB_TAB_READ_BUF_OFFSET_OFFSET                          31:0
+#define NVC9B0_AV1_SET_PROB_TAB_WRITE_BUF_OFFSET                                (0x00000644)
+#define NVC9B0_AV1_SET_PROB_TAB_WRITE_BUF_OFFSET_OFFSET                         31:0
+#define NVC9B0_AV1_SET_SEGMENT_READ_BUF_OFFSET                                  (0x00000648)
+#define NVC9B0_AV1_SET_SEGMENT_READ_BUF_OFFSET_OFFSET                           31:0
+#define NVC9B0_AV1_SET_SEGMENT_WRITE_BUF_OFFSET                                 (0x0000064C)
+#define NVC9B0_AV1_SET_SEGMENT_WRITE_BUF_OFFSET_OFFSET                          31:0
+#define NVC9B0_AV1_SET_COL_MV0_READ_BUF_OFFSET                                  (0x00000650)
+#define NVC9B0_AV1_SET_COL_MV0_READ_BUF_OFFSET_OFFSET                           31:0
+#define NVC9B0_AV1_SET_COL_MV1_READ_BUF_OFFSET                                  (0x00000654)
+#define NVC9B0_AV1_SET_COL_MV1_READ_BUF_OFFSET_OFFSET                           31:0
+#define NVC9B0_AV1_SET_COL_MV2_READ_BUF_OFFSET                                  (0x00000658)
+#define NVC9B0_AV1_SET_COL_MV2_READ_BUF_OFFSET_OFFSET                           31:0
+#define NVC9B0_AV1_SET_COL_MVWRITE_BUF_OFFSET                                   (0x0000065C)
+#define NVC9B0_AV1_SET_COL_MVWRITE_BUF_OFFSET_OFFSET                            31:0
+#define NVC9B0_AV1_SET_GLOBAL_MODEL_BUF_OFFSET                                  (0x00000660)
+#define NVC9B0_AV1_SET_GLOBAL_MODEL_BUF_OFFSET_OFFSET                           31:0
+#define NVC9B0_AV1_SET_FILM_GRAIN_BUF_OFFSET                                    (0x00000664)
+#define NVC9B0_AV1_SET_FILM_GRAIN_BUF_OFFSET_OFFSET                             31:0
+#define NVC9B0_AV1_SET_TILE_STREAM_INFO_BUF_OFFSET                              (0x00000668)
+#define NVC9B0_AV1_SET_TILE_STREAM_INFO_BUF_OFFSET_OFFSET                       31:0
+#define NVC9B0_AV1_SET_SUB_STREAM_ENTRY_BUF_OFFSET                              (0x0000066C)
+#define NVC9B0_AV1_SET_SUB_STREAM_ENTRY_BUF_OFFSET_OFFSET                       31:0
+#define NVC9B0_AV1_SET_HINT_DUMP_BUF_OFFSET                                     (0x00000670)
+#define NVC9B0_AV1_SET_HINT_DUMP_BUF_OFFSET_OFFSET                              31:0
+#define NVC9B0_H264_SET_SCALING_LIST_OFFSET                                     (0x00000680)
+#define NVC9B0_H264_SET_SCALING_LIST_OFFSET_OFFSET                              31:0
+#define NVC9B0_H264_SET_VLDHIST_BUF_OFFSET                                      (0x00000684)
+#define NVC9B0_H264_SET_VLDHIST_BUF_OFFSET_OFFSET                               31:0
+#define NVC9B0_H264_SET_EDOBOFFSET0                                             (0x00000688)
+#define NVC9B0_H264_SET_EDOBOFFSET0_OFFSET                                      31:0
+#define NVC9B0_H264_SET_EDOBOFFSET1                                             (0x0000068C)
+#define NVC9B0_H264_SET_EDOBOFFSET1_OFFSET                                      31:0
+#define NVC9B0_H264_SET_EDOBOFFSET2                                             (0x00000690)
+#define NVC9B0_H264_SET_EDOBOFFSET2_OFFSET                                      31:0
+#define NVC9B0_H264_SET_EDOBOFFSET3                                             (0x00000694)
+#define NVC9B0_H264_SET_EDOBOFFSET3_OFFSET                                      31:0
+#define NVC9B0_SET_CONTENT_INITIAL_VECTOR(b)                                    (0x00000C00 + (b)*0x00000004)
+#define NVC9B0_SET_CONTENT_INITIAL_VECTOR_VALUE                                 31:0
+#define NVC9B0_SET_CTL_COUNT                                                    (0x00000C10)
+#define NVC9B0_SET_CTL_COUNT_VALUE                                              31:0
+#define NVC9B0_SET_UPPER_SRC                                                    (0x00000C14)
+#define NVC9B0_SET_UPPER_SRC_OFFSET                                             7:0
+#define NVC9B0_SET_LOWER_SRC                                                    (0x00000C18)
+#define NVC9B0_SET_LOWER_SRC_OFFSET                                             31:0
+#define NVC9B0_SET_UPPER_DST                                                    (0x00000C1C)
+#define NVC9B0_SET_UPPER_DST_OFFSET                                             7:0
+#define NVC9B0_SET_LOWER_DST                                                    (0x00000C20)
+#define NVC9B0_SET_LOWER_DST_OFFSET                                             31:0
+#define NVC9B0_SET_BLOCK_COUNT                                                  (0x00000C24)
+#define NVC9B0_SET_BLOCK_COUNT_VALUE                                            31:0
+#define NVC9B0_PR_SET_REQUEST_BUF_OFFSET                                        (0x00000D00)
+#define NVC9B0_PR_SET_REQUEST_BUF_OFFSET_OFFSET                                 31:0
+#define NVC9B0_PR_SET_REQUEST_BUF_SIZE                                          (0x00000D04)
+#define NVC9B0_PR_SET_REQUEST_BUF_SIZE_SIZE                                     31:0
+#define NVC9B0_PR_SET_RESPONSE_BUF_OFFSET                                       (0x00000D08)
+#define NVC9B0_PR_SET_RESPONSE_BUF_OFFSET_OFFSET                                31:0
+#define NVC9B0_PR_SET_RESPONSE_BUF_SIZE                                         (0x00000D0C)
+#define NVC9B0_PR_SET_RESPONSE_BUF_SIZE_SIZE                                    31:0
+#define NVC9B0_PR_SET_REQUEST_MESSAGE_BUF_OFFSET                                (0x00000D10)
+#define NVC9B0_PR_SET_REQUEST_MESSAGE_BUF_OFFSET_OFFSET                         31:0
+#define NVC9B0_PR_SET_RESPONSE_MESSAGE_BUF_OFFSET                               (0x00000D14)
+#define NVC9B0_PR_SET_RESPONSE_MESSAGE_BUF_OFFSET_OFFSET                        31:0
+#define NVC9B0_PR_SET_LOCAL_DECRYPT_BUF_OFFSET                                  (0x00000D18)
+#define NVC9B0_PR_SET_LOCAL_DECRYPT_BUF_OFFSET_OFFSET                           31:0
+#define NVC9B0_PR_SET_LOCAL_DECRYPT_BUF_SIZE                                    (0x00000D1C)
+#define NVC9B0_PR_SET_LOCAL_DECRYPT_BUF_SIZE_SIZE                               31:0
+#define NVC9B0_PR_SET_CONTENT_DECRYPT_INFO_BUF_OFFSET                           (0x00000D20)
+#define NVC9B0_PR_SET_CONTENT_DECRYPT_INFO_BUF_OFFSET_OFFSET                    31:0
+#define NVC9B0_PR_SET_REENCRYPTED_BITSTREAM_BUF_OFFSET                          (0x00000D24)
+#define NVC9B0_PR_SET_REENCRYPTED_BITSTREAM_BUF_OFFSET_OFFSET                   31:0
+#define NVC9B0_DH_KE_SET_CHALLENGE_BUF_OFFSET                                   (0x00000E00)
+#define NVC9B0_DH_KE_SET_CHALLENGE_BUF_OFFSET_OFFSET                            31:0
+#define NVC9B0_DH_KE_SET_RESPONSE_BUF_OFFSET                                    (0x00000E04)
+#define NVC9B0_DH_KE_SET_RESPONSE_BUF_OFFSET_OFFSET                             31:0
+#define NVC9B0_SET_SESSION_KEY(b)                                               (0x00000F00 + (b)*0x00000004)
+#define NVC9B0_SET_SESSION_KEY_VALUE                                            31:0
+#define NVC9B0_SET_CONTENT_KEY(b)                                               (0x00000F10 + (b)*0x00000004)
+#define NVC9B0_SET_CONTENT_KEY_VALUE                                            31:0
+#define NVC9B0_PM_TRIGGER_END                                                   (0x00001114)
+#define NVC9B0_PM_TRIGGER_END_V                                                 31:0
+
+#define NVC9B0_ERROR_NONE                                                       (0x00000000)
+#define NVC9B0_OS_ERROR_EXECUTE_INSUFFICIENT_DATA                               (0x00000001)
+#define NVC9B0_OS_ERROR_SEMAPHORE_INSUFFICIENT_DATA                             (0x00000002)
+#define NVC9B0_OS_ERROR_INVALID_METHOD                                          (0x00000003)
+#define NVC9B0_OS_ERROR_INVALID_DMA_PAGE                                        (0x00000004)
+#define NVC9B0_OS_ERROR_UNHANDLED_INTERRUPT                                     (0x00000005)
+#define NVC9B0_OS_ERROR_EXCEPTION                                               (0x00000006)
+#define NVC9B0_OS_ERROR_INVALID_CTXSW_REQUEST                                   (0x00000007)
+#define NVC9B0_OS_ERROR_APPLICATION                                             (0x00000008)
+#define NVC9B0_OS_ERROR_SW_BREAKPT                                              (0x00000009)
+#define NVC9B0_OS_INTERRUPT_EXECUTE_AWAKEN                                      (0x00000100)
+#define NVC9B0_OS_INTERRUPT_BACKEND_SEMAPHORE_AWAKEN                            (0x00000200)
+#define NVC9B0_OS_INTERRUPT_CTX_ERROR_FBIF                                      (0x00000300)
+#define NVC9B0_OS_INTERRUPT_LIMIT_VIOLATION                                     (0x00000400)
+#define NVC9B0_OS_INTERRUPT_LIMIT_AND_FBIF_CTX_ERROR                            (0x00000500)
+#define NVC9B0_OS_INTERRUPT_HALT_ENGINE                                         (0x00000600)
+#define NVC9B0_OS_INTERRUPT_TRAP_NONSTALL                                       (0x00000700)
+#define NVC9B0_H264_VLD_ERR_SEQ_DATA_INCONSISTENT                               (0x00004001)
+#define NVC9B0_H264_VLD_ERR_PIC_DATA_INCONSISTENT                               (0x00004002)
+#define NVC9B0_H264_VLD_ERR_SLC_DATA_BUF_ADDR_OUT_OF_BOUNDS                     (0x00004100)
+#define NVC9B0_H264_VLD_ERR_BITSTREAM_ERROR                                     (0x00004101)
+#define NVC9B0_H264_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                          (0x000041F8)
+#define NVC9B0_H264_VLD_ERR_SLC_HDR_OUT_SIZE_NOT_MULT256                        (0x00004200)
+#define NVC9B0_H264_VLD_ERR_SLC_DATA_OUT_SIZE_NOT_MULT256                       (0x00004201)
+#define NVC9B0_H264_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                        (0x00004203)
+#define NVC9B0_H264_VLD_ERR_CTX_DMA_ID_SLC_HDR_OUT_INVALID                      (0x00004204)
+#define NVC9B0_H264_VLD_ERR_SLC_HDR_OUT_BUF_TOO_SMALL                           (0x00004205)
+#define NVC9B0_H264_VLD_ERR_SLC_HDR_OUT_BUF_ALREADY_VALID                       (0x00004206)
+#define NVC9B0_H264_VLD_ERR_SLC_DATA_OUT_BUF_TOO_SMALL                          (0x00004207)
+#define NVC9B0_H264_VLD_ERR_DATA_BUF_CNT_TOO_SMALL                              (0x00004208)
+#define NVC9B0_H264_VLD_ERR_BITSTREAM_EMPTY                                     (0x00004209)
+#define NVC9B0_H264_VLD_ERR_FRAME_WIDTH_TOO_LARGE                               (0x0000420A)
+#define NVC9B0_H264_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                              (0x0000420B)
+#define NVC9B0_H264_VLD_ERR_HIST_BUF_TOO_SMALL                                  (0x00004300)
+#define NVC9B0_VC1_VLD_ERR_PIC_DATA_BUF_ADDR_OUT_OF_BOUND                       (0x00005100)
+#define NVC9B0_VC1_VLD_ERR_BITSTREAM_ERROR                                      (0x00005101)
+#define NVC9B0_VC1_VLD_ERR_PIC_HDR_OUT_SIZE_NOT_MULT256                         (0x00005200)
+#define NVC9B0_VC1_VLD_ERR_PIC_DATA_OUT_SIZE_NOT_MULT256                        (0x00005201)
+#define NVC9B0_VC1_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                           (0x00005202)
+#define NVC9B0_VC1_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                         (0x00005203)
+#define NVC9B0_VC1_VLD_ERR_CTX_DMA_ID_PIC_HDR_OUT_INVALID                       (0x00005204)
+#define NVC9B0_VC1_VLD_ERR_SLC_HDR_OUT_BUF_TOO_SMALL                            (0x00005205)
+#define NVC9B0_VC1_VLD_ERR_PIC_HDR_OUT_BUF_ALREADY_VALID                        (0x00005206)
+#define NVC9B0_VC1_VLD_ERR_PIC_DATA_OUT_BUF_TOO_SMALL                           (0x00005207)
+#define NVC9B0_VC1_VLD_ERR_DATA_INFO_IN_BUF_TOO_SMALL                           (0x00005208)
+#define NVC9B0_VC1_VLD_ERR_BITSTREAM_EMPTY                                      (0x00005209)
+#define NVC9B0_VC1_VLD_ERR_FRAME_WIDTH_TOO_LARGE                                (0x0000520A)
+#define NVC9B0_VC1_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                               (0x0000520B)
+#define NVC9B0_VC1_VLD_ERR_PIC_DATA_OUT_BUF_FULL_TIME_OUT                       (0x00005300)
+#define NVC9B0_MPEG12_VLD_ERR_SLC_DATA_BUF_ADDR_OUT_OF_BOUNDS                   (0x00006100)
+#define NVC9B0_MPEG12_VLD_ERR_BITSTREAM_ERROR                                   (0x00006101)
+#define NVC9B0_MPEG12_VLD_ERR_SLC_DATA_OUT_SIZE_NOT_MULT256                     (0x00006200)
+#define NVC9B0_MPEG12_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                        (0x00006201)
+#define NVC9B0_MPEG12_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                      (0x00006202)
+#define NVC9B0_MPEG12_VLD_ERR_SLC_DATA_OUT_BUF_TOO_SMALL                        (0x00006203)
+#define NVC9B0_MPEG12_VLD_ERR_DATA_INFO_IN_BUF_TOO_SMALL                        (0x00006204)
+#define NVC9B0_MPEG12_VLD_ERR_BITSTREAM_EMPTY                                   (0x00006205)
+#define NVC9B0_MPEG12_VLD_ERR_INVALID_PIC_STRUCTURE                             (0x00006206)
+#define NVC9B0_MPEG12_VLD_ERR_INVALID_PIC_CODING_TYPE                           (0x00006207)
+#define NVC9B0_MPEG12_VLD_ERR_FRAME_WIDTH_TOO_LARGE                             (0x00006208)
+#define NVC9B0_MPEG12_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                            (0x00006209)
+#define NVC9B0_MPEG12_VLD_ERR_SLC_DATA_OUT_BUF_FULL_TIME_OUT                    (0x00006300)
+#define NVC9B0_CMN_VLD_ERR_PDEC_RETURNED_ERROR                                  (0x00007101)
+#define NVC9B0_CMN_VLD_ERR_EDOB_FLUSH_TIME_OUT                                  (0x00007102)
+#define NVC9B0_CMN_VLD_ERR_EDOB_REWIND_TIME_OUT                                 (0x00007103)
+#define NVC9B0_CMN_VLD_ERR_VLD_WD_TIME_OUT                                      (0x00007104)
+#define NVC9B0_CMN_VLD_ERR_NUM_SLICES_ZERO                                      (0x00007105)
+#define NVC9B0_MPEG4_VLD_ERR_PIC_DATA_BUF_ADDR_OUT_OF_BOUND                     (0x00008100)
+#define NVC9B0_MPEG4_VLD_ERR_BITSTREAM_ERROR                                    (0x00008101)
+#define NVC9B0_MPEG4_VLD_ERR_PIC_HDR_OUT_SIZE_NOT_MULT256                       (0x00008200)
+#define NVC9B0_MPEG4_VLD_ERR_PIC_DATA_OUT_SIZE_NOT_MULT256                      (0x00008201)
+#define NVC9B0_MPEG4_VLD_ERR_CTX_DMA_ID_CTRL_IN_INVALID                         (0x00008202)
+#define NVC9B0_MPEG4_VLD_ERR_CTX_DMA_ID_FLOW_CTRL_INVALID                       (0x00008203)
+#define NVC9B0_MPEG4_VLD_ERR_CTX_DMA_ID_PIC_HDR_OUT_INVALID                     (0x00008204)
+#define NVC9B0_MPEG4_VLD_ERR_SLC_HDR_OUT_BUF_TOO_SMALL                          (0x00008205)
+#define NVC9B0_MPEG4_VLD_ERR_PIC_HDR_OUT_BUF_ALREADY_VALID                      (0x00008206)
+#define NVC9B0_MPEG4_VLD_ERR_PIC_DATA_OUT_BUF_TOO_SMALL                         (0x00008207)
+#define NVC9B0_MPEG4_VLD_ERR_DATA_INFO_IN_BUF_TOO_SMALL                         (0x00008208)
+#define NVC9B0_MPEG4_VLD_ERR_BITSTREAM_EMPTY                                    (0x00008209)
+#define NVC9B0_MPEG4_VLD_ERR_FRAME_WIDTH_TOO_LARGE                              (0x0000820A)
+#define NVC9B0_MPEG4_VLD_ERR_FRAME_HEIGHT_TOO_LARGE                             (0x0000820B)
+#define NVC9B0_MPEG4_VLD_ERR_PIC_DATA_OUT_BUF_FULL_TIME_OUT                     (0x00051E01)
+#define NVC9B0_DEC_ERROR_MPEG12_APPTIMER_EXPIRED                                (0xDEC10001)
+#define NVC9B0_DEC_ERROR_MPEG12_MVTIMER_EXPIRED                                 (0xDEC10002)
+#define NVC9B0_DEC_ERROR_MPEG12_INVALID_TOKEN                                   (0xDEC10003)
+#define NVC9B0_DEC_ERROR_MPEG12_SLICEDATA_MISSING                               (0xDEC10004)
+#define NVC9B0_DEC_ERROR_MPEG12_HWERR_INTERRUPT                                 (0xDEC10005)
+#define NVC9B0_DEC_ERROR_MPEG12_DETECTED_VLD_FAILURE                            (0xDEC10006)
+#define NVC9B0_DEC_ERROR_MPEG12_PICTURE_INIT                                    (0xDEC10100)
+#define NVC9B0_DEC_ERROR_MPEG12_STATEMACHINE_FAILURE                            (0xDEC10101)
+#define NVC9B0_DEC_ERROR_MPEG12_INVALID_CTXID_PIC                               (0xDEC10901)
+#define NVC9B0_DEC_ERROR_MPEG12_INVALID_CTXID_UCODE                             (0xDEC10902)
+#define NVC9B0_DEC_ERROR_MPEG12_INVALID_CTXID_FC                                (0xDEC10903)
+#define NVC9B0_DEC_ERROR_MPEG12_INVALID_CTXID_SLH                               (0xDEC10904)
+#define NVC9B0_DEC_ERROR_MPEG12_INVALID_UCODE_SIZE                              (0xDEC10905)
+#define NVC9B0_DEC_ERROR_MPEG12_INVALID_SLICE_COUNT                             (0xDEC10906)
+#define NVC9B0_DEC_ERROR_VC1_APPTIMER_EXPIRED                                   (0xDEC20001)
+#define NVC9B0_DEC_ERROR_VC1_MVTIMER_EXPIRED                                    (0xDEC20002)
+#define NVC9B0_DEC_ERROR_VC1_INVALID_TOKEN                                      (0xDEC20003)
+#define NVC9B0_DEC_ERROR_VC1_SLICEDATA_MISSING                                  (0xDEC20004)
+#define NVC9B0_DEC_ERROR_VC1_HWERR_INTERRUPT                                    (0xDEC20005)
+#define NVC9B0_DEC_ERROR_VC1_DETECTED_VLD_FAILURE                               (0xDEC20006)
+#define NVC9B0_DEC_ERROR_VC1_TIMEOUT_POLLING_FOR_DATA                           (0xDEC20007)
+#define NVC9B0_DEC_ERROR_VC1_PDEC_PIC_END_UNALIGNED                             (0xDEC20008)
+#define NVC9B0_DEC_ERROR_VC1_WDTIMER_EXPIRED                                    (0xDEC20009)
+#define NVC9B0_DEC_ERROR_VC1_ERRINTSTART                                        (0xDEC20010)
+#define NVC9B0_DEC_ERROR_VC1_IQT_ERRINT                                         (0xDEC20011)
+#define NVC9B0_DEC_ERROR_VC1_MC_ERRINT                                          (0xDEC20012)
+#define NVC9B0_DEC_ERROR_VC1_MC_IQT_ERRINT                                      (0xDEC20013)
+#define NVC9B0_DEC_ERROR_VC1_REC_ERRINT                                         (0xDEC20014)
+#define NVC9B0_DEC_ERROR_VC1_REC_IQT_ERRINT                                     (0xDEC20015)
+#define NVC9B0_DEC_ERROR_VC1_REC_MC_ERRINT                                      (0xDEC20016)
+#define NVC9B0_DEC_ERROR_VC1_REC_MC_IQT_ERRINT                                  (0xDEC20017)
+#define NVC9B0_DEC_ERROR_VC1_DBF_ERRINT                                         (0xDEC20018)
+#define NVC9B0_DEC_ERROR_VC1_DBF_IQT_ERRINT                                     (0xDEC20019)
+#define NVC9B0_DEC_ERROR_VC1_DBF_MC_ERRINT                                      (0xDEC2001A)
+#define NVC9B0_DEC_ERROR_VC1_DBF_MC_IQT_ERRINT                                  (0xDEC2001B)
+#define NVC9B0_DEC_ERROR_VC1_DBF_REC_ERRINT                                     (0xDEC2001C)
+#define NVC9B0_DEC_ERROR_VC1_DBF_REC_IQT_ERRINT                                 (0xDEC2001D)
+#define NVC9B0_DEC_ERROR_VC1_DBF_REC_MC_ERRINT                                  (0xDEC2001E)
+#define NVC9B0_DEC_ERROR_VC1_DBF_REC_MC_IQT_ERRINT                              (0xDEC2001F)
+#define NVC9B0_DEC_ERROR_VC1_PICTURE_INIT                                       (0xDEC20100)
+#define NVC9B0_DEC_ERROR_VC1_STATEMACHINE_FAILURE                               (0xDEC20101)
+#define NVC9B0_DEC_ERROR_VC1_INVALID_CTXID_PIC                                  (0xDEC20901)
+#define NVC9B0_DEC_ERROR_VC1_INVALID_CTXID_UCODE                                (0xDEC20902)
+#define NVC9B0_DEC_ERROR_VC1_INVALID_CTXID_FC                                   (0xDEC20903)
+#define NVC9B0_DEC_ERROR_VC1_INVAILD_CTXID_SLH                                  (0xDEC20904)
+#define NVC9B0_DEC_ERROR_VC1_INVALID_UCODE_SIZE                                 (0xDEC20905)
+#define NVC9B0_DEC_ERROR_VC1_INVALID_SLICE_COUNT                                (0xDEC20906)
+#define NVC9B0_DEC_ERROR_H264_APPTIMER_EXPIRED                                  (0xDEC30001)
+#define NVC9B0_DEC_ERROR_H264_MVTIMER_EXPIRED                                   (0xDEC30002)
+#define NVC9B0_DEC_ERROR_H264_INVALID_TOKEN                                     (0xDEC30003)
+#define NVC9B0_DEC_ERROR_H264_SLICEDATA_MISSING                                 (0xDEC30004)
+#define NVC9B0_DEC_ERROR_H264_HWERR_INTERRUPT                                   (0xDEC30005)
+#define NVC9B0_DEC_ERROR_H264_DETECTED_VLD_FAILURE                              (0xDEC30006)
+#define NVC9B0_DEC_ERROR_H264_ERRINTSTART                                       (0xDEC30010)
+#define NVC9B0_DEC_ERROR_H264_IQT_ERRINT                                        (0xDEC30011)
+#define NVC9B0_DEC_ERROR_H264_MC_ERRINT                                         (0xDEC30012)
+#define NVC9B0_DEC_ERROR_H264_MC_IQT_ERRINT                                     (0xDEC30013)
+#define NVC9B0_DEC_ERROR_H264_REC_ERRINT                                        (0xDEC30014)
+#define NVC9B0_DEC_ERROR_H264_REC_IQT_ERRINT                                    (0xDEC30015)
+#define NVC9B0_DEC_ERROR_H264_REC_MC_ERRINT                                     (0xDEC30016)
+#define NVC9B0_DEC_ERROR_H264_REC_MC_IQT_ERRINT                                 (0xDEC30017)
+#define NVC9B0_DEC_ERROR_H264_DBF_ERRINT                                        (0xDEC30018)
+#define NVC9B0_DEC_ERROR_H264_DBF_IQT_ERRINT                                    (0xDEC30019)
+#define NVC9B0_DEC_ERROR_H264_DBF_MC_ERRINT                                     (0xDEC3001A)
+#define NVC9B0_DEC_ERROR_H264_DBF_MC_IQT_ERRINT                                 (0xDEC3001B)
+#define NVC9B0_DEC_ERROR_H264_DBF_REC_ERRINT                                    (0xDEC3001C)
+#define NVC9B0_DEC_ERROR_H264_DBF_REC_IQT_ERRINT                                (0xDEC3001D)
+#define NVC9B0_DEC_ERROR_H264_DBF_REC_MC_ERRINT                                 (0xDEC3001E)
+#define NVC9B0_DEC_ERROR_H264_DBF_REC_MC_IQT_ERRINT                             (0xDEC3001F)
+#define NVC9B0_DEC_ERROR_H264_PICTURE_INIT                                      (0xDEC30100)
+#define NVC9B0_DEC_ERROR_H264_STATEMACHINE_FAILURE                              (0xDEC30101)
+#define NVC9B0_DEC_ERROR_H264_INVALID_CTXID_PIC                                 (0xDEC30901)
+#define NVC9B0_DEC_ERROR_H264_INVALID_CTXID_UCODE                               (0xDEC30902)
+#define NVC9B0_DEC_ERROR_H264_INVALID_CTXID_FC                                  (0xDEC30903)
+#define NVC9B0_DEC_ERROR_H264_INVALID_CTXID_SLH                                 (0xDEC30904)
+#define NVC9B0_DEC_ERROR_H264_INVALID_UCODE_SIZE                                (0xDEC30905)
+#define NVC9B0_DEC_ERROR_H264_INVALID_SLICE_COUNT                               (0xDEC30906)
+#define NVC9B0_DEC_ERROR_MPEG4_APPTIMER_EXPIRED                                 (0xDEC40001)
+#define NVC9B0_DEC_ERROR_MPEG4_MVTIMER_EXPIRED                                  (0xDEC40002)
+#define NVC9B0_DEC_ERROR_MPEG4_INVALID_TOKEN                                    (0xDEC40003)
+#define NVC9B0_DEC_ERROR_MPEG4_SLICEDATA_MISSING                                (0xDEC40004)
+#define NVC9B0_DEC_ERROR_MPEG4_HWERR_INTERRUPT                                  (0xDEC40005)
+#define NVC9B0_DEC_ERROR_MPEG4_DETECTED_VLD_FAILURE                             (0xDEC40006)
+#define NVC9B0_DEC_ERROR_MPEG4_TIMEOUT_POLLING_FOR_DATA                         (0xDEC40007)
+#define NVC9B0_DEC_ERROR_MPEG4_PDEC_PIC_END_UNALIGNED                           (0xDEC40008)
+#define NVC9B0_DEC_ERROR_MPEG4_WDTIMER_EXPIRED                                  (0xDEC40009)
+#define NVC9B0_DEC_ERROR_MPEG4_ERRINTSTART                                      (0xDEC40010)
+#define NVC9B0_DEC_ERROR_MPEG4_IQT_ERRINT                                       (0xDEC40011)
+#define NVC9B0_DEC_ERROR_MPEG4_MC_ERRINT                                        (0xDEC40012)
+#define NVC9B0_DEC_ERROR_MPEG4_MC_IQT_ERRINT                                    (0xDEC40013)
+#define NVC9B0_DEC_ERROR_MPEG4_REC_ERRINT                                       (0xDEC40014)
+#define NVC9B0_DEC_ERROR_MPEG4_REC_IQT_ERRINT                                   (0xDEC40015)
+#define NVC9B0_DEC_ERROR_MPEG4_REC_MC_ERRINT                                    (0xDEC40016)
+#define NVC9B0_DEC_ERROR_MPEG4_REC_MC_IQT_ERRINT                                (0xDEC40017)
+#define NVC9B0_DEC_ERROR_MPEG4_DBF_ERRINT                                       (0xDEC40018)
+#define NVC9B0_DEC_ERROR_MPEG4_DBF_IQT_ERRINT                                   (0xDEC40019)
+#define NVC9B0_DEC_ERROR_MPEG4_DBF_MC_ERRINT                                    (0xDEC4001A)
+#define NVC9B0_DEC_ERROR_MPEG4_DBF_MC_IQT_ERRINT                                (0xDEC4001B)
+#define NVC9B0_DEC_ERROR_MPEG4_DBF_REC_ERRINT                                   (0xDEC4001C)
+#define NVC9B0_DEC_ERROR_MPEG4_DBF_REC_IQT_ERRINT                               (0xDEC4001D)
+#define NVC9B0_DEC_ERROR_MPEG4_DBF_REC_MC_ERRINT                                (0xDEC4001E)
+#define NVC9B0_DEC_ERROR_MPEG4_DBF_REC_MC_IQT_ERRINT                            (0xDEC4001F)
+#define NVC9B0_DEC_ERROR_MPEG4_PICTURE_INIT                                     (0xDEC40100)
+#define NVC9B0_DEC_ERROR_MPEG4_STATEMACHINE_FAILURE                             (0xDEC40101)
+#define NVC9B0_DEC_ERROR_MPEG4_INVALID_CTXID_PIC                                (0xDEC40901)
+#define NVC9B0_DEC_ERROR_MPEG4_INVALID_CTXID_UCODE                              (0xDEC40902)
+#define NVC9B0_DEC_ERROR_MPEG4_INVALID_CTXID_FC                                 (0xDEC40903)
+#define NVC9B0_DEC_ERROR_MPEG4_INVALID_CTXID_SLH                                (0xDEC40904)
+#define NVC9B0_DEC_ERROR_MPEG4_INVALID_UCODE_SIZE                               (0xDEC40905)
+#define NVC9B0_DEC_ERROR_MPEG4_INVALID_SLICE_COUNT                              (0xDEC40906)
+
+#ifdef __cplusplus
+};     /* extern "C" */
+#endif
+#endif // clc9b0_h
diff --git a/src/nouveau/headers/nvidia/classes/clc9b7.h b/src/nouveau/headers/nvidia/classes/clc9b7.h
new file mode 100644
index 0000000000000000000000000000000000000000..0b0b32d5d76bd7a3c697665ecad42e4be14e1a4f
--- /dev/null
+++ b/src/nouveau/headers/nvidia/classes/clc9b7.h
@@ -0,0 +1,328 @@
+/*
+ * SPDX-FileCopyrightText: Copyright (c) 1993-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+ * SPDX-License-Identifier: MIT
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef clc9b7_h_
+#define clc9b7_h_
+
+#include "nvtypes.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define NVC9B7_VIDEO_ENCODER                                                             (0x0000C9B7)
+
+#define NVC9B7_SET_UCODE_STATE                                                  (0x00000000)
+#define NVC9B7_SET_UCODE_STATE_OFFSET                                           31:0
+#define NVC9B7_NOP                                                              (0x00000100)
+#define NVC9B7_NOP_PARAMETER                                                    31:0
+#define NVC9B7_PM_TRIGGER                                                       (0x00000140)
+#define NVC9B7_PM_TRIGGER_V                                                     31:0
+#define NVC9B7_SET_APPLICATION_ID                                               (0x00000200)
+#define NVC9B7_SET_APPLICATION_ID_ID                                            31:0
+#define NVC9B7_SET_APPLICATION_ID_ID_NVENC_H264                                 (0x00000001)
+#define NVC9B7_SET_APPLICATION_ID_ID_NVENC_VP8                                  (0x00000002)
+#define NVC9B7_SET_APPLICATION_ID_ID_NVENC_H265                                 (0x00000003)
+#define NVC9B7_SET_APPLICATION_ID_ID_NVENC_VP9                                  (0x00000004)
+#define NVC9B7_SET_APPLICATION_ID_ID_NVENC_RC                                   (0x00000005)
+#define NVC9B7_SET_APPLICATION_ID_ID_NVENC_OFS                                  (0x00000006)
+#define NVC9B7_SET_APPLICATION_ID_ID_NVENC_AV1                                  (0x00000007)
+#define NVC9B7_SET_WATCHDOG_TIMER                                               (0x00000204)
+#define NVC9B7_SET_WATCHDOG_TIMER_TIMER                                         31:0
+#define NVC9B7_SEMAPHORE_A                                                      (0x00000240)
+#define NVC9B7_SEMAPHORE_A_UPPER                                                7:0
+#define NVC9B7_SEMAPHORE_B                                                      (0x00000244)
+#define NVC9B7_SEMAPHORE_B_LOWER                                                31:0
+#define NVC9B7_SEMAPHORE_C                                                      (0x00000248)
+#define NVC9B7_SEMAPHORE_C_PAYLOAD                                              31:0
+#define NVC9B7_SET_SEMAPHORE_PAYLOAD_LOWER                                      (0x00000254)
+#define NVC9B7_SET_SEMAPHORE_PAYLOAD_LOWER_PAYLOAD_LOWER                        31:0
+#define NVC9B7_SET_SEMAPHORE_PAYLOAD_UPPER                                      (0x00000258)
+#define NVC9B7_SET_SEMAPHORE_PAYLOAD_UPPER_PAYLOAD_UPPER                        31:0
+#define NVC9B7_EXECUTE                                                          (0x00000300)
+#define NVC9B7_EXECUTE_NOTIFY                                                   0:0
+#define NVC9B7_EXECUTE_NOTIFY_DISABLE                                           (0x00000000)
+#define NVC9B7_EXECUTE_NOTIFY_ENABLE                                            (0x00000001)
+#define NVC9B7_EXECUTE_NOTIFY_ON                                                1:1
+#define NVC9B7_EXECUTE_NOTIFY_ON_END                                            (0x00000000)
+#define NVC9B7_EXECUTE_NOTIFY_ON_BEGIN                                          (0x00000001)
+#define NVC9B7_EXECUTE_PREDICATION                                              2:2
+#define NVC9B7_EXECUTE_PREDICATION_DISABLE                                      (0x00000000)
+#define NVC9B7_EXECUTE_PREDICATION_ENABLE                                       (0x00000001)
+#define NVC9B7_EXECUTE_PREDICATION_OP                                           3:3
+#define NVC9B7_EXECUTE_PREDICATION_OP_EQUAL_ZERO                                (0x00000000)
+#define NVC9B7_EXECUTE_PREDICATION_OP_NOT_EQUAL_ZERO                            (0x00000001)
+#define NVC9B7_EXECUTE_AWAKEN                                                   8:8
+#define NVC9B7_EXECUTE_AWAKEN_DISABLE                                           (0x00000000)
+#define NVC9B7_EXECUTE_AWAKEN_ENABLE                                            (0x00000001)
+#define NVC9B7_SEMAPHORE_D                                                      (0x00000304)
+#define NVC9B7_SEMAPHORE_D_STRUCTURE_SIZE                                       1:0
+#define NVC9B7_SEMAPHORE_D_STRUCTURE_SIZE_ONE                                   (0x00000000)
+#define NVC9B7_SEMAPHORE_D_STRUCTURE_SIZE_FOUR                                  (0x00000001)
+#define NVC9B7_SEMAPHORE_D_STRUCTURE_SIZE_TWO                                   (0x00000002)
+#define NVC9B7_SEMAPHORE_D_AWAKEN_ENABLE                                        8:8
+#define NVC9B7_SEMAPHORE_D_AWAKEN_ENABLE_FALSE                                  (0x00000000)
+#define NVC9B7_SEMAPHORE_D_AWAKEN_ENABLE_TRUE                                   (0x00000001)
+#define NVC9B7_SEMAPHORE_D_OPERATION                                            17:16
+#define NVC9B7_SEMAPHORE_D_OPERATION_RELEASE                                    (0x00000000)
+#define NVC9B7_SEMAPHORE_D_OPERATION_MONITORED_FENCE                            (0x00000001)
+#define NVC9B7_SEMAPHORE_D_OPERATION_MONITORED_FENCE_EXT                        (0x00000002)
+#define NVC9B7_SEMAPHORE_D_OPERATION_TRAP                                       (0x00000003)
+#define NVC9B7_SEMAPHORE_D_FLUSH_DISABLE                                        21:21
+#define NVC9B7_SEMAPHORE_D_FLUSH_DISABLE_FALSE                                  (0x00000000)
+#define NVC9B7_SEMAPHORE_D_FLUSH_DISABLE_TRUE                                   (0x00000001)
+#define NVC9B7_SEMAPHORE_D_CONDITIONAL_TRAP                                     22:22
+#define NVC9B7_SEMAPHORE_D_CONDITIONAL_TRAP_FALSE                               (0x00000000)
+#define NVC9B7_SEMAPHORE_D_CONDITIONAL_TRAP_TRUE                                (0x00000001)
+#define NVC9B7_SEMAPHORE_D_PAYLOAD_SIZE                                         2:2
+#define NVC9B7_SEMAPHORE_D_PAYLOAD_SIZE_32BIT                                   (0x00000000)
+#define NVC9B7_SEMAPHORE_D_PAYLOAD_SIZE_64BIT                                   (0x00000001)
+#define NVC9B7_SET_PREDICATION_OFFSET_UPPER                                     (0x00000308)
+#define NVC9B7_SET_PREDICATION_OFFSET_UPPER_OFFSET                              7:0
+#define NVC9B7_SET_PREDICATION_OFFSET_LOWER                                     (0x0000030C)
+#define NVC9B7_SET_PREDICATION_OFFSET_LOWER_OFFSET                              31:0
+#define NVC9B7_SET_IN_REF_PIC0_LUMA                                             (0x00000400)
+#define NVC9B7_SET_IN_REF_PIC0_LUMA_OFFSET                                      31:0
+#define NVC9B7_SET_IN_REF_PIC1_LUMA                                             (0x00000404)
+#define NVC9B7_SET_IN_REF_PIC1_LUMA_OFFSET                                      31:0
+#define NVC9B7_SET_IN_REF_PIC2_LUMA                                             (0x00000408)
+#define NVC9B7_SET_IN_REF_PIC2_LUMA_OFFSET                                      31:0
+#define NVC9B7_SET_IN_REF_PIC3_LUMA                                             (0x0000040C)
+#define NVC9B7_SET_IN_REF_PIC3_LUMA_OFFSET                                      31:0
+#define NVC9B7_SET_IN_REF_PIC4_LUMA                                             (0x00000410)
+#define NVC9B7_SET_IN_REF_PIC4_LUMA_OFFSET                                      31:0
+#define NVC9B7_SET_IN_REF_PIC5_LUMA                                             (0x00000414)
+#define NVC9B7_SET_IN_REF_PIC5_LUMA_OFFSET                                      31:0
+#define NVC9B7_SET_IN_REF_PIC6_LUMA                                             (0x00000418)
+#define NVC9B7_SET_IN_REF_PIC6_LUMA_OFFSET                                      31:0
+#define NVC9B7_SET_IN_REF_PIC7_LUMA                                             (0x0000041C)
+#define NVC9B7_SET_IN_REF_PIC7_LUMA_OFFSET                                      31:0
+#define NVC9B7_SET_IN_REF_PIC8_LUMA                                             (0x00000420)
+#define NVC9B7_SET_IN_REF_PIC8_LUMA_OFFSET                                      31:0
+#define NVC9B7_SET_IN_REF_PIC9_LUMA                                             (0x00000424)
+#define NVC9B7_SET_IN_REF_PIC9_LUMA_OFFSET                                      31:0
+#define NVC9B7_SET_IN_REF_PIC10_LUMA                                            (0x00000428)
+#define NVC9B7_SET_IN_REF_PIC10_LUMA_OFFSET                                     31:0
+#define NVC9B7_SET_IN_REF_PIC11_LUMA                                            (0x0000042C)
+#define NVC9B7_SET_IN_REF_PIC11_LUMA_OFFSET                                     31:0
+#define NVC9B7_SET_IN_REF_PIC12_LUMA                                            (0x00000430)
+#define NVC9B7_SET_IN_REF_PIC12_LUMA_OFFSET                                     31:0
+#define NVC9B7_SET_IN_REF_PIC13_LUMA                                            (0x00000434)
+#define NVC9B7_SET_IN_REF_PIC13_LUMA_OFFSET                                     31:0
+#define NVC9B7_SET_IN_REF_PIC14_LUMA                                            (0x00000438)
+#define NVC9B7_SET_IN_REF_PIC14_LUMA_OFFSET                                     31:0
+#define NVC9B7_SET_IN_REF_PIC15_LUMA                                            (0x0000043C)
+#define NVC9B7_SET_IN_REF_PIC15_LUMA_OFFSET                                     31:0
+#define NVC9B7_SET_IN_REF_PIC0_CHROMA                                           (0x00000440)
+#define NVC9B7_SET_IN_REF_PIC0_CHROMA_OFFSET                                    31:0
+#define NVC9B7_SET_IN_REF_PIC1_CHROMA                                           (0x00000444)
+#define NVC9B7_SET_IN_REF_PIC1_CHROMA_OFFSET                                    31:0
+#define NVC9B7_SET_IN_REF_PIC2_CHROMA                                           (0x00000448)
+#define NVC9B7_SET_IN_REF_PIC2_CHROMA_OFFSET                                    31:0
+#define NVC9B7_SET_IN_REF_PIC3_CHROMA                                           (0x0000044C)
+#define NVC9B7_SET_IN_REF_PIC3_CHROMA_OFFSET                                    31:0
+#define NVC9B7_SET_IN_REF_PIC4_CHROMA                                           (0x00000450)
+#define NVC9B7_SET_IN_REF_PIC4_CHROMA_OFFSET                                    31:0
+#define NVC9B7_SET_IN_REF_PIC5_CHROMA                                           (0x00000454)
+#define NVC9B7_SET_IN_REF_PIC5_CHROMA_OFFSET                                    31:0
+#define NVC9B7_SET_IN_REF_PIC6_CHROMA                                           (0x00000458)
+#define NVC9B7_SET_IN_REF_PIC6_CHROMA_OFFSET                                    31:0
+#define NVC9B7_SET_IN_REF_PIC7_CHROMA                                           (0x0000045C)
+#define NVC9B7_SET_IN_REF_PIC7_CHROMA_OFFSET                                    31:0
+#define NVC9B7_SET_IN_REF_PIC8_CHROMA                                           (0x00000460)
+#define NVC9B7_SET_IN_REF_PIC8_CHROMA_OFFSET                                    31:0
+#define NVC9B7_SET_IN_REF_PIC9_CHROMA                                           (0x00000464)
+#define NVC9B7_SET_IN_REF_PIC9_CHROMA_OFFSET                                    31:0
+#define NVC9B7_SET_IN_REF_PIC10_CHROMA                                          (0x00000468)
+#define NVC9B7_SET_IN_REF_PIC10_CHROMA_OFFSET                                   31:0
+#define NVC9B7_SET_IN_REF_PIC11_CHROMA                                          (0x0000046C)
+#define NVC9B7_SET_IN_REF_PIC11_CHROMA_OFFSET                                   31:0
+#define NVC9B7_SET_IN_REF_PIC12_CHROMA                                          (0x00000470)
+#define NVC9B7_SET_IN_REF_PIC12_CHROMA_OFFSET                                   31:0
+#define NVC9B7_SET_IN_REF_PIC13_CHROMA                                          (0x00000474)
+#define NVC9B7_SET_IN_REF_PIC13_CHROMA_OFFSET                                   31:0
+#define NVC9B7_SET_IN_REF_PIC14_CHROMA                                          (0x00000478)
+#define NVC9B7_SET_IN_REF_PIC14_CHROMA_OFFSET                                   31:0
+#define NVC9B7_SET_IN_REF_PIC15_CHROMA                                          (0x0000047C)
+#define NVC9B7_SET_IN_REF_PIC15_CHROMA_OFFSET                                   31:0
+#define NVC9B7_SET_IN_AV1_PROBABILITY_DATA                                      (0x00000480)
+#define NVC9B7_SET_IN_AV1_PROBABILITY_DATA_OFFSET                               31:0
+#define NVC9B7_SET_OUT_AV1_PROBABILITY_DATA                                     (0x00000484)
+#define NVC9B7_SET_OUT_AV1_PROBABILITY_DATA_OFFSET                              31:0
+#define NVC9B7_SET_IOENTROPY_ABOVE_CTX_DATA                                     (0x00000488)
+#define NVC9B7_SET_IOENTROPY_ABOVE_CTX_DATA_OFFSET                              31:0
+#define NVC9B7_SET_IOENTROPY_ABOVE_MV_DATA                                      (0x0000048C)
+#define NVC9B7_SET_IOENTROPY_ABOVE_MV_DATA_OFFSET                               31:0
+#define NVC9B7_SET_IODEBLOCK_TOPROW                                             (0x00000490)
+#define NVC9B7_SET_IODEBLOCK_TOPROW_OFFSET                                      31:0
+#define NVC9B7_SET_IODEBLOCK_LEFTCOLUMN                                         (0x00000494)
+#define NVC9B7_SET_IODEBLOCK_LEFTCOLUMN_OFFSET                                  31:0
+#define NVC9B7_SET_IOCDEF_LEFTCOLUMN                                            (0x00000498)
+#define NVC9B7_SET_IOCDEF_LEFTCOLUMN_OFFSET                                     31:0
+#define NVC9B7_SET_IOLR_LEFTCOLUMN                                              (0x0000049C)
+#define NVC9B7_SET_IOLR_LEFTCOLUMN_OFFSET                                       31:0
+#define NVC9B7_SET_IN_SSIMRDO_INPUT_DENORM                                      (0x000004A0)
+#define NVC9B7_SET_IN_SSIMRDO_INPUT_DENORM_OFFSET                               31:0
+#define NVC9B7_SET_IN_SSIMRDO_OUTPUT_DENORM                                     (0x000004A4)
+#define NVC9B7_SET_IN_SSIMRDO_OUTPUT_DENORM_OFFSET                              31:0
+#define NVC9B7_SET_IN_VP9_PROBABILITY_DATA                                      (0x000004A8)
+#define NVC9B7_SET_IN_VP9_PROBABILITY_DATA_OFFSET                               31:0
+#define NVC9B7_SET_IN_VP9_CUR_TEMPORAL_DATA                                     (0x000004AC)
+#define NVC9B7_SET_IN_VP9_CUR_TEMPORAL_DATA_OFFSET                              31:0
+#define NVC9B7_SET_IN_VP9_REF_TEMPORAL_DATA                                     (0x000004B0)
+#define NVC9B7_SET_IN_VP9_REF_TEMPORAL_DATA_OFFSET                              31:0
+#define NVC9B7_SET_IN_VP9_COMBINEDLINE_BUF                                      (0x000004B4)
+#define NVC9B7_SET_IN_VP9_COMBINEDLINE_BUF_OFFSET                               31:0
+#define NVC9B7_SET_IN_VP9_FILTERLINE_BUF                                        (0x000004B8)
+#define NVC9B7_SET_IN_VP9_FILTERLINE_BUF_OFFSET                                 31:0
+#define NVC9B7_SET_IN_VP9_FILTERCOLLINE_BUF                                     (0x000004BC)
+#define NVC9B7_SET_IN_VP9_FILTERCOLLINE_BUF_OFFSET                              31:0
+#define NVC9B7_SET_IN_VP9_MOCOMP_PIC_LUMA                                       (0x000004C0)
+#define NVC9B7_SET_IN_VP9_MOCOMP_PIC_LUMA_OFFSET                                31:0
+#define NVC9B7_SET_IN_VP9_MOCOMP_PIC_CHROMA                                     (0x000004C4)
+#define NVC9B7_SET_IN_VP9_MOCOMP_PIC_CHROMA_OFFSET                              31:0
+#define NVC9B7_SET_TOTAL_CORE_NUM                                               (0x000004C8)
+#define NVC9B7_SET_TOTAL_CORE_NUM_INDEX                                         31:0
+#define NVC9B7_SET_CONTROL_PARAMS                                               (0x00000700)
+#define NVC9B7_SET_CONTROL_PARAMS_CODEC_TYPE                                    3:0
+#define NVC9B7_SET_CONTROL_PARAMS_CODEC_TYPE_H264                               (0x00000003)
+#define NVC9B7_SET_CONTROL_PARAMS_FORCE_OUT_PIC                                 8:8
+#define NVC9B7_SET_CONTROL_PARAMS_FORCE_OUT_COL                                 9:9
+#define NVC9B7_SET_CONTROL_PARAMS_MEONLY                                        10:10
+#define NVC9B7_SET_CONTROL_PARAMS_SLICE_STAT_ON                                 11:11
+#define NVC9B7_SET_CONTROL_PARAMS_TOPLEVEL                                      4:4
+#define NVC9B7_SET_CONTROL_PARAMS_GPTIMER_ON                                    12:12
+#define NVC9B7_SET_CONTROL_PARAMS_STOP_PROB_UPDATE                              13:13
+#define NVC9B7_SET_CONTROL_PARAMS_DUMP_CYCLE_COUNT                              14:14
+#define NVC9B7_SET_CONTROL_PARAMS_MPEC_STAT_ON                                  15:15
+#define NVC9B7_SET_CONTROL_PARAMS_DEBUG_MODE                                    16:16
+#define NVC9B7_SET_CONTROL_PARAMS_SUBFRAME_MODE                                 18:17
+#define NVC9B7_SET_CONTROL_PARAMS_SUBFRAME_MODE_NONE                            (0x00000000)
+#define NVC9B7_SET_CONTROL_PARAMS_SUBFRAME_MODE_SLICE_FLUSH                     (0x00000001)
+#define NVC9B7_SET_CONTROL_PARAMS_SUBFRAME_MODE_SLICE_OFFSETS_WITHOUT_FLUSH     (0x00000002)
+#define NVC9B7_SET_CONTROL_PARAMS_SUBFRAME_MODE_SLICE_OFFSETS_WITH_FLUSH        (0x00000003)
+#define NVC9B7_SET_CONTROL_PARAMS_RCSTAT_WRITE                                  19:19
+#define NVC9B7_SET_CONTROL_PARAMS_RCSTAT_READ                                   20:20
+#define NVC9B7_SET_CONTROL_PARAMS_ENCRYPT_ON                                    21:21
+#define NVC9B7_SET_CONTROL_PARAMS_RCMODE                                        31:24
+#define NVC9B7_SET_CONTROL_PARAMS_RCMODE_CONSTQP                                (0x00000000)
+#define NVC9B7_SET_PICTURE_INDEX                                                (0x00000704)
+#define NVC9B7_SET_PICTURE_INDEX_INDEX                                          31:0
+#define NVC9B7_SET_OUT_ENCRYPT_PARAMS                                           (0x00000708)
+#define NVC9B7_SET_OUT_ENCRYPT_PARAMS_OFFSET                                    31:0
+#define NVC9B7_SET_IN_RCDATA                                                    (0x0000070C)
+#define NVC9B7_SET_IN_RCDATA_OFFSET                                             31:0
+#define NVC9B7_SET_IN_DRV_PIC_SETUP                                             (0x00000710)
+#define NVC9B7_SET_IN_DRV_PIC_SETUP_OFFSET                                      31:0
+#define NVC9B7_SET_IN_CEAHINTS_DATA                                             (0x00000714)
+#define NVC9B7_SET_IN_CEAHINTS_DATA_OFFSET                                      31:0
+#define NVC9B7_SET_OUT_ENC_STATUS                                               (0x00000718)
+#define NVC9B7_SET_OUT_ENC_STATUS_OFFSET                                        31:0
+#define NVC9B7_SET_OUT_BITSTREAM                                                (0x0000071C)
+#define NVC9B7_SET_OUT_BITSTREAM_OFFSET                                         31:0
+#define NVC9B7_SET_IOHISTORY                                                    (0x00000720)
+#define NVC9B7_SET_IOHISTORY_OFFSET                                             31:0
+#define NVC9B7_SET_IO_RC_PROCESS                                                (0x00000724)
+#define NVC9B7_SET_IO_RC_PROCESS_OFFSET                                         31:0
+#define NVC9B7_SET_IN_COLOC_DATA                                                (0x00000728)
+#define NVC9B7_SET_IN_COLOC_DATA_OFFSET                                         31:0
+#define NVC9B7_SET_OUT_COLOC_DATA                                               (0x0000072C)
+#define NVC9B7_SET_OUT_COLOC_DATA_OFFSET                                        31:0
+#define NVC9B7_SET_OUT_REF_PIC_LUMA                                             (0x00000730)
+#define NVC9B7_SET_OUT_REF_PIC_LUMA_OFFSET                                      31:0
+#define NVC9B7_SET_IN_CUR_PIC                                                   (0x00000734)
+#define NVC9B7_SET_IN_CUR_PIC_OFFSET                                            31:0
+#define NVC9B7_SET_IN_MEPRED_DATA                                               (0x00000738)
+#define NVC9B7_SET_IN_MEPRED_DATA_OFFSET                                        31:0
+#define NVC9B7_SET_OUT_MEPRED_DATA                                              (0x0000073C)
+#define NVC9B7_SET_OUT_MEPRED_DATA_OFFSET                                       31:0
+#define NVC9B7_SET_IN_CUR_PIC_CHROMA_U                                          (0x00000740)
+#define NVC9B7_SET_IN_CUR_PIC_CHROMA_U_OFFSET                                   31:0
+#define NVC9B7_SET_IN_CUR_PIC_CHROMA_V                                          (0x00000744)
+#define NVC9B7_SET_IN_CUR_PIC_CHROMA_V_OFFSET                                   31:0
+#define NVC9B7_SET_IN_QP_MAP                                                    (0x00000748)
+#define NVC9B7_SET_IN_QP_MAP_OFFSET                                             31:0
+#define NVC9B7_SET_OUT_REF_PIC_CHROMA                                           (0x0000074C)
+#define NVC9B7_SET_OUT_REF_PIC_CHROMA_OFFSET                                    31:0
+#define NVC9B7_SET_IN_PARTITION_BUF                                             (0x00000750)
+#define NVC9B7_SET_IN_PARTITION_BUF_OFFSET                                      31:0
+#define NVC9B7_SET_IN_CUR_PIC_TASK_STATUS                                       (0x00000758)
+#define NVC9B7_SET_IN_CUR_PIC_TASK_STATUS_OFFSET                                31:0
+#define NVC9B7_SET_IN_REF_PIC_TASK_STATUS                                       (0x0000075C)
+#define NVC9B7_SET_IN_REF_PIC_TASK_STATUS_OFFSET                                31:0
+#define NVC9B7_SET_OUT_TASK_STATUS                                              (0x00000760)
+#define NVC9B7_SET_OUT_TASK_STATUS_OFFSET                                       31:0
+#define NVC9B7_SET_IN_MV_HINTS_TASK_STATUS                                      (0x00000764)
+#define NVC9B7_SET_IN_MV_HINTS_TASK_STATUS_OFFSET                               31:0
+#define NVC9B7_SET_OUT_SCALE_REF_PIC_LUMA                                       (0x00000768)
+#define NVC9B7_SET_OUT_SCALE_REF_PIC_LUMA_OFFSET                                31:0
+#define NVC9B7_SET_OUT_SCALE_REF_PIC_CHROMA                                     (0x0000076C)
+#define NVC9B7_SET_OUT_SCALE_REF_PIC_CHROMA_OFFSET                              31:0
+#define NVC9B7_SET_IO_OFS_ERROR_PROPAGATION                                     (0x00000770)
+#define NVC9B7_SET_IO_OFS_ERROR_PROPAGATION_OFFSET                              31:0
+#define NVC9B7_SET_IO_DEBUG_STATUS                                              (0x00000774)
+#define NVC9B7_SET_IO_DEBUG_STATUS_OFFSET                                       31:0
+#define NVC9B7_SET_IN_LAMBDA_MAP                                                (0x00000778)
+#define NVC9B7_SET_IN_LAMBDA_MAP_OFFSET                                         31:0
+#define NVC9B7_SET_OUT_HYBRID_RES                                               (0x0000077C)
+#define NVC9B7_SET_OUT_HYBRID_RES_OFFSET                                        31:0
+#define NVC9B7_PM_TRIGGER_END                                                   (0x00001114)
+#define NVC9B7_PM_TRIGGER_END_V                                                 31:0
+
+#define NVC9B7_SET_PER_CORE_SET_CORE_INDEX(a)                                   (0x000004CC + (a)*0x00000010)
+#define NVC9B7_SET_PER_CORE_SET_CORE_INDEX_INDEX                                31:0
+#define NVC9B7_SET_PER_CORE_SET_OUT_BITSTREAM(a)                                (0x000004D0 + (a)*0x00000010)
+#define NVC9B7_SET_PER_CORE_SET_OUT_BITSTREAM_OFFSET                            31:0
+#define NVC9B7_SET_PER_CORE_SET_OUT_VP9_COUNTER_DATA(a)                         (0x000004D4 + (a)*0x00000010)
+#define NVC9B7_SET_PER_CORE_SET_OUT_VP9_COUNTER_DATA_OFFSET                     31:0
+#define NVC9B7_SET_PER_CORE_SET_IN_TILE_DATA(a)                                 (0x000004D8 + (a)*0x00000010)
+#define NVC9B7_SET_PER_CORE_SET_IN_TILE_DATA_OFFSET                             31:0
+
+#define NVC9B7_ERROR_NONE                                                       (0x00000000)
+#define NVC9B7_OS_ERROR_EXECUTE_INSUFFICIENT_DATA                               (0x00000001)
+#define NVC9B7_OS_ERROR_SEMAPHORE_INSUFFICIENT_DATA                             (0x00000002)
+#define NVC9B7_OS_ERROR_INVALID_METHOD                                          (0x00000003)
+#define NVC9B7_OS_ERROR_INVALID_DMA_PAGE                                        (0x00000004)
+#define NVC9B7_OS_ERROR_UNHANDLED_INTERRUPT                                     (0x00000005)
+#define NVC9B7_OS_ERROR_EXCEPTION                                               (0x00000006)
+#define NVC9B7_OS_ERROR_INVALID_CTXSW_REQUEST                                   (0x00000007)
+#define NVC9B7_OS_ERROR_APPLICATION                                             (0x00000008)
+#define NVC9B7_OS_INTERRUPT_EXECUTE_AWAKEN                                      (0x00000100)
+#define NVC9B7_OS_INTERRUPT_BACKEND_SEMAPHORE_AWAKEN                            (0x00000200)
+#define NVC9B7_OS_INTERRUPT_CTX_ERROR_FBIF                                      (0x00000300)
+#define NVC9B7_OS_INTERRUPT_LIMIT_VIOLATION                                     (0x00000400)
+#define NVC9B7_OS_INTERRUPT_LIMIT_AND_FBIF_CTX_ERROR                            (0x00000500)
+#define NVC9B7_OS_INTERRUPT_HALT_ENGINE                                         (0x00000600)
+#define NVC9B7_OS_INTERRUPT_TRAP_NONSTALL                                       (0x00000700)
+#define NVC9B7_OS_INTERRUPT_CTX_SAVE_DONE                                       (0x00000800)
+#define NVC9B7_OS_INTERRUPT_CTX_RESTORE_DONE                                    (0x00000900)
+#define NVC9B7_ENC_ERROR_H264_APPTIMER_EXPIRED                                  (0x30000001)
+#define NVC9B7_ENC_ERROR_H264_INVALID_INPUT                                     (0x30000002)
+#define NVC9B7_ENC_ERROR_H264_HWERR_INTERRUPT                                   (0x30000003)
+#define NVC9B7_ENC_ERROR_H264_BAD_MAGIC                                         (0x30000004)
+
+#ifdef __cplusplus
+};     /* extern "C" */
+#endif
+#endif // clc9b7_h
+
diff --git a/src/nouveau/headers/nvidia/classes/clc9d1.h b/src/nouveau/headers/nvidia/classes/clc9d1.h
new file mode 100644
index 0000000000000000000000000000000000000000..e78227e60b3002ac8a44d353bcd8e89672edcf84
--- /dev/null
+++ b/src/nouveau/headers/nvidia/classes/clc9d1.h
@@ -0,0 +1,145 @@
+/*
+ * SPDX-FileCopyrightText: Copyright (c) 1993-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+ * SPDX-License-Identifier: MIT
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#include "nvtypes.h"
+
+#ifndef _clc9d1_h_
+#define _clc9d1_h_
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define NVC9D1_VIDEO_NVJPG                                                               (0x0000C9D1)
+
+#define NVC9D1_NOP                                                              (0x00000100)
+#define NVC9D1_NOP_PARAMETER                                                    31:0
+#define NVC9D1_PM_TRIGGER                                                       (0x00000140)
+#define NVC9D1_PM_TRIGGER_V                                                     31:0
+#define NVC9D1_SET_APPLICATION_ID                                               (0x00000200)
+#define NVC9D1_SET_APPLICATION_ID_ID                                            31:0
+#define NVC9D1_SET_APPLICATION_ID_ID_NVJPG_DECODER                              (0x00000001)
+#define NVC9D1_SET_APPLICATION_ID_ID_NVJPG_ENCODER                              (0x00000002)
+#define NVC9D1_SET_WATCHDOG_TIMER                                               (0x00000204)
+#define NVC9D1_SET_WATCHDOG_TIMER_TIMER                                         31:0
+#define NVC9D1_SEMAPHORE_A                                                      (0x00000240)
+#define NVC9D1_SEMAPHORE_A_UPPER                                                24:0
+#define NVC9D1_SEMAPHORE_B                                                      (0x00000244)
+#define NVC9D1_SEMAPHORE_B_LOWER                                                31:0
+#define NVC9D1_SEMAPHORE_C                                                      (0x00000248)
+#define NVC9D1_SEMAPHORE_C_PAYLOAD                                              31:0
+#define NVC9D1_CTX_SAVE_AREA                                                    (0x0000024C)
+#define NVC9D1_CTX_SAVE_AREA_OFFSET                                             27:0
+#define NVC9D1_CTX_SAVE_AREA_CTX_VALID                                          31:28
+#define NVC9D1_CTX_SWITCH                                                       (0x00000250)
+#define NVC9D1_CTX_SWITCH_RESTORE                                               0:0
+#define NVC9D1_CTX_SWITCH_RESTORE_FALSE                                         (0x00000000)
+#define NVC9D1_CTX_SWITCH_RESTORE_TRUE                                          (0x00000001)
+#define NVC9D1_CTX_SWITCH_RST_NOTIFY                                            1:1
+#define NVC9D1_CTX_SWITCH_RST_NOTIFY_FALSE                                      (0x00000000)
+#define NVC9D1_CTX_SWITCH_RST_NOTIFY_TRUE                                       (0x00000001)
+#define NVC9D1_CTX_SWITCH_RESERVED                                              7:2
+#define NVC9D1_CTX_SWITCH_ASID                                                  23:8
+#define NVC9D1_SET_SEMAPHORE_PAYLOAD_LOWER                                      (0x00000254)
+#define NVC9D1_SET_SEMAPHORE_PAYLOAD_LOWER_PAYLOAD_LOWER                        31:0
+#define NVC9D1_SET_SEMAPHORE_PAYLOAD_UPPER                                      (0x00000258)
+#define NVC9D1_SET_SEMAPHORE_PAYLOAD_UPPER_PAYLOAD_UPPER                        31:0
+#define NVC9D1_EXECUTE                                                          (0x00000300)
+#define NVC9D1_EXECUTE_NOTIFY                                                   0:0
+#define NVC9D1_EXECUTE_NOTIFY_DISABLE                                           (0x00000000)
+#define NVC9D1_EXECUTE_NOTIFY_ENABLE                                            (0x00000001)
+#define NVC9D1_EXECUTE_NOTIFY_ON                                                1:1
+#define NVC9D1_EXECUTE_NOTIFY_ON_END                                            (0x00000000)
+#define NVC9D1_EXECUTE_NOTIFY_ON_BEGIN                                          (0x00000001)
+#define NVC9D1_EXECUTE_AWAKEN                                                   8:8
+#define NVC9D1_EXECUTE_AWAKEN_DISABLE                                           (0x00000000)
+#define NVC9D1_EXECUTE_AWAKEN_ENABLE                                            (0x00000001)
+#define NVC9D1_SEMAPHORE_D                                                      (0x00000304)
+#define NVC9D1_SEMAPHORE_D_STRUCTURE_SIZE                                       0:0
+#define NVC9D1_SEMAPHORE_D_STRUCTURE_SIZE_ONE                                   (0x00000000)
+#define NVC9D1_SEMAPHORE_D_STRUCTURE_SIZE_FOUR                                  (0x00000001)
+#define NVC9D1_SEMAPHORE_D_AWAKEN_ENABLE                                        8:8
+#define NVC9D1_SEMAPHORE_D_AWAKEN_ENABLE_FALSE                                  (0x00000000)
+#define NVC9D1_SEMAPHORE_D_AWAKEN_ENABLE_TRUE                                   (0x00000001)
+#define NVC9D1_SEMAPHORE_D_OPERATION                                            17:16
+#define NVC9D1_SEMAPHORE_D_OPERATION_RELEASE                                    (0x00000000)
+#define NVC9D1_SEMAPHORE_D_OPERATION_RESERVED0                                  (0x00000001)
+#define NVC9D1_SEMAPHORE_D_OPERATION_RESERVED1                                  (0x00000002)
+#define NVC9D1_SEMAPHORE_D_OPERATION_TRAP                                       (0x00000003)
+#define NVC9D1_SEMAPHORE_D_FLUSH_DISABLE                                        21:21
+#define NVC9D1_SEMAPHORE_D_FLUSH_DISABLE_FALSE                                  (0x00000000)
+#define NVC9D1_SEMAPHORE_D_FLUSH_DISABLE_TRUE                                   (0x00000001)
+#define NVC9D1_SET_CONTROL_PARAMS                                               (0x00000700)
+#define NVC9D1_SET_CONTROL_PARAMS_GPTIMER_ON                                    0:0
+#define NVC9D1_SET_CONTROL_PARAMS_DUMP_CYCLE_COUNT                              1:1
+#define NVC9D1_SET_CONTROL_PARAMS_DEBUG_MODE                                    2:2
+#define NVC9D1_SET_TOTAL_CORE_NUM                                               (0x00000704)
+#define NVC9D1_SET_TOTAL_CORE_NUM_INDEX                                         31:0
+#define NVC9D1_SET_IN_DRV_PIC_SETUP                                             (0x00000708)
+#define NVC9D1_SET_IN_DRV_PIC_SETUP_OFFSET                                      31:0
+#define NVC9D1_SET_OUT_STATUS                                                   (0x0000070C)
+#define NVC9D1_SET_OUT_STATUS_OFFSET                                            31:0
+#define NVC9D1_SET_GP_TIMER                                                     (0x000007B0)
+#define NVC9D1_SET_GP_TIMER_OFFSET                                              31:0
+#define NVC9D1_PM_TRIGGER_END                                                   (0x00001114)
+#define NVC9D1_PM_TRIGGER_END_V                                                 31:0
+
+#define NVC9D1_SET_PER_CORE_SET_CORE_INDEX(a)                                   (0x00000710 + (a)*0x00000020)
+#define NVC9D1_SET_PER_CORE_SET_CORE_INDEX_INDEX                                31:0
+#define NVC9D1_SET_PER_CORE_SET_BITSTREAM(a)                                    (0x00000714 + (a)*0x00000020)
+#define NVC9D1_SET_PER_CORE_SET_BITSTREAM_OFFSET                                31:0
+#define NVC9D1_SET_PER_CORE_SET_CUR_PIC(a)                                      (0x00000718 + (a)*0x00000020)
+#define NVC9D1_SET_PER_CORE_SET_CUR_PIC_OFFSET                                  31:0
+#define NVC9D1_SET_PER_CORE_SET_CUR_PIC_CHROMA_U(a)                             (0x0000071C + (a)*0x00000020)
+#define NVC9D1_SET_PER_CORE_SET_CUR_PIC_CHROMA_U_OFFSET                         31:0
+#define NVC9D1_SET_PER_CORE_SET_CUR_PIC_CHROMA_V(a)                             (0x00000720 + (a)*0x00000020)
+#define NVC9D1_SET_PER_CORE_SET_CUR_PIC_CHROMA_V_OFFSET                         31:0
+
+#define NVC9D1_ERROR_NONE                                                       (0x00000000)
+#define NVC9D1_OS_ERROR_EXECUTE_INSUFFICIENT_DATA                               (0x00000001)
+#define NVC9D1_OS_ERROR_SEMAPHORE_INSUFFICIENT_DATA                             (0x00000002)
+#define NVC9D1_OS_ERROR_INVALID_METHOD                                          (0x00000003)
+#define NVC9D1_OS_ERROR_INVALID_DMA_PAGE                                        (0x00000004)
+#define NVC9D1_OS_ERROR_UNHANDLED_INTERRUPT                                     (0x00000005)
+#define NVC9D1_OS_ERROR_EXCEPTION                                               (0x00000006)
+#define NVC9D1_OS_ERROR_INVALID_CTXSW_REQUEST                                   (0x00000007)
+#define NVC9D1_OS_ERROR_APPLICATION                                             (0x00000008)
+#define NVC9D1_OS_INTERRUPT_EXECUTE_AWAKEN                                      (0x00000100)
+#define NVC9D1_OS_INTERRUPT_BACKEND_SEMAPHORE_AWAKEN                            (0x00000200)
+#define NVC9D1_OS_INTERRUPT_CTX_ERROR_FBIF                                      (0x00000300)
+#define NVC9D1_OS_INTERRUPT_LIMIT_VIOLATION                                     (0x00000400)
+#define NVC9D1_OS_INTERRUPT_LIMIT_AND_FBIF_CTX_ERROR                            (0x00000500)
+#define NVC9D1_OS_INTERRUPT_HALT_ENGINE                                         (0x00000600)
+#define NVC9D1_OS_INTERRUPT_TRAP_NONSTALL                                       (0x00000700)
+#define NVC9D1_OS_INTERRUPT_CTX_SAVE_DONE                                       (0x00000800)
+#define NVC9D1_OS_INTERRUPT_CTX_RESTORE_DONE                                    (0x00000900)
+#define NVC9D1_ERROR_JPGAPPTIMER_EXPIRED                                        (0x30000001)
+#define NVC9D1_ERROR_JPGINVALID_INPUT                                           (0x30000002)
+#define NVC9D1_ERROR_JPGHWERR_INTERRUPT                                         (0x30000003)
+#define NVC9D1_ERROR_JPGBAD_MAGIC                                               (0x30000004)
+
+#ifdef __cplusplus
+};     /* extern "C" */
+#endif
+#endif // _clc9d1_h
+
diff --git a/src/nouveau/headers/nvidia/classes/cle7d0.h b/src/nouveau/headers/nvidia/classes/cle7d0.h
new file mode 100644
index 0000000000000000000000000000000000000000..fee0107c0ccb53faa5c524b39157fc7f96b66660
--- /dev/null
+++ b/src/nouveau/headers/nvidia/classes/cle7d0.h
@@ -0,0 +1,130 @@
+/*******************************************************************************
+    Copyright (c) 1993-2020, NVIDIA CORPORATION. All rights reserved.
+
+    Permission is hereby granted, free of charge, to any person obtaining a
+    copy of this software and associated documentation files (the "Software"),
+    to deal in the Software without restriction, including without limitation
+    the rights to use, copy, modify, merge, publish, distribute, sublicense,
+    and/or sell copies of the Software, and to permit persons to whom the
+    Software is furnished to do so, subject to the following conditions:
+
+    The above copyright notice and this permission notice shall be included in
+    all copies or substantial portions of the Software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+    DEALINGS IN THE SOFTWARE.
+
+*******************************************************************************/
+
+#ifndef _cle7d0_h_
+#define _cle7d0_h_
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define NVE7D0_VIDEO_NVJPG                                                               (0x0000E7D0)
+
+#define NVE7D0_NOP                                                              (0x00000100)
+#define NVE7D0_NOP_PARAMETER                                                    31:0
+#define NVE7D0_SET_APPLICATION_ID                                               (0x00000200)
+#define NVE7D0_SET_APPLICATION_ID_ID                                            31:0
+#define NVE7D0_SET_APPLICATION_ID_ID_NVJPG_DECODER                              (0x00000001)
+#define NVE7D0_SET_APPLICATION_ID_ID_NVJPG_ENCODER                              (0x00000002)
+#define NVE7D0_SET_WATCHDOG_TIMER                                               (0x00000204)
+#define NVE7D0_SET_WATCHDOG_TIMER_TIMER                                         31:0
+#define NVE7D0_SEMAPHORE_A                                                      (0x00000240)
+#define NVE7D0_SEMAPHORE_A_UPPER                                                7:0
+#define NVE7D0_SEMAPHORE_B                                                      (0x00000244)
+#define NVE7D0_SEMAPHORE_B_LOWER                                                31:0
+#define NVE7D0_SEMAPHORE_C                                                      (0x00000248)
+#define NVE7D0_SEMAPHORE_C_PAYLOAD                                              31:0
+#define NVE7D0_CTX_SAVE_AREA                                                    (0x0000024C)
+#define NVE7D0_CTX_SAVE_AREA_OFFSET                                             27:0
+#define NVE7D0_CTX_SAVE_AREA_CTX_VALID                                          31:28
+#define NVE7D0_CTX_SWITCH                                                       (0x00000250)
+#define NVE7D0_CTX_SWITCH_RESTORE                                               0:0
+#define NVE7D0_CTX_SWITCH_RESTORE_FALSE                                         (0x00000000)
+#define NVE7D0_CTX_SWITCH_RESTORE_TRUE                                          (0x00000001)
+#define NVE7D0_CTX_SWITCH_RST_NOTIFY                                            1:1
+#define NVE7D0_CTX_SWITCH_RST_NOTIFY_FALSE                                      (0x00000000)
+#define NVE7D0_CTX_SWITCH_RST_NOTIFY_TRUE                                       (0x00000001)
+#define NVE7D0_CTX_SWITCH_RESERVED                                              7:2
+#define NVE7D0_CTX_SWITCH_ASID                                                  23:8
+#define NVE7D0_EXECUTE                                                          (0x00000300)
+#define NVE7D0_EXECUTE_NOTIFY                                                   0:0
+#define NVE7D0_EXECUTE_NOTIFY_DISABLE                                           (0x00000000)
+#define NVE7D0_EXECUTE_NOTIFY_ENABLE                                            (0x00000001)
+#define NVE7D0_EXECUTE_NOTIFY_ON                                                1:1
+#define NVE7D0_EXECUTE_NOTIFY_ON_END                                            (0x00000000)
+#define NVE7D0_EXECUTE_NOTIFY_ON_BEGIN                                          (0x00000001)
+#define NVE7D0_EXECUTE_AWAKEN                                                   8:8
+#define NVE7D0_EXECUTE_AWAKEN_DISABLE                                           (0x00000000)
+#define NVE7D0_EXECUTE_AWAKEN_ENABLE                                            (0x00000001)
+#define NVE7D0_SEMAPHORE_D                                                      (0x00000304)
+#define NVE7D0_SEMAPHORE_D_STRUCTURE_SIZE                                       0:0
+#define NVE7D0_SEMAPHORE_D_STRUCTURE_SIZE_ONE                                   (0x00000000)
+#define NVE7D0_SEMAPHORE_D_STRUCTURE_SIZE_FOUR                                  (0x00000001)
+#define NVE7D0_SEMAPHORE_D_AWAKEN_ENABLE                                        8:8
+#define NVE7D0_SEMAPHORE_D_AWAKEN_ENABLE_FALSE                                  (0x00000000)
+#define NVE7D0_SEMAPHORE_D_AWAKEN_ENABLE_TRUE                                   (0x00000001)
+#define NVE7D0_SEMAPHORE_D_OPERATION                                            17:16
+#define NVE7D0_SEMAPHORE_D_OPERATION_RELEASE                                    (0x00000000)
+#define NVE7D0_SEMAPHORE_D_OPERATION_RESERVED0                                  (0x00000001)
+#define NVE7D0_SEMAPHORE_D_OPERATION_RESERVED1                                  (0x00000002)
+#define NVE7D0_SEMAPHORE_D_OPERATION_TRAP                                       (0x00000003)
+#define NVE7D0_SEMAPHORE_D_FLUSH_DISABLE                                        21:21
+#define NVE7D0_SEMAPHORE_D_FLUSH_DISABLE_FALSE                                  (0x00000000)
+#define NVE7D0_SEMAPHORE_D_FLUSH_DISABLE_TRUE                                   (0x00000001)
+#define NVE7D0_SET_CONTROL_PARAMS                                               (0x00000700)
+#define NVE7D0_SET_CONTROL_PARAMS_GPTIMER_ON                                    0:0
+#define NVE7D0_SET_CONTROL_PARAMS_DUMP_CYCLE_COUNT                              1:1
+#define NVE7D0_SET_CONTROL_PARAMS_DEBUG_MODE                                    2:2
+#define NVE7D0_SET_PICTURE_INDEX                                                (0x00000704)
+#define NVE7D0_SET_PICTURE_INDEX_INDEX                                          31:0
+#define NVE7D0_SET_IN_DRV_PIC_SETUP                                             (0x00000708)
+#define NVE7D0_SET_IN_DRV_PIC_SETUP_OFFSET                                      31:0
+#define NVE7D0_SET_OUT_STATUS                                                   (0x0000070C)
+#define NVE7D0_SET_OUT_STATUS_OFFSET                                            31:0
+#define NVE7D0_SET_BITSTREAM                                                    (0x00000710)
+#define NVE7D0_SET_BITSTREAM_OFFSET                                             31:0
+#define NVE7D0_SET_CUR_PIC                                                      (0x00000714)
+#define NVE7D0_SET_CUR_PIC_OFFSET                                               31:0
+#define NVE7D0_SET_CUR_PIC_CHROMA_U                                             (0x00000718)
+#define NVE7D0_SET_CUR_PIC_CHROMA_U_OFFSET                                      31:0
+#define NVE7D0_SET_CUR_PIC_CHROMA_V                                             (0x0000071C)
+#define NVE7D0_SET_CUR_PIC_CHROMA_V_OFFSET                                      31:0
+
+#define NVE7D0_ERROR_NONE                                                       (0x00000000)
+#define NVE7D0_OS_ERROR_EXECUTE_INSUFFICIENT_DATA                               (0x00000001)
+#define NVE7D0_OS_ERROR_SEMAPHORE_INSUFFICIENT_DATA                             (0x00000002)
+#define NVE7D0_OS_ERROR_INVALID_METHOD                                          (0x00000003)
+#define NVE7D0_OS_ERROR_INVALID_DMA_PAGE                                        (0x00000004)
+#define NVE7D0_OS_ERROR_UNHANDLED_INTERRUPT                                     (0x00000005)
+#define NVE7D0_OS_ERROR_EXCEPTION                                               (0x00000006)
+#define NVE7D0_OS_ERROR_INVALID_CTXSW_REQUEST                                   (0x00000007)
+#define NVE7D0_OS_ERROR_APPLICATION                                             (0x00000008)
+#define NVE7D0_OS_INTERRUPT_EXECUTE_AWAKEN                                      (0x00000100)
+#define NVE7D0_OS_INTERRUPT_BACKEND_SEMAPHORE_AWAKEN                            (0x00000200)
+#define NVE7D0_OS_INTERRUPT_CTX_ERROR_FBIF                                      (0x00000300)
+#define NVE7D0_OS_INTERRUPT_LIMIT_VIOLATION                                     (0x00000400)
+#define NVE7D0_OS_INTERRUPT_LIMIT_AND_FBIF_CTX_ERROR                            (0x00000500)
+#define NVE7D0_OS_INTERRUPT_HALT_ENGINE                                         (0x00000600)
+#define NVE7D0_OS_INTERRUPT_TRAP_NONSTALL                                       (0x00000700)
+#define NVE7D0_OS_INTERRUPT_CTX_SAVE_DONE                                       (0x00000800)
+#define NVE7D0_OS_INTERRUPT_CTX_RESTORE_DONE                                    (0x00000900)
+#define NVE7D0_ERROR_JPGAPPTIMER_EXPIRED                                        (0x30000001)
+#define NVE7D0_ERROR_JPGINVALID_INPUT                                           (0x30000002)
+#define NVE7D0_ERROR_JPGHWERR_INTERRUPT                                         (0x30000003)
+#define NVE7D0_ERROR_JPGBAD_MAGIC                                               (0x30000004)
+
+#ifdef __cplusplus
+};     /* extern "C" */
+#endif
+#endif // _cle7d0_h
+
diff --git a/src/nouveau/headers/nvidia/nvdec_drv.h b/src/nouveau/headers/nvidia/nvdec_drv.h
new file mode 100644
index 0000000000000000000000000000000000000000..8203c3f5ad16a987a99151c2755257185783c4b1
--- /dev/null
+++ b/src/nouveau/headers/nvidia/nvdec_drv.h
@@ -0,0 +1,1846 @@
+/*
+ * SPDX-FileCopyrightText: Copyright (c) 1993-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+ * SPDX-License-Identifier: MIT
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef __NVDEC_DRV_H_
+#define __NVDEC_DRV_H_
+
+// TODO: Many fields can be converted to bitfields to save memory BW
+// TODO: Revisit reserved fields for proper alignment and memory savings
+
+///////////////////////////////////////////////////////////////////////////////
+// NVDEC(MSDEC 5) is a single engine solution, and seperates into VLD, MV, IQT,
+//                MCFETCH, MC, MCC, REC, DBF, DFBFDMA, HIST etc unit.
+//                The class(driver to HW) can mainly seperate into VLD parser
+//                and Decoder part to be consistent with original design. And
+//                the sequence level info usally set in VLD part. Later codec like
+//                VP8 won't name in this way.
+// MSVLD: Multi-Standard VLD parser.
+//
+#define ALIGN_UP(v, n)          (((v) + ((n)-1)) &~ ((n)-1))
+#define NVDEC_ALIGN(value)      ALIGN_UP(value,256) // Align to 256 bytes
+#define NVDEC_MAX_MPEG2_SLICE   65536 // at 4096*4096, macroblock count = 65536, 1 macroblock per slice
+
+#define NVDEC_CODEC_MPEG1   0
+#define NVDEC_CODEC_MPEG2   1
+#define NVDEC_CODEC_VC1     2
+#define NVDEC_CODEC_H264    3
+#define NVDEC_CODEC_MPEG4   4
+#define NVDEC_CODEC_DIVX    NVDEC_CODEC_MPEG4
+#define NVDEC_CODEC_VP8     5
+#define NVDEC_CODEC_HEVC    7
+#define NVDEC_CODEC_VP9     9
+#define NVDEC_CODEC_HEVC_PARSER 12
+#define NVDEC_CODEC_AV1         10
+
+// AES encryption
+enum
+{
+    AES128_NONE = 0x0,
+    AES128_CTR = 0x1,
+    AES128_CBC,
+    AES128_ECB,
+    AES128_OFB,
+    AES128_CTR_LSB16B,
+    AES128_CLR_AS_ENCRYPT,
+    AES128_RESERVED = 0x7
+};
+
+enum
+{
+    AES128_CTS_DISABLE = 0x0,
+    AES128_CTS_ENABLE = 0x1
+};
+
+enum
+{
+    AES128_PADDING_NONE = 0x0,
+    AES128_PADDING_CARRY_OVER,
+    AES128_PADDING_RFC2630,
+    AES128_PADDING_RESERVED = 0x7
+};
+
+typedef enum
+{
+    ENCR_MODE_CTR64         = 0,
+    ENCR_MODE_CBC           = 1,
+    ENCR_MODE_ECB           = 2,
+    ENCR_MODE_ECB_PARTIAL   = 3,
+    ENCR_MODE_CBC_PARTIAL   = 4,
+    ENCR_MODE_CLEAR_INTO_VPR = 5,     // used for clear stream decoding into VPR.
+    ENCR_MODE_FORCE_INTO_VPR = 6,    //  used to force decode output into VPR.
+} ENCR_MODE;
+
+// drm_mode configuration
+//
+// Bit 0:2  AES encryption mode
+// Bit 3    CTS (CipherTextStealing) enable/disable
+// Bit 4:6  Padding type
+// Bit 7:7  Unwrap key enable/disable
+
+#define AES_MODE_MASK           0x7
+#define AES_CTS_MASK            0x1
+#define AES_PADDING_TYPE_MASK   0x7
+#define AES_UNWRAP_KEY_MASK     0x1
+
+#define AES_MODE_SHIFT          0
+#define AES_CTS_SHIFT           3
+#define AES_PADDING_TYPE_SHIFT  4
+#define AES_UNWRAP_KEY_SHIFT    7
+
+#define AES_SET_FLAG(M, C, P)   ((M & AES_MODE_MASK) << AES_MODE_SHIFT) | \
+                                ((C & AES_CTS_MASK) << AES_CTS_SHIFT) | \
+                                ((P & AES_PADDING_TYPE_MASK) << AES_PADDING_TYPE_SHIFT)
+
+#define AES_GET_FLAG(V, F)      ((V & ((AES_##F##_MASK) <<(AES_##F##_SHIFT))) >> (AES_##F##_SHIFT))
+
+#define DRM_MODE_MASK           0x7f        // Bits 0:6  (0:2 -> AES_MODE, 3 -> AES_CTS, 4:6 -> AES_PADDING_TYPE)
+#define AES_GET_DRM_MODE(V)      (V & DRM_MODE_MASK)
+
+enum { DRM_MS_PIFF_CTR  =   AES_SET_FLAG(AES128_CTR, AES128_CTS_DISABLE, AES128_PADDING_CARRY_OVER) };
+enum { DRM_MS_PIFF_CBC  =   AES_SET_FLAG(AES128_CBC, AES128_CTS_DISABLE, AES128_PADDING_NONE) };
+enum { DRM_MARLIN_CTR   =   AES_SET_FLAG(AES128_CTR, AES128_CTS_DISABLE, AES128_PADDING_NONE) };
+enum { DRM_MARLIN_CBC   =   AES_SET_FLAG(AES128_CBC, AES128_CTS_DISABLE, AES128_PADDING_RFC2630) };
+enum { DRM_WIDEVINE     =   AES_SET_FLAG(AES128_CBC, AES128_CTS_ENABLE,  AES128_PADDING_NONE) };
+enum { DRM_WIDEVINE_CTR =   AES_SET_FLAG(AES128_CTR, AES128_CTS_DISABLE, AES128_PADDING_CARRY_OVER) };
+enum { DRM_ULTRA_VIOLET =   AES_SET_FLAG(AES128_CTR_LSB16B, AES128_CTS_DISABLE, AES128_PADDING_NONE) };
+enum { DRM_NONE         =   AES_SET_FLAG(AES128_NONE, AES128_CTS_DISABLE, AES128_PADDING_NONE) };
+enum { DRM_CLR_AS_ENCRYPT = AES_SET_FLAG(AES128_CLR_AS_ENCRYPT, AES128_CTS_DISABLE, AES128_PADDING_NONE)};
+
+// SSM entry structure
+typedef struct _nvdec_ssm_s {
+    unsigned int bytes_of_protected_data;//bytes of protected data, follows bytes_of_clear_data. Note: When padding is enabled, it does not include the padding_bytes (1~15), which can be derived by "(16-(bytes_of_protected_data&0xF))&0xF"
+    unsigned int bytes_of_clear_data:16; //bytes of clear data, located before bytes_of_protected_data
+    unsigned int skip_byte_blk      : 4; //valid when (entry_type==0 && mode = 1)
+    unsigned int crypt_byte_blk     : 4; //valid when (entry_type==0 && mode = 1)
+    unsigned int skip               : 1; //whether this SSM entry should be skipped or not
+    unsigned int last               : 1; //whether this SSM entry is the last one for the whole decoding frame
+    unsigned int pad                : 1; //valid when (entry_type==0 && mode==0 && AES_PADDING_TYPE==AES128_PADDING_RFC2630), 0 for pad_end, 1 for pad_begin
+    unsigned int mode               : 1; //0 for normal mode, 1 for pattern mode
+    unsigned int entry_type         : 1; //0 for DATA, 1 for IV
+    unsigned int reserved           : 3;
+} nvdec_ssm_s; /* SubSampleMap, 8bytes */
+
+// PASS2 OTF extension structure for SSM support, not exist in nvdec_mpeg4_pic_s (as MPEG4 OTF SW-DRM is not supported yet)
+typedef struct _nvdec_pass2_otf_ext_s {
+    unsigned int ssm_entry_num      :16; //specifies how many SSM entries (each in unit of 8 bytes) existed in SET_SUB_SAMPLE_MAP_OFFSET surface
+    unsigned int ssm_iv_num         :16; //specifies how many SSM IV (each in unit of 16 bytes) existed in SET_SUB_SAMPLE_MAP_IV_OFFSET surface
+    unsigned int real_stream_length;     //the real stream length, which is the bitstream length EMD/VLD will get after whole frame SSM processing, sum up of "clear+protected" bytes in SSM entries and removing "non_slice_data/skip".
+    unsigned int non_slice_data     :16; //specifies the first many bytes needed to skip, includes only those of "clear+protected" bytes ("padding" bytes excluded)
+    unsigned int drm_mode           : 7;
+    unsigned int reserved           : 9;
+} nvdec_pass2_otf_ext_s; /* 12bytes */
+
+
+//NVDEC5.0 low latency decoding (partial stream kickoff without context switch), method will reuse HevcSetSliceInfoBufferOffset.
+typedef struct _nvdec_substream_entry_s {
+    unsigned int substream_start_offset;                    //substream byte start offset to bitstream base address
+    unsigned int substream_length;                          //subsream length in byte
+    unsigned int substream_first_tile_idx           : 8;    //the first tile index(raster scan in frame) of this substream,max is 255
+    unsigned int substream_last_tile_idx            : 8;    //the last tile index(raster scan in frame) of this substream, max is 255
+    unsigned int last_substream_entry_in_frame      : 1;    //this entry is the last substream entry of this frame
+    unsigned int reserved                           : 15;
+} nvdec_substream_entry_s;/*low latency without context switch substream entry map,12bytes*/
+
+
+// GIP
+
+/* tile border coefficients of filter */
+#define GIP_ASIC_VERT_FILTER_RAM_SIZE       16  /* bytes per pixel */
+
+/* BSD control data of current picture at tile border
+ * 11  * 128 bits per 4x4 tile = 128/(8*4) bytes per row */
+#define GIP_ASIC_BSD_CTRL_RAM_SIZE          4  /* bytes per row */
+
+/* 8 dc + 8 to boundary + 6*16 + 2*6*64 + 2*64 -> 63 * 16 bytes */
+#define GIP_ASIC_SCALING_LIST_SIZE          (16*64)
+
+/* tile border coefficients of filter */
+#define GIP_ASIC_VERT_SAO_RAM_SIZE          16  /* bytes per pixel */
+
+/* max number of tiles times width and height (2 bytes each),
+ * rounding up to next 16 bytes boundary + one extra 16 byte
+ * chunk (HW guys wanted to have this) */
+#define GIP_ASIC_TILE_SIZE                  ((20*22*2*2+16+15) & ~0xF)
+
+/* Segment map uses 32 bytes / CTB */
+#define GIP_ASIC_VP9_CTB_SEG_SIZE           32
+
+// HEVC Filter FG buffer
+#define HEVC_DBLK_TOP_SIZE_IN_SB16          ALIGN_UP(632, 128) // ctb16 + 444
+#define HEVC_DBLK_TOP_BUF_SIZE(w)           NVDEC_ALIGN( (ALIGN_UP(w,16)/16 + 2) * HEVC_DBLK_TOP_SIZE_IN_SB16) // 8K: 1285*256
+
+#define HEVC_DBLK_LEFT_SIZE_IN_SB16         ALIGN_UP(506, 128) // ctb16 + 444
+#define HEVC_DBLK_LEFT_BUF_SIZE(h)          NVDEC_ALIGN( (ALIGN_UP(h,16)/16 + 2) * HEVC_DBLK_LEFT_SIZE_IN_SB16) // 8K: 1028*256
+
+#define HEVC_SAO_LEFT_SIZE_IN_SB16          ALIGN_UP(713, 128) // ctb16 + 444
+#define HEVC_SAO_LEFT_BUF_SIZE(h)           NVDEC_ALIGN( (ALIGN_UP(h,16)/16 + 2) * HEVC_SAO_LEFT_SIZE_IN_SB16) // 8K: 1542*256
+
+// VP9 Filter FG buffer
+#define VP9_DBLK_TOP_SIZE_IN_SB64           ALIGN_UP(2000, 128) // 420
+#define VP9_DBLK_TOP_BUF_SIZE(w)            NVDEC_ALIGN( (ALIGN_UP(w,64)/64 + 2) * VP9_DBLK_TOP_SIZE_IN_SB64) // 8K: 1040*256
+
+#define VP9_DBLK_LEFT_SIZE_IN_SB64          ALIGN_UP(1600, 128) // 420
+#define VP9_DBLK_LEFT_BUF_SIZE(h)           NVDEC_ALIGN( (ALIGN_UP(h,64)/64 + 2) * VP9_DBLK_LEFT_SIZE_IN_SB64) // 8K: 845*256
+
+// VP9 Hint Dump Buffer
+#define VP9_HINT_DUMP_SIZE_IN_SB64          ((64*64)/(4*4)*8)           // 8 bytes per CU, 256 CUs(2048 bytes) per SB64
+#define VP9_HINT_DUMP_SIZE(w, h)            NVDEC_ALIGN(VP9_HINT_DUMP_SIZE_IN_SB64*((w+63)/64)*((h+63)/64))
+
+// used for ecdma debug
+typedef struct _nvdec_ecdma_config_s
+{
+    unsigned int            ecdma_enable;                               // enable/disable  ecdma
+    unsigned short          ecdma_blk_x_src;                            // src start position x , it's 64x aligned
+    unsigned short          ecdma_blk_y_src;                            // src start position y , it's 8x aligned
+    unsigned short          ecdma_blk_x_dst;                            // dst start position x , it's 64x aligned
+    unsigned short          ecdma_blk_y_dst;                            // dst start position y , it's 8x aligned
+    unsigned short          ref_pic_idx;                                // ref(src) picture index , used to derived source picture base address
+    unsigned short          boundary0_top;                              // src insided tile/partition region top boundary
+    unsigned short          boundary0_bottom;                           // src insided tile/partition region bottom boundary
+    unsigned short          boundary1_left;                             // src insided tile/partition region left boundary
+    unsigned short          boundary1_right;                            // src insided tile/partition region right boundary
+    unsigned char           blk_copy_flag;                              // blk_copy enable flag.
+                                                                        // if it's 1 ,ctb_size ==3,ecdma_blk_x_src == boundary1_left and ecdma_blk_y_src == boundary0_top ;
+                                                                        // if it's 0 ,ecdma_blk_x_src == ecdma_blk_x_dst and ecdma_blk_y_src == ecdma_blk_y_dst;
+    unsigned char           ctb_size;                                   // ctb_size .0:64x64,1:32x32,2:16x16,3:8x8
+} nvdec_ecdma_config_s;
+
+typedef struct _nvdec_status_hevc_s
+{
+    unsigned int frame_status_intra_cnt;    //Intra block counter, in unit of 8x8 block, IPCM block included
+    unsigned int frame_status_inter_cnt;    //Inter block counter, in unit of 8x8 block, SKIP block included
+    unsigned int frame_status_skip_cnt;     //Skip block counter, in unit of 4x4 block, blocks having NO/ZERO texture/coeff data
+    unsigned int frame_status_fwd_mvx_cnt;  //ABS sum of forward  MVx, one 14bit MVx(integer) per 4x4 block
+    unsigned int frame_status_fwd_mvy_cnt;  //ABS sum of forward  MVy, one 14bit MVy(integer) per 4x4 block
+    unsigned int frame_status_bwd_mvx_cnt;  //ABS sum of backward MVx, one 14bit MVx(integer) per 4x4 block
+    unsigned int frame_status_bwd_mvy_cnt;  //ABS sum of backward MVy, one 14bit MVy(integer) per 4x4 block
+    unsigned int error_ctb_pos;             //[15:0] error ctb   position in Y direction, [31:16] error ctb   position in X direction
+    unsigned int error_slice_pos;           //[15:0] error slice position in Y direction, [31:16] error slice position in X direction
+} nvdec_status_hevc_s;
+
+typedef struct _nvdec_status_vp9_s
+{
+    unsigned int frame_status_intra_cnt;    //Intra block counter, in unit of 8x8 block, IPCM block included
+    unsigned int frame_status_inter_cnt;    //Inter block counter, in unit of 8x8 block, SKIP block included
+    unsigned int frame_status_skip_cnt;     //Skip block counter, in unit of 4x4 block, blocks having NO/ZERO texture/coeff data
+    unsigned int frame_status_fwd_mvx_cnt;  //ABS sum of forward  MVx, one 14bit MVx(integer) per 4x4 block
+    unsigned int frame_status_fwd_mvy_cnt;  //ABS sum of forward  MVy, one 14bit MVy(integer) per 4x4 block
+    unsigned int frame_status_bwd_mvx_cnt;  //ABS sum of backward MVx, one 14bit MVx(integer) per 4x4 block
+    unsigned int frame_status_bwd_mvy_cnt;  //ABS sum of backward MVy, one 14bit MVy(integer) per 4x4 block
+    unsigned int error_ctb_pos;             //[15:0] error ctb   position in Y direction, [31:16] error ctb   position in X direction
+    unsigned int error_slice_pos;           //[15:0] error slice position in Y direction, [31:16] error slice position in X direction
+} nvdec_status_vp9_s;
+
+typedef struct _nvdec_status_s
+{
+    unsigned int    mbs_correctly_decoded;          // total numers of correctly decoded macroblocks
+    unsigned int    mbs_in_error;                   // number of error macroblocks.
+    unsigned int    cycle_count;                    // total cycles taken for execute. read from PERF_DECODE_FRAME_V register
+    unsigned int    error_status;                   // report error if any
+    union
+    {
+        nvdec_status_hevc_s hevc;
+        nvdec_status_vp9_s vp9;
+    };
+    unsigned int    slice_header_error_code;        // report error in slice header
+
+} nvdec_status_s;
+
+// per 16x16 block, used in hevc/vp9 surface of SetExternalMVBufferOffset when error_external_mv_en = 1
+typedef struct _external_mv_s
+{
+    int             mvx     : 14;   //integrate pixel precision
+    int             mvy     : 14;   //integrate pixel precision
+    unsigned int    refidx  :  4;
+} external_mv_s;
+
+// HEVC
+typedef struct _nvdec_hevc_main10_444_ext_s
+{
+    unsigned int transformSkipRotationEnableFlag : 1;    //sps extension for transform_skip_rotation_enabled_flag
+    unsigned int transformSkipContextEnableFlag : 1;     //sps extension for transform_skip_context_enabled_flag
+    unsigned int intraBlockCopyEnableFlag :1;            //sps intraBlockCopyEnableFlag, always 0 before spec define it
+    unsigned int implicitRdpcmEnableFlag : 1;            //sps implicit_rdpcm_enabled_flag
+    unsigned int explicitRdpcmEnableFlag : 1;            //sps explicit_rdpcm_enabled_flag
+    unsigned int extendedPrecisionProcessingFlag : 1;    //sps extended_precision_processing_flag,always 0 in current profile
+    unsigned int intraSmoothingDisabledFlag : 1;         //sps intra_smoothing_disabled_flag
+    unsigned int highPrecisionOffsetsEnableFlag :1;      //sps high_precision_offsets_enabled_flag
+    unsigned int fastRiceAdaptationEnableFlag: 1;        //sps fast_rice_adaptation_enabled_flag
+    unsigned int cabacBypassAlignmentEnableFlag : 1;     //sps cabac_bypass_alignment_enabled_flag, always 0 in current profile
+    unsigned int sps_444_extension_reserved : 22;        //sps reserve for future extension
+
+    unsigned int log2MaxTransformSkipSize : 4 ;          //pps extension log2_max_transform_skip_block_size_minus2, 0...5
+    unsigned int crossComponentPredictionEnableFlag: 1;  //pps cross_component_prediction_enabled_flag
+    unsigned int chromaQpAdjustmentEnableFlag:1;         //pps chroma_qp_adjustment_enabled_flag
+    unsigned int diffCuChromaQpAdjustmentDepth:2;        //pps diff_cu_chroma_qp_adjustment_depth, 0...3
+    unsigned int chromaQpAdjustmentTableSize:3;          //pps chroma_qp_adjustment_table_size_minus1+1, 1...6
+    unsigned int log2SaoOffsetScaleLuma:3;               //pps log2_sao_offset_scale_luma, max(0,bitdepth-10),maxBitdepth 16 for future.
+    unsigned int log2SaoOffsetScaleChroma: 3;            //pps log2_sao_offset_scale_chroma
+    unsigned int pps_444_extension_reserved : 15;        //pps reserved
+    char         cb_qp_adjustment[6];                    //-[12,+12]
+    char         cr_qp_adjustment[6];                    //-[12,+12]
+    unsigned int   HevcFltAboveOffset;  // filter above offset respect to filter buffer, 256 bytes unit
+    unsigned int   HevcSaoAboveOffset;  // sao    above offset respect to filter buffer, 256 bytes unit
+} nvdec_hevc_main10_444_ext_s;
+
+typedef struct _nvdec_hevc_pic_v1_s
+{
+    // New fields
+    //hevc main10 444 extensions
+    nvdec_hevc_main10_444_ext_s hevc_main10_444_ext;
+
+    //HEVC skip bytes from beginning setting for secure
+    //it is different to the sw_hdr_skip_length who skips the middle of stream of
+    //the slice header which is parsed by driver
+    unsigned int   sw_skip_start_length : 14;
+    unsigned int   external_ref_mem_dis :  1;
+    unsigned int   error_recovery_start_pos :  2;       //0: from start of frame, 1: from start of slice segment, 2: from error detected ctb, 3: reserved
+    unsigned int   error_external_mv_en :  1;
+    unsigned int   reserved0            : 14;
+    // Reserved bits padding
+} nvdec_hevc_pic_v1_s;
+
+//No versioning in structure: NVDEC2 (T210 and GM206)
+//version v1 : NVDEC3 (T186 and GP100)
+//version v2 : NVDEC3.1 (GP10x)
+
+typedef struct _nvdec_hevc_pic_v2_s
+{
+    // mv-hevc field
+    unsigned  int  mv_hevc_enable                     :1;
+    unsigned  int  nuh_layer_id                       :6;
+    unsigned  int  default_ref_layers_active_flag     :1;
+    unsigned  int  NumDirectRefLayers                 :6;
+    unsigned  int  max_one_active_ref_layer_flag      :1;
+    unsigned  int  NumActiveRefLayerPics              :6;
+    unsigned  int  poc_lsb_not_present_flag           :1;
+    unsigned  int  reserved0                          :10;
+} nvdec_hevc_pic_v2_s;
+
+typedef struct _nvdec_hevc_pic_v3_s
+{
+    // slice level decoding
+    unsigned  int  slice_decoding_enable:1;//1: enable slice level decoding
+    unsigned  int  slice_ec_enable:1;      //1: enable slice error concealment. When slice_ec_enable=1,slice_decoding_enable must be 1;
+    unsigned  int  slice_ec_mv_type:2;     //0: zero mv; 1: co-located mv; 2: external mv;
+    unsigned  int  err_detected_sw:1;      //1: indicate sw/driver has detected error already in frame kick mode
+    unsigned  int  slice_ec_slice_type:2;  //0: B slice; 1: P slice ; others: reserved
+    unsigned  int  slice_strm_recfg_en:1;  //enable slice bitstream re-configure or not ;
+    unsigned  int  reserved:24;
+    unsigned  int  HevcSliceEdgeOffset;// slice edge buffer offset which repsect to filter buffer ,256 bytes as one unit
+}nvdec_hevc_pic_v3_s;
+
+typedef struct _nvdec_hevc_pic_s
+{
+    //The key/IV addr must be 128bit alignment
+    unsigned int   wrapped_session_key[4];                      //session keys
+    unsigned int   wrapped_content_key[4];                      //content keys
+    unsigned int   initialization_vector[4];                    //Ctrl64 initial vector
+    // hevc_bitstream_data_info
+    unsigned int   stream_len;                                  // stream length in one frame
+    unsigned int   enable_encryption;                           // flag to enable/disable encryption
+    unsigned int   key_increment   : 6;                           // added to content key after unwrapping
+    unsigned int   encryption_mode : 4;
+    unsigned int   key_slot_index  : 4;
+    unsigned int   ssm_en          : 1;
+    unsigned int   enable_histogram  : 1;                       // histogram stats output enable
+    unsigned int   enable_substream_decoding: 1;            //frame substream kickoff without context switch
+    unsigned int   reserved0       :15;
+
+    // Driver may or may not use based upon need.
+    // If 0 then default value of 1<<27 = 298ms @ 450MHz will be used in ucode.
+    // Driver can send this value based upon resolution using the formula:
+    // gptimer_timeout_value = 3 * (cycles required for one frame)
+    unsigned int gptimer_timeout_value;
+
+    // general
+    unsigned char tileformat                 : 2 ;   // 0: TBL; 1: KBL; 2: Tile16x16
+    unsigned char gob_height                 : 3 ;   // Set GOB height, 0: GOB_2, 1: GOB_4, 2: GOB_8, 3: GOB_16, 4: GOB_32 (NVDEC3 onwards)
+    unsigned char reserverd_surface_format   : 3 ;
+    unsigned char sw_start_code_e;                             // 0: stream doesn't contain start codes,1: stream contains start codes
+    unsigned char disp_output_mode;                            // 0: Rec.709 8 bit, 1: Rec.709 10 bit, 2: Rec.709 10 bits -> 8 bit, 3: Rec.2020 10 bit -> 8 bit
+    unsigned char reserved1;
+    unsigned int  framestride[2];                              // frame buffer stride for luma and chroma
+    unsigned int  colMvBuffersize;                             // collocated MV buffer size of one picture ,256 bytes unit
+    unsigned int  HevcSaoBufferOffset;                         // sao buffer offset respect to filter buffer ,256 bytes unit .
+    unsigned int  HevcBsdCtrlOffset;                           // bsd buffer offset respect to filter buffer ,256 bytes unit .
+    // sps
+    unsigned short pic_width_in_luma_samples;                      // :15, 48(?)..16384, multiple of 8 (48 is smallest width supported by NVDEC for CTU size 16x16)
+    unsigned short pic_height_in_luma_samples;                     // :15, 8..16384, multiple of 8
+    unsigned int chroma_format_idc                            : 4; // always 1 (=4:2:0)
+    unsigned int bit_depth_luma                               : 4; // 8..12
+    unsigned int bit_depth_chroma                             : 4;
+    unsigned int log2_min_luma_coding_block_size              : 4; // 3..6
+    unsigned int log2_max_luma_coding_block_size              : 4; // 3..6
+    unsigned int log2_min_transform_block_size                : 4; // 2..5
+    unsigned int log2_max_transform_block_size                : 4; // 2..5
+    unsigned int reserved2                                    : 4;
+
+    unsigned int max_transform_hierarchy_depth_inter          : 3; // 0..4
+    unsigned int max_transform_hierarchy_depth_intra          : 3; // 0..4
+    unsigned int scalingListEnable                            : 1; //
+    unsigned int amp_enable_flag                              : 1; //
+    unsigned int sample_adaptive_offset_enabled_flag          : 1; //
+    unsigned int pcm_enabled_flag                             : 1; //
+    unsigned int pcm_sample_bit_depth_luma                    : 4; //
+    unsigned int pcm_sample_bit_depth_chroma                  : 4;
+    unsigned int log2_min_pcm_luma_coding_block_size          : 4; //
+    unsigned int log2_max_pcm_luma_coding_block_size          : 4; //
+    unsigned int pcm_loop_filter_disabled_flag                : 1; //
+    unsigned int sps_temporal_mvp_enabled_flag                : 1; //
+    unsigned int strong_intra_smoothing_enabled_flag          : 1; //
+    unsigned int reserved3                                    : 3;
+    // pps
+    unsigned int dependent_slice_segments_enabled_flag        : 1; //
+    unsigned int output_flag_present_flag                     : 1; //
+    unsigned int num_extra_slice_header_bits                  : 3; //  0..7 (normally 0)
+    unsigned int sign_data_hiding_enabled_flag                : 1; //
+    unsigned int cabac_init_present_flag                      : 1; //
+    unsigned int num_ref_idx_l0_default_active                : 4; //  1..15
+    unsigned int num_ref_idx_l1_default_active                : 4; //  1..15
+    unsigned int init_qp                                      : 7; //  0..127, support higher bitdepth
+    unsigned int constrained_intra_pred_flag                  : 1; //
+    unsigned int transform_skip_enabled_flag                  : 1; //
+    unsigned int cu_qp_delta_enabled_flag                     : 1; //
+    unsigned int diff_cu_qp_delta_depth                       : 2; //  0..3
+    unsigned int reserved4                                    : 5; //
+
+    char         pps_cb_qp_offset                             ; //  -12..12
+    char         pps_cr_qp_offset                             ; //  -12..12
+    char         pps_beta_offset                              ; //  -12..12
+    char         pps_tc_offset                                ; //  -12..12
+    unsigned int pps_slice_chroma_qp_offsets_present_flag     : 1; //
+    unsigned int weighted_pred_flag                           : 1; //
+    unsigned int weighted_bipred_flag                         : 1; //
+    unsigned int transquant_bypass_enabled_flag               : 1; //
+    unsigned int tiles_enabled_flag                           : 1; // (redundant: = num_tile_columns_minus1!=0 || num_tile_rows_minus1!=0)
+    unsigned int entropy_coding_sync_enabled_flag             : 1; //
+    unsigned int num_tile_columns                             : 5; // 0..20
+    unsigned int num_tile_rows                                : 5; // 0..22
+    unsigned int loop_filter_across_tiles_enabled_flag        : 1; //
+    unsigned int loop_filter_across_slices_enabled_flag       : 1; //
+    unsigned int deblocking_filter_control_present_flag       : 1; //
+    unsigned int deblocking_filter_override_enabled_flag      : 1; //
+    unsigned int pps_deblocking_filter_disabled_flag          : 1; //
+    unsigned int lists_modification_present_flag              : 1; //
+    unsigned int log2_parallel_merge_level                    : 3; //  2..4
+    unsigned int slice_segment_header_extension_present_flag  : 1; // (normally 0)
+    unsigned int reserved5                                    : 6;
+
+    // reference picture related
+    unsigned char  num_ref_frames;
+    unsigned char  reserved6;
+    unsigned short longtermflag;                              // long term flag for refpiclist.bit 15 for picidx 0, bit 14 for picidx 1,...
+    unsigned char  initreflistidxl0[16];                           // :5, [refPicidx] 0..15
+    unsigned char  initreflistidxl1[16];                           // :5, [refPicidx] 0..15
+    short          RefDiffPicOrderCnts[16];                     // poc diff between current and reference pictures .[-128,127]
+    // misc
+    unsigned char  IDR_picture_flag;                            // idr flag for current picture
+    unsigned char  RAP_picture_flag;                            // rap flag for current picture
+    unsigned char  curr_pic_idx;                                // current  picture store buffer index,used to derive the store addess of frame buffer and MV
+    unsigned char  pattern_id;                                  // used for dithering to select between 2 tables
+    unsigned short sw_hdr_skip_length;                          // reference picture inititial related syntax elements(SE) bits in slice header.
+                                                                // those SE only decoding once in driver,related bits will flush in HW
+    unsigned short reserved7;
+
+    // used for ecdma debug
+    nvdec_ecdma_config_s  ecdma_cfg;
+
+    //DXVA on windows
+    unsigned int   separate_colour_plane_flag : 1;
+    unsigned int   log2_max_pic_order_cnt_lsb_minus4 : 4;    //0~12
+    unsigned int   num_short_term_ref_pic_sets : 7 ;  //0~64
+    unsigned int   num_long_term_ref_pics_sps :  6;  //0~32
+    unsigned int   bBitParsingDisable : 1 ; //disable parsing
+    unsigned int   num_delta_pocs_of_rps_idx : 8;
+    unsigned int   long_term_ref_pics_present_flag : 1;
+    unsigned int   reserved_dxva : 4;
+    //the number of bits for short_term_ref_pic_set()in slice header,dxva API
+    unsigned int   num_bits_short_term_ref_pics_in_slice;
+
+    // New additions
+    nvdec_hevc_pic_v1_s v1;
+    nvdec_hevc_pic_v2_s v2;
+    nvdec_hevc_pic_v3_s v3;
+    nvdec_pass2_otf_ext_s ssm;
+
+} nvdec_hevc_pic_s;
+
+//hevc slice info class
+typedef struct _hevc_slice_info_s {
+    unsigned int   first_flag    :1;//first slice(s) of frame,must valid for slice EC
+    unsigned int   err_flag      :1;//error slice(s) .optional info for EC
+    unsigned int   last_flag     :1;//last slice segment(s) of frame,this bit is must be valid when slice_strm_recfg_en==1 or slice_ec==1
+    unsigned int   conceal_partial_slice :1; // indicate do partial slice error conealment for packet loss case
+    unsigned int   available     :1; // indicate the slice bitstream is available.
+    unsigned int   reserved0     :7;
+    unsigned int   ctb_count     :20;// ctbs counter inside slice(s) .must valid for slice EC
+    unsigned int   bs_offset; //slice(s) bitstream offset in bitstream buffer (in byte unit)
+    unsigned int   bs_length; //slice(s) bitstream length. It is sum of aligned size and skip size and valid slice bitstream size.
+    unsigned short start_ctbx; //slice start ctbx ,it's optional,HW can output it in previous slice decoding.
+                                //but this is one check points for error
+    unsigned short start_ctby; //slice start ctby
+ } hevc_slice_info_s;
+
+
+//hevc slice ctx class
+//slice pos and next slice address
+typedef struct  _slice_edge_ctb_pos_ctx_s {
+    unsigned int    next_slice_pos_ctbxy;         //2d address in raster scan
+    unsigned int    next_slice_segment_addr;      //1d address in  tile scan
+}slice_edge_ctb_pos_ctx_s;
+
+//  next slice's first ctb located tile related information
+typedef struct  _slice_edge_tile_ctx_s {
+    unsigned int    tileInfo1;// Misc tile info includes tile width and tile height and tile col and tile row
+    unsigned int    tileInfo2;// Misc tile info includes tile start ctbx and start ctby and tile index
+    unsigned int    tileInfo3;// Misc tile info includes  ctb pos inside tile
+} slice_edge_tile_ctx_s;
+
+//frame level stats
+typedef struct  _slice_edge_stats_ctx_s {
+    unsigned int    frame_status_intra_cnt;// frame stats for intra block count
+    unsigned int    frame_status_inter_cnt;// frame stats for inter block count
+    unsigned int    frame_status_skip_cnt;// frame stats for skip block count
+    unsigned int    frame_status_fwd_mvx_cnt;// frame stats for sum of  abs fwd mvx
+    unsigned int    frame_status_fwd_mvy_cnt;// frame stats for sum of  abs fwd mvy
+    unsigned int    frame_status_bwd_mvx_cnt;// frame stats for sum of  abs bwd mvx
+    unsigned int    frame_status_bwd_mvy_cnt;// frame stats for sum of  abs bwd mvy
+    unsigned int    frame_status_mv_cnt_ext;// extension bits of  sum of abs mv to keep full precision.
+}slice_edge_stats_ctx_s;
+
+//ctx of vpc_edge unit for tile left
+typedef struct  _slice_vpc_edge_ctx_s {
+    unsigned int   reserved;
+}slice_vpc_edge_ctx_s;
+
+//ctx of vpc_main unit
+typedef struct  _slice_vpc_main_ctx_s {
+    unsigned int   reserved;
+} slice_vpc_main_ctx_s;
+
+//hevc slice edge ctx class
+typedef struct  _slice_edge_ctx_s {
+    //ctb pos
+    slice_edge_ctb_pos_ctx_s  slice_ctb_pos_ctx;
+    // stats
+    slice_edge_stats_ctx_s slice_stats_ctx;
+    // tile info
+    slice_edge_tile_ctx_s    slice_tile_ctx;
+    //vpc_edge
+    slice_vpc_edge_ctx_s  slice_vpc_edge_ctx;
+    //vpc_main
+    slice_vpc_main_ctx_s  slice_vpc_main_ctx;
+} slice_edge_ctx_s;
+
+//vp9
+
+typedef struct _nvdec_vp9_pic_v1_s
+{
+    // New fields
+    // new_var : xx; // for variables with expanded bitlength, comment on why the new bit legth is required
+    // Reserved bits for padding and/or non-HW specific functionality
+    unsigned int   Vp9FltAboveOffset;  // filter above offset respect to filter buffer, 256 bytes unit
+    unsigned int   external_ref_mem_dis :  1;
+    unsigned int   bit_depth            :  4;
+    unsigned int   error_recovery_start_pos :  2;       //0: from start of frame, 1: from start of slice segment, 2: from error detected ctb, 3: reserved
+    unsigned int   error_external_mv_en :  1;
+    unsigned int   Reserved0            : 24;
+} nvdec_vp9_pic_v1_s;
+
+enum VP9_FRAME_SFC_ID
+{
+    VP9_LAST_FRAME_SFC = 0,
+    VP9_GOLDEN_FRAME_SFC,
+    VP9_ALTREF_FRAME_SFC,
+    VP9_CURR_FRAME_SFC
+};
+
+typedef struct _nvdec_vp9_pic_s
+{
+    // vp9_bitstream_data_info
+    //Key and IV address must 128bit alignment
+    unsigned int   wrapped_session_key[4];                      //session keys
+    unsigned int   wrapped_content_key[4];                      //content keys
+    unsigned int   initialization_vector[4];                    //Ctrl64 initial vector
+    unsigned int   stream_len;                                  // stream length in one frame
+    unsigned int   enable_encryption;                           // flag to enable/disable encryption
+    unsigned int   key_increment      : 6;                      // added to content key after unwrapping
+    unsigned int   encryption_mode    : 4;
+    unsigned int   sw_hdr_skip_length :14;                      //vp9 skip bytes setting for secure
+    unsigned int   key_slot_index     : 4;
+    unsigned int   ssm_en             : 1;
+    unsigned int   enable_histogram   : 1;                      // histogram stats output enable
+    unsigned int   reserved0          : 2;
+
+    // Driver may or may not use based upon need.
+    // If 0 then default value of 1<<27 = 298ms @ 450MHz will be used in ucode.
+    // Driver can send this value based upon resolution using the formula:
+    // gptimer_timeout_value = 3 * (cycles required for one frame)
+    unsigned int gptimer_timeout_value;
+
+    //general
+    unsigned char  tileformat                 : 2 ;   // 0: TBL; 1: KBL; 2: Tile16x16
+    unsigned char  gob_height                 : 3 ;   // Set GOB height, 0: GOB_2, 1: GOB_4, 2: GOB_8, 3: GOB_16, 4: GOB_32 (NVDEC3 onwards)
+    unsigned char  reserverd_surface_format   : 3 ;
+    unsigned char  reserved1[3];
+    unsigned int   Vp9BsdCtrlOffset;                           // bsd buffer offset respect to filter buffer ,256 bytes unit .
+
+
+    //ref_last dimensions
+    unsigned short  ref0_width;    //ref_last coded width
+    unsigned short  ref0_height;   //ref_last coded height
+    unsigned short  ref0_stride[2];    //ref_last stride
+
+    //ref_golden dimensions
+    unsigned short  ref1_width;    //ref_golden coded width
+    unsigned short  ref1_height;   //ref_golden coded height
+    unsigned short  ref1_stride[2];    //ref_golden stride
+
+    //ref_alt dimensions
+    unsigned short  ref2_width;    //ref_alt coded width
+    unsigned short  ref2_height;   //ref_alt coded height
+    unsigned short  ref2_stride[2];    //ref_alt stride
+
+
+    /* Current frame dimensions */
+    unsigned short  width;    //pic width
+    unsigned short  height;   //pic height
+    unsigned short  framestride[2];   // frame buffer stride for luma and chroma
+
+    unsigned char   keyFrame  :1;
+    unsigned char   prevIsKeyFrame:1;
+    unsigned char   resolutionChange:1;
+    unsigned char   errorResilient:1;
+    unsigned char   prevShowFrame:1;
+    unsigned char   intraOnly:1;
+    unsigned char   reserved2 : 2;
+
+    /* DCT coefficient partitions */
+    //unsigned int    offsetToDctParts;
+
+    unsigned char   reserved3[3];
+    //unsigned char   activeRefIdx[3];//3 bits
+    //unsigned char   refreshFrameFlags;
+    //unsigned char   refreshEntropyProbs;
+    //unsigned char   frameParallelDecoding;
+    //unsigned char   resetFrameContext;
+
+    unsigned char   refFrameSignBias[4];
+    char            loopFilterLevel;//6 bits
+    char            loopFilterSharpness;//3 bits
+
+    /* Quantization parameters */
+    unsigned char   qpYAc;
+    char            qpYDc;
+    char            qpChAc;
+    char            qpChDc;
+
+    /* From here down, frame-to-frame persisting stuff */
+
+    char            lossless;
+    char            transform_mode;
+    char            allow_high_precision_mv;
+    char            mcomp_filter_type;
+    char            comp_pred_mode;
+    char            comp_fixed_ref;
+    char            comp_var_ref[2];
+    char            log2_tile_columns;
+    char            log2_tile_rows;
+
+    /* Segment and macroblock specific values */
+    unsigned char   segmentEnabled;
+    unsigned char   segmentMapUpdate;
+    unsigned char   segmentMapTemporalUpdate;
+    unsigned char   segmentFeatureMode; /* ABS data or delta data */
+    unsigned char   segmentFeatureEnable[8][4];
+    short           segmentFeatureData[8][4];
+    char            modeRefLfEnabled;
+    char            mbRefLfDelta[4];
+    char            mbModeLfDelta[2];
+    char            reserved5;            // for alignment
+
+    // New additions
+    nvdec_vp9_pic_v1_s v1;
+    nvdec_pass2_otf_ext_s ssm;
+
+} nvdec_vp9_pic_s;
+
+#define NVDEC_VP9HWPAD(x, y) unsigned char x[y]
+
+typedef struct {
+    /* last bytes of address 41 */
+    unsigned char joints[3];
+    unsigned char sign[2];
+    /* address 42 */
+    unsigned char class0[2][1];
+    unsigned char fp[2][3];
+    unsigned char class0_hp[2];
+    unsigned char hp[2];
+    unsigned char classes[2][10];
+    /* address 43 */
+    unsigned char class0_fp[2][2][3];
+    unsigned char bits[2][10];
+
+} nvdec_nmv_context;
+
+typedef struct {
+    unsigned int joints[4];
+    unsigned int sign[2][2];
+    unsigned int classes[2][11];
+    unsigned int class0[2][2];
+    unsigned int bits[2][10][2];
+    unsigned int class0_fp[2][2][4];
+    unsigned int fp[2][4];
+    unsigned int class0_hp[2][2];
+    unsigned int hp[2][2];
+
+} nvdec_nmv_context_counts;
+
+/* Adaptive entropy contexts, padding elements are added to have
+ * 256 bit aligned tables for HW access.
+ * Compile with TRACE_PROB_TABLES to print bases for each table. */
+typedef struct nvdec_vp9AdaptiveEntropyProbs_s
+{
+    /* address 32 */
+    unsigned char inter_mode_prob[7][4];
+    unsigned char intra_inter_prob[4];
+
+    /* address 33 */
+    unsigned char uv_mode_prob[10][8];
+    unsigned char tx8x8_prob[2][1];
+    unsigned char tx16x16_prob[2][2];
+    unsigned char tx32x32_prob[2][3];
+    unsigned char sb_ymode_probB[4][1];
+    unsigned char sb_ymode_prob[4][8];
+
+    /* address 37 */
+    unsigned char partition_prob[2][16][4];
+
+    /* address 41 */
+    unsigned char uv_mode_probB[10][1];
+    unsigned char switchable_interp_prob[4][2];
+    unsigned char comp_inter_prob[5];
+    unsigned char mbskip_probs[3];
+    NVDEC_VP9HWPAD(pad1, 1);
+
+    nvdec_nmv_context nmvc;
+
+    /* address 44 */
+    unsigned char single_ref_prob[5][2];
+    unsigned char comp_ref_prob[5];
+    NVDEC_VP9HWPAD(pad2, 17);
+
+    /* address 45 */
+    unsigned char probCoeffs[2][2][6][6][4];
+    unsigned char probCoeffs8x8[2][2][6][6][4];
+    unsigned char probCoeffs16x16[2][2][6][6][4];
+    unsigned char probCoeffs32x32[2][2][6][6][4];
+
+} nvdec_vp9AdaptiveEntropyProbs_t;
+
+/* Entropy contexts */
+typedef struct nvdec_vp9EntropyProbs_s
+{
+    /* Default keyframe probs */
+    /* Table formatted for 256b memory, probs 0to7 for all tables followed by
+     * probs 8toN for all tables.
+     * Compile with TRACE_PROB_TABLES to print bases for each table. */
+
+    unsigned char kf_bmode_prob[10][10][8];
+
+    /* Address 25 */
+    unsigned char kf_bmode_probB[10][10][1];
+    unsigned char ref_pred_probs[3];
+    unsigned char mb_segment_tree_probs[7];
+    unsigned char segment_pred_probs[3];
+    unsigned char ref_scores[4];
+    unsigned char prob_comppred[2];
+    NVDEC_VP9HWPAD(pad1, 9);
+
+    /* Address 29 */
+    unsigned char kf_uv_mode_prob[10][8];
+    unsigned char kf_uv_mode_probB[10][1];
+    NVDEC_VP9HWPAD(pad2, 6);
+
+    nvdec_vp9AdaptiveEntropyProbs_t a;    /* Probs with backward adaptation */
+
+} nvdec_vp9EntropyProbs_t;
+
+/* Counters for adaptive entropy contexts */
+typedef struct nvdec_vp9EntropyCounts_s
+{
+    unsigned int inter_mode_counts[7][3][2];
+    unsigned int sb_ymode_counts[4][10];
+    unsigned int uv_mode_counts[10][10];
+    unsigned int partition_counts[16][4];
+    unsigned int switchable_interp_counts[4][3];
+    unsigned int intra_inter_count[4][2];
+    unsigned int comp_inter_count[5][2];
+    unsigned int single_ref_count[5][2][2];
+    unsigned int comp_ref_count[5][2];
+    unsigned int tx32x32_count[2][4];
+    unsigned int tx16x16_count[2][3];
+    unsigned int tx8x8_count[2][2];
+    unsigned int mbskip_count[3][2];
+
+    nvdec_nmv_context_counts nmvcount;
+
+    unsigned int countCoeffs[2][2][6][6][4];
+    unsigned int countCoeffs8x8[2][2][6][6][4];
+    unsigned int countCoeffs16x16[2][2][6][6][4];
+    unsigned int countCoeffs32x32[2][2][6][6][4];
+
+    unsigned int countEobs[4][2][2][6][6];
+
+} nvdec_vp9EntropyCounts_t;
+
+// Legacy codecs encryption parameters
+typedef struct _nvdec_pass2_otf_s {
+    unsigned int   wrapped_session_key[4];  // session keys
+    unsigned int   wrapped_content_key[4];  // content keys
+    unsigned int   initialization_vector[4];// Ctrl64 initial vector
+    unsigned int   enable_encryption : 1;   // flag to enable/disable encryption
+    unsigned int   key_increment     : 6;   // added to content key after unwrapping
+    unsigned int   encryption_mode   : 4;
+    unsigned int   key_slot_index    : 4;
+    unsigned int   ssm_en            : 1;
+    unsigned int   reserved1         :16;   // reserved
+} nvdec_pass2_otf_s; // 0x10 bytes
+
+typedef struct _nvdec_display_param_s
+{
+    unsigned int enableTFOutput    : 1; //=1, enable dbfdma to output the display surface; if disable, then the following configure on tf is useless.
+    //remap for VC1
+    unsigned int VC1MapYFlag       : 1;
+    unsigned int MapYValue         : 3;
+    unsigned int VC1MapUVFlag      : 1;
+    unsigned int MapUVValue        : 3;
+    //tf
+    unsigned int OutStride         : 8;
+    unsigned int TilingFormat      : 3;
+    unsigned int OutputStructure   : 1; //(0=frame, 1=field)
+    unsigned int reserved0         :11;
+    int OutputTop[2];                   // in units of 256
+    int OutputBottom[2];                // in units of 256
+    //histogram
+    unsigned int enableHistogram   : 1; // enable histogram info collection.
+    unsigned int HistogramStartX   :12; // start X of Histogram window
+    unsigned int HistogramStartY   :12; // start Y of Histogram window
+    unsigned int reserved1         : 7;
+    unsigned int HistogramEndX     :12; // end X of Histogram window
+    unsigned int HistogramEndY     :12; // end y of Histogram window
+    unsigned int reserved2         : 8;
+} nvdec_display_param_s;  // size 0x1c bytes
+
+// H.264
+typedef struct _nvdec_dpb_entry_s  // 16 bytes
+{
+    unsigned int index          : 7;    // uncompressed frame buffer index
+    unsigned int col_idx        : 5;    // index of associated co-located motion data buffer
+    unsigned int state          : 2;    // bit1(state)=1: top field used for reference, bit1(state)=1: bottom field used for reference
+    unsigned int is_long_term   : 1;    // 0=short-term, 1=long-term
+    unsigned int not_existing   : 1;    // 1=marked as non-existing
+    unsigned int is_field       : 1;    // set if unpaired field or complementary field pair
+    unsigned int top_field_marking : 4;
+    unsigned int bottom_field_marking : 4;
+    unsigned int output_memory_layout : 1;  // Set according to picture level output NV12/NV24 setting.
+    unsigned int reserved       : 6;
+    unsigned int FieldOrderCnt[2];      // : 2*32 [top/bottom]
+    int FrameIdx;                       // : 16   short-term: FrameNum (16 bits), long-term: LongTermFrameIdx (4 bits)
+} nvdec_dpb_entry_s;
+
+typedef struct _nvdec_h264_pic_s
+{
+    nvdec_pass2_otf_s encryption_params;
+    unsigned char eos[16];
+    unsigned char explicitEOSPresentFlag;
+    unsigned char hint_dump_en; //enable COLOMV surface dump for all frames, which includes hints of "MV/REFIDX/QP/CBP/MBPART/MBTYPE", nvbug: 200212874
+    unsigned char reserved0[2];
+    unsigned int stream_len;
+    unsigned int slice_count;
+    unsigned int mbhist_buffer_size;     // to pass buffer size of MBHIST_BUFFER
+
+    // Driver may or may not use based upon need.
+    // If 0 then default value of 1<<27 = 298ms @ 450MHz will be used in ucode.
+    // Driver can send this value based upon resolution using the formula:
+    // gptimer_timeout_value = 3 * (cycles required for one frame)
+    unsigned int gptimer_timeout_value;
+
+    // Fields from msvld_h264_seq_s
+    int log2_max_pic_order_cnt_lsb_minus4;
+    int delta_pic_order_always_zero_flag;
+    int frame_mbs_only_flag;
+    int PicWidthInMbs;
+    int FrameHeightInMbs;
+
+    unsigned int tileFormat                 : 2 ;   // 0: TBL; 1: KBL; 2: Tile16x16
+    unsigned int gob_height                 : 3 ;   // Set GOB height, 0: GOB_2, 1: GOB_4, 2: GOB_8, 3: GOB_16, 4: GOB_32 (NVDEC3 onwards)
+    unsigned int reserverd_surface_format   : 27;
+
+    // Fields from msvld_h264_pic_s
+    int entropy_coding_mode_flag;
+    int pic_order_present_flag;
+    int num_ref_idx_l0_active_minus1;
+    int num_ref_idx_l1_active_minus1;
+    int deblocking_filter_control_present_flag;
+    int redundant_pic_cnt_present_flag;
+    int transform_8x8_mode_flag;
+
+    // Fields from mspdec_h264_picture_setup_s
+    unsigned int pitch_luma;                    // Luma pitch
+    unsigned int pitch_chroma;                  // chroma pitch
+
+    unsigned int luma_top_offset;               // offset of luma top field in units of 256
+    unsigned int luma_bot_offset;               // offset of luma bottom field in units of 256
+    unsigned int luma_frame_offset;             // offset of luma frame in units of 256
+    unsigned int chroma_top_offset;             // offset of chroma top field in units of 256
+    unsigned int chroma_bot_offset;             // offset of chroma bottom field in units of 256
+    unsigned int chroma_frame_offset;           // offset of chroma frame in units of 256
+    unsigned int HistBufferSize;                // in units of 256
+
+    unsigned int MbaffFrameFlag           : 1;  //
+    unsigned int direct_8x8_inference_flag: 1;  //
+    unsigned int weighted_pred_flag       : 1;  //
+    unsigned int constrained_intra_pred_flag:1; //
+    unsigned int ref_pic_flag             : 1;  // reference picture (nal_ref_idc != 0)
+    unsigned int field_pic_flag           : 1;  //
+    unsigned int bottom_field_flag        : 1;  //
+    unsigned int second_field             : 1;  // second field of complementary reference field
+    unsigned int log2_max_frame_num_minus4: 4;  //  (0..12)
+    unsigned int chroma_format_idc        : 2;  //
+    unsigned int pic_order_cnt_type       : 2;  //  (0..2)
+    int pic_init_qp_minus26               : 6;  // : 6 (-26..+25)
+    int chroma_qp_index_offset            : 5;  // : 5 (-12..+12)
+    int second_chroma_qp_index_offset     : 5;  // : 5 (-12..+12)
+
+    unsigned int weighted_bipred_idc      : 2;  // : 2 (0..2)
+    unsigned int CurrPicIdx               : 7;  // : 7  uncompressed frame buffer index
+    unsigned int CurrColIdx               : 5;  // : 5  index of associated co-located motion data buffer
+    unsigned int frame_num                : 16; //
+    unsigned int frame_surfaces           : 1;  // frame surfaces flag
+    unsigned int output_memory_layout     : 1;  // 0: NV12; 1:NV24. Field pair must use the same setting.
+
+    int CurrFieldOrderCnt[2];                   // : 32 [Top_Bottom], [0]=TopFieldOrderCnt, [1]=BottomFieldOrderCnt
+    nvdec_dpb_entry_s dpb[16];
+    unsigned char WeightScale[6][4][4];         // : 6*4*4*8 in raster scan order (not zig-zag order)
+    unsigned char WeightScale8x8[2][8][8];      // : 2*8*8*8 in raster scan order (not zig-zag order)
+
+    // mvc setup info, must be zero if not mvc
+    unsigned char num_inter_view_refs_lX[2];         // number of inter-view references
+    char reserved1[14];                               // reserved for alignment
+    signed char inter_view_refidx_lX[2][16];         // DPB indices (must also be marked as long-term)
+
+    // lossless decode (At the time of writing this manual, x264 and JM encoders, differ in Intra_8x8 reference sample filtering)
+    unsigned int lossless_ipred8x8_filter_enable        : 1;       // = 0, skips Intra_8x8 reference sample filtering, for vertical and horizontal predictions (x264 encoded streams); = 1, filter Intra_8x8 reference samples (JM encoded streams)
+    unsigned int qpprime_y_zero_transform_bypass_flag   : 1;       // determines the transform bypass mode
+    unsigned int reserved2                              : 30;      // kept for alignment; may be used for other parameters
+
+    nvdec_display_param_s displayPara;
+    nvdec_pass2_otf_ext_s ssm;
+
+} nvdec_h264_pic_s;
+
+// VC-1 Scratch buffer
+typedef enum _vc1_fcm_e
+{
+    FCM_PROGRESSIVE = 0,
+    FCM_FRAME_INTERLACE = 2,
+    FCM_FIELD_INTERLACE = 3
+} vc1_fcm_e;
+
+typedef enum _syntax_vc1_ptype_e
+{
+    PTYPE_I       = 0,
+    PTYPE_P       = 1,
+    PTYPE_B       = 2,
+    PTYPE_BI      = 3, //PTYPE_BI is not used to config register NV_CNVDEC_VLD_PIC_INFO_COMMON. field NV_CNVDEC_VLD_PIC_INFO_COMMON_PIC_CODING_VC1 is only 2 bits. I and BI pictures are configured with same value. Please refer to manual.
+    PTYPE_SKIPPED = 4
+} syntax_vc1_ptype_e;
+
+// 7.1.1.32, Table 46 etc.
+enum vc1_mvmode_e
+{
+    MVMODE_MIXEDMV                = 0,
+    MVMODE_1MV                    = 1,
+    MVMODE_1MV_HALFPEL            = 2,
+    MVMODE_1MV_HALFPEL_BILINEAR   = 3,
+    MVMODE_INTENSITY_COMPENSATION = 4
+};
+
+// 9.1.1.42, Table 105
+typedef enum _vc1_fptype_e
+{
+    FPTYPE_I_I = 0,
+    FPTYPE_I_P,
+    FPTYPE_P_I,
+    FPTYPE_P_P,
+    FPTYPE_B_B,
+    FPTYPE_B_BI,
+    FPTYPE_BI_B,
+    FPTYPE_BI_BI
+} vc1_fptype_e;
+
+// Table 43 (7.1.1.31.2)
+typedef enum _vc1_dqprofile_e
+{
+    DQPROFILE_ALL_FOUR_EDGES  = 0,
+    DQPROFILE_DOUBLE_EDGE     = 1,
+    DQPROFILE_SINGLE_EDGE     = 2,
+    DQPROFILE_ALL_MACROBLOCKS = 3
+} vc1_dqprofile_e;
+
+typedef struct _nvdec_vc1_pic_s
+{
+    nvdec_pass2_otf_s encryption_params;
+    unsigned char eos[16];                    // to pass end of stream data separately if not present in bitstream surface
+    unsigned char prefixStartCode[4];         // used for dxva to pass prefix start code.
+    unsigned int  bitstream_offset;           // offset in words from start of bitstream surface if there is gap.
+    unsigned char explicitEOSPresentFlag;     // to indicate that eos[] is used for passing end of stream data.
+    unsigned char reserved0[3];
+    unsigned int stream_len;
+    unsigned int slice_count;
+    unsigned int scratch_pic_buffer_size;
+
+    // Driver may or may not use based upon need.
+    // If 0 then default value of 1<<27 = 298ms @ 450MHz will be used in ucode.
+    // Driver can send this value based upon resolution using the formula:
+    // gptimer_timeout_value = 3 * (cycles required for one frame)
+    unsigned int gptimer_timeout_value;
+
+    // Fields from vc1_seq_s
+    unsigned short FrameWidth;     // actual frame width
+    unsigned short FrameHeight;    // actual frame height
+
+    unsigned char profile;        // 1 = SIMPLE or MAIN, 2 = ADVANCED
+    unsigned char postprocflag;
+    unsigned char pulldown;
+    unsigned char interlace;
+
+    unsigned char tfcntrflag;
+    unsigned char finterpflag;
+    unsigned char psf;
+    unsigned char tileFormat                 : 2 ;   // 0: TBL; 1: KBL; 2: Tile16x16
+    unsigned char gob_height                 : 3 ;   // Set GOB height, 0: GOB_2, 1: GOB_4, 2: GOB_8, 3: GOB_16, 4: GOB_32 (NVDEC3 onwards)
+    unsigned char reserverd_surface_format   : 3 ;
+
+    // simple,main
+    unsigned char multires;
+    unsigned char syncmarker;
+    unsigned char rangered;
+    unsigned char maxbframes;
+
+    // Fields from vc1_entrypoint_s
+    unsigned char dquant;
+    unsigned char panscan_flag;
+    unsigned char refdist_flag;
+    unsigned char quantizer;
+
+    unsigned char extended_mv;
+    unsigned char extended_dmv;
+    unsigned char overlap;
+    unsigned char vstransform;
+
+    // Fields from vc1_scratch_s
+    char refdist;
+    char reserved1[3];               // for alignment
+
+    // Fields from vld_vc1_pic_s
+    vc1_fcm_e fcm;
+    syntax_vc1_ptype_e ptype;
+    int tfcntr;
+    int rptfrm;
+    int tff;
+    int rndctrl;
+    int pqindex;
+    int halfqp;
+    int pquantizer;
+    int postproc;
+    int condover;
+    int transacfrm;
+    int transacfrm2;
+    int transdctab;
+    int pqdiff;
+    int abspq;
+    int dquantfrm;
+    vc1_dqprofile_e dqprofile;
+    int dqsbedge;
+    int dqdbedge;
+    int dqbilevel;
+    int mvrange;
+    enum vc1_mvmode_e mvmode;
+    enum vc1_mvmode_e mvmode2;
+    int lumscale;
+    int lumshift;
+    int mvtab;
+    int cbptab;
+    int ttmbf;
+    int ttfrm;
+    int bfraction;
+    vc1_fptype_e fptype;
+    int numref;
+    int reffield;
+    int dmvrange;
+    int intcompfield;
+    int lumscale1;  //  type was char in ucode
+    int lumshift1;  //  type was char in ucode
+    int lumscale2;  //  type was char in ucode
+    int lumshift2;  //  type was char in ucode
+    int mbmodetab;
+    int imvtab;
+    int icbptab;
+    int fourmvbptab;
+    int fourmvswitch;
+    int intcomp;
+    int twomvbptab;
+    // simple,main
+    int rangeredfrm;
+
+    // Fields from pdec_vc1_pic_s
+    unsigned int   HistBufferSize;                  // in units of 256
+    // frame buffers
+    unsigned int   FrameStride[2];                  // [y_c]
+    unsigned int   luma_top_offset;                 // offset of luma top field in units of 256
+    unsigned int   luma_bot_offset;                 // offset of luma bottom field in units of 256
+    unsigned int   luma_frame_offset;               // offset of luma frame in units of 256
+    unsigned int   chroma_top_offset;               // offset of chroma top field in units of 256
+    unsigned int   chroma_bot_offset;               // offset of chroma bottom field in units of 256
+    unsigned int   chroma_frame_offset;             // offset of chroma frame in units of 256
+
+    unsigned short CodedWidth;                      // entrypoint specific
+    unsigned short CodedHeight;                     // entrypoint specific
+
+    unsigned char  loopfilter;                      // entrypoint specific
+    unsigned char  fastuvmc;                        // entrypoint specific
+    unsigned char  output_memory_layout;            // picture specific
+    unsigned char  ref_memory_layout[2];            // picture specific 0: fwd, 1: bwd
+    unsigned char  reserved3[3];                    // for alignment
+
+    nvdec_display_param_s displayPara;
+    nvdec_pass2_otf_ext_s ssm;
+
+} nvdec_vc1_pic_s;
+
+// MPEG-2
+typedef struct _nvdec_mpeg2_pic_s
+{
+    nvdec_pass2_otf_s encryption_params;
+    unsigned char eos[16];
+    unsigned char explicitEOSPresentFlag;
+    unsigned char reserved0[3];
+    unsigned int stream_len;
+    unsigned int slice_count;
+
+    // Driver may or may not use based upon need.
+    // If 0 then default value of 1<<27 = 298ms @ 450MHz will be used in ucode.
+    // Driver can send this value based upon resolution using the formula:
+    // gptimer_timeout_value = 3 * (cycles required for one frame)
+    unsigned int gptimer_timeout_value;
+
+    // Fields from vld_mpeg2_seq_pic_info_s
+    short FrameWidth;                   // actual frame width
+    short FrameHeight;                  // actual frame height
+    unsigned char picture_structure;    // 0 => Reserved, 1 => Top field, 2 => Bottom field, 3 => Frame picture. Table 6-14.
+    unsigned char picture_coding_type;  // 0 => Forbidden, 1 => I, 2 => P, 3 => B, 4 => D (for MPEG-2). Table 6-12.
+    unsigned char intra_dc_precision;   // 0 => 8 bits, 1=> 9 bits, 2 => 10 bits, 3 => 11 bits. Table 6-13.
+    char frame_pred_frame_dct;          // as in section 6.3.10
+    char concealment_motion_vectors;    // as in section 6.3.10
+    char intra_vlc_format;              // as in section 6.3.10
+    unsigned char tileFormat                 : 2 ;   // 0: TBL; 1: KBL; 2: Tile16x16
+    unsigned char gob_height                 : 3 ;   // Set GOB height, 0: GOB_2, 1: GOB_4, 2: GOB_8, 3: GOB_16, 4: GOB_32 (NVDEC3 onwards)
+    unsigned char reserverd_surface_format   : 3 ;
+
+    char reserved1;                     // always 0
+    char f_code[4];                  // as in section 6.3.10
+
+    // Fields from pdec_mpeg2_picture_setup_s
+    unsigned short PicWidthInMbs;
+    unsigned short  FrameHeightInMbs;
+    unsigned int pitch_luma;
+    unsigned int pitch_chroma;
+    unsigned int luma_top_offset;
+    unsigned int luma_bot_offset;
+    unsigned int luma_frame_offset;
+    unsigned int chroma_top_offset;
+    unsigned int chroma_bot_offset;
+    unsigned int chroma_frame_offset;
+    unsigned int HistBufferSize;
+    unsigned short output_memory_layout;
+    unsigned short alternate_scan;
+    unsigned short secondfield;
+    /******************************/
+    // Got rid of the union kept for compatibility with NVDEC1.
+    // Removed field mpeg2, and kept rounding type.
+    // NVDEC1 ucode is not using the mpeg2 field, instead using codec type from the methods.
+    // Rounding type should only be set for Divx3.11.
+    unsigned short rounding_type;
+    /******************************/
+    unsigned int MbInfoSizeInBytes;
+    unsigned int q_scale_type;
+    unsigned int top_field_first;
+    unsigned int full_pel_fwd_vector;
+    unsigned int full_pel_bwd_vector;
+    unsigned char quant_mat_8x8intra[64];
+    unsigned char quant_mat_8x8nonintra[64];
+    unsigned int ref_memory_layout[2]; //0:for fwd; 1:for bwd
+
+    nvdec_display_param_s displayPara;
+    nvdec_pass2_otf_ext_s ssm;
+
+} nvdec_mpeg2_pic_s;
+
+// MPEG-4
+typedef struct _nvdec_mpeg4_pic_s
+{
+    nvdec_pass2_otf_s encryption_params;
+    unsigned char eos[16];
+    unsigned char explicitEOSPresentFlag;
+    unsigned char reserved2[3];     // for alignment
+    unsigned int stream_len;
+    unsigned int slice_count;
+    unsigned int scratch_pic_buffer_size;
+
+    // Driver may or may not use based upon need.
+    // If 0 then default value of 1<<27 = 298ms @ 450MHz will be used in ucode.
+    // Driver can send this value based upon resolution using the formula:
+    // gptimer_timeout_value = 3 * (cycles required for one frame)
+    unsigned int gptimer_timeout_value;
+
+    // Fields from vld_mpeg4_seq_s
+    short FrameWidth;                     // :13 video_object_layer_width
+    short FrameHeight;                    // :13 video_object_layer_height
+    char  vop_time_increment_bitcount;    // : 5 1..16
+    char  resync_marker_disable;          // : 1
+    unsigned char tileFormat                 : 2 ;   // 0: TBL; 1: KBL; 2: Tile16x16
+    unsigned char gob_height                 : 3 ;   // Set GOB height, 0: GOB_2, 1: GOB_4, 2: GOB_8, 3: GOB_16, 4: GOB_32 (NVDEC3 onwards)
+    unsigned char reserverd_surface_format   : 3 ;
+    char  reserved3;                      // for alignment
+
+    // Fields from pdec_mpeg4_picture_setup_s
+    int width;                              // : 13
+    int height;                             // : 13
+
+    unsigned int FrameStride[2];            // [y_c]
+    unsigned int luma_top_offset;           // offset of luma top field in units of 256
+    unsigned int luma_bot_offset;           // offset of luma bottom field in units of 256
+    unsigned int luma_frame_offset;         // offset of luma frame in units of 256
+    unsigned int chroma_top_offset;         // offset of chroma top field in units of 256
+    unsigned int chroma_bot_offset;         // offset of chroma bottom field in units of 256
+    unsigned int chroma_frame_offset;       // offset of chroma frame in units of 256
+
+    unsigned int HistBufferSize;            // in units of 256, History buffer size
+
+    int trd[2];                             // : 16, temporal reference frame distance (only needed for B-VOPs)
+    int trb[2];                             // : 16, temporal reference B-VOP distance from fwd reference frame (only needed for B-VOPs)
+
+    int divx_flags;                         // : 16 (bit 0: DivX interlaced chroma rounding, bit 1: Divx 4 boundary padding, bit 2: Divx IDCT)
+
+    short vop_fcode_forward;                // : 1...7
+    short vop_fcode_backward;               // : 1...7
+
+    unsigned char interlaced;               // : 1
+    unsigned char quant_type;               // : 1
+    unsigned char quarter_sample;           // : 1
+    unsigned char short_video_header;       // : 1
+
+    unsigned char curr_output_memory_layout; // : 1 0:NV12; 1:NV24
+    unsigned char ptype;                    // picture type: 0 for PTYPE_I, 1 for PTYPE_P, 2 for PTYPE_B, 3 for PTYPE_BI, 4 for PTYPE_SKIPPED
+    unsigned char rnd;                      // : 1, rounding mode
+    unsigned char alternate_vertical_scan_flag; // : 1
+
+    unsigned char top_field_flag;           // : 1
+    unsigned char reserved0[3];             // alignment purpose
+
+    unsigned char intra_quant_mat[64];      // : 64*8
+    unsigned char nonintra_quant_mat[64];   // : 64*8
+    unsigned char ref_memory_layout[2];    //0:for fwd; 1:for bwd
+    unsigned char reserved1[34];            // 256 byte alignemnt till now
+
+    nvdec_display_param_s displayPara;
+
+} nvdec_mpeg4_pic_s;
+
+// VP8
+enum VP8_FRAME_TYPE
+{
+    VP8_KEYFRAME = 0,
+    VP8_INTERFRAME = 1
+};
+
+enum VP8_FRAME_SFC_ID
+{
+    VP8_GOLDEN_FRAME_SFC = 0,
+    VP8_ALTREF_FRAME_SFC,
+    VP8_LAST_FRAME_SFC,
+    VP8_CURR_FRAME_SFC
+};
+
+typedef struct _nvdec_vp8_pic_s
+{
+    nvdec_pass2_otf_s encryption_params;
+
+    // Driver may or may not use based upon need.
+    // If 0 then default value of 1<<27 = 298ms @ 450MHz will be used in ucode.
+    // Driver can send this value based upon resolution using the formula:
+    // gptimer_timeout_value = 3 * (cycles required for one frame)
+    unsigned int gptimer_timeout_value;
+
+    unsigned short FrameWidth;     // actual frame width
+    unsigned short FrameHeight;    // actual frame height
+
+    unsigned char keyFrame;        // 1: key frame; 0: not
+    unsigned char version;
+    unsigned char tileFormat                 : 2 ;   // 0: TBL; 1: KBL; 2: Tile16x16
+    unsigned char gob_height                 : 3 ;   // Set GOB height, 0: GOB_2, 1: GOB_4, 2: GOB_8, 3: GOB_16, 4: GOB_32 (NVDEC3 onwards)
+    unsigned char reserverd_surface_format   : 3 ;
+    unsigned char errorConcealOn;  // 1: error conceal on; 0: off
+
+    unsigned int  firstPartSize;   // the size of first partition(frame header and mb header partition)
+
+    // ctx
+    unsigned int   HistBufferSize;                  // in units of 256
+    unsigned int   VLDBufferSize;                   // in units of 1
+    // current frame buffers
+    unsigned int   FrameStride[2];                  // [y_c]
+    unsigned int   luma_top_offset;                 // offset of luma top field in units of 256
+    unsigned int   luma_bot_offset;                 // offset of luma bottom field in units of 256
+    unsigned int   luma_frame_offset;               // offset of luma frame in units of 256
+    unsigned int   chroma_top_offset;               // offset of chroma top field in units of 256
+    unsigned int   chroma_bot_offset;               // offset of chroma bottom field in units of 256
+    unsigned int   chroma_frame_offset;             // offset of chroma frame in units of 256
+
+    nvdec_display_param_s displayPara;
+
+    // decode picture buffere related
+    char current_output_memory_layout;
+    char output_memory_layout[3];  // output NV12/NV24 setting. item 0:golden; 1: altref; 2: last
+
+    unsigned char segmentation_feature_data_update;
+    unsigned char reserved1[3];
+
+    // ucode return result
+    unsigned int resultValue;      // ucode return the picture header info; includes copy_buffer_to_golden etc.
+    unsigned int partition_offset[8];            // byte offset to each token partition (used for encrypted streams only)
+
+    nvdec_pass2_otf_ext_s ssm;
+
+} nvdec_vp8_pic_s; // size is 0xc0
+
+// PASS1
+
+//Sample means the entire frame is encrypted with a single IV, and subsample means a given frame may be encrypted in multiple chunks with different IVs.
+#define NUM_SUBSAMPLES      32
+
+typedef struct _bytes_of_data_s
+{
+    unsigned int    clear_bytes;                    // clear bytes per subsample
+    unsigned int    encypted_bytes;                 // encrypted bytes per subsample
+
+} bytes_of_data_s;
+
+typedef struct _nvdec_pass1_input_data_s
+{
+    bytes_of_data_s sample_size[NUM_SUBSAMPLES];    // clear/encrypted bytes per subsample
+    unsigned int    initialization_vector[NUM_SUBSAMPLES][4];   // Ctrl64 initial vector per subsample
+    unsigned char   IvValid[NUM_SUBSAMPLES];        // each element will tell whether IV is valid for that subsample or not.
+    unsigned int    stream_len;                     // encrypted bitstream size.
+    unsigned int    clearBufferSize;                // allocated size of clear buffer size
+    unsigned int    reencryptBufferSize;            // allocated size of reencrypted buffer size
+    unsigned int    vp8coeffPartitonBufferSize;     // allocated buffer for vp8 coeff partition buffer
+    unsigned int    PrevWidth;                        // required for VP9
+    unsigned int    num_nals        :16;            // number of subsamples in a frame
+    unsigned int    drm_mode        : 8;            // DRM mode
+    unsigned int    key_sel         : 4;            // key select from keyslot
+    unsigned int    codec           : 4;            // codecs selection
+    unsigned int    TotalSizeOfClearData;           // Used with Pattern based encryption
+    unsigned int    SliceHdrOffset;                 // This is used with pattern mode encryption where data before slice hdr comes in clear.
+    unsigned int    EncryptBlkCnt   :16;
+    unsigned int    SkipBlkCnt      :16;
+} nvdec_pass1_input_data_s;
+
+#define VP8_MAX_TOKEN_PARTITIONS     8
+#define VP9_MAX_FRAMES_IN_SUPERFRAME 8
+
+typedef struct _nvdec_pass1_output_data_s
+{
+    unsigned int    clear_header_size;              // h264/vc1/mpeg2/vp8, decrypted pps/sps/part of slice header info, 128 bits aligned
+    unsigned int    reencrypt_data_size;            // h264/vc1/mpeg2, slice level data, vp8 mb header info, 128 bits aligned
+    unsigned int    clear_token_data_size;          // vp8, clear token data saved in VPR, 128 bits aligned
+    unsigned int    key_increment   : 6;            // added to content key after unwrapping
+    unsigned int    encryption_mode : 4;            // encryption mode
+    unsigned int    bReEncrypted    : 1;            // set to 0 if no re-encryption is done.
+    unsigned int    bvp9SuperFrame  : 1;            // set to 1 for vp9 superframe
+    unsigned int    vp9NumFramesMinus1    : 3;      // set equal to numFrames-1 for vp9superframe. Max 8 frames are possible in vp9 superframe.
+    unsigned int    reserved1       :17;            // reserved, 32 bit alignment
+    unsigned int    wrapped_session_key[4];         // session keys
+    unsigned int    wrapped_content_key[4];         // content keys
+    unsigned int    initialization_vector[4];       // Ctrl64 initial vector
+    union {
+        unsigned int    partition_size[VP8_MAX_TOKEN_PARTITIONS];            // size of each token partition (used for encrypted streams of VP8)
+        unsigned int    vp9_frame_sizes[VP9_MAX_FRAMES_IN_SUPERFRAME];       // frame size information for all frames in vp9 superframe.
+    };
+    unsigned int    vp9_clear_hdr_size[VP9_MAX_FRAMES_IN_SUPERFRAME];          // clear header size for each frame in vp9 superframe.
+} nvdec_pass1_output_data_s;
+
+
+/*****************************************************
+            AV1
+*****************************************************/
+typedef struct _scale_factors_reference_s{
+  short             x_scale_fp;                                // horizontal fixed point scale factor
+  short             y_scale_fp;                                // vertical fixed point scale factor
+}scale_factors_reference_s;
+
+typedef struct _frame_info_t{
+    unsigned short  width;                                     // in pixel, av1 support arbitray resolution
+    unsigned short  height;
+    unsigned short  stride[2];                                 // luma and chroma stride in 16Bytes
+    unsigned int    frame_buffer_idx;                          // TBD :clean associate the reference frame and frame buffer id to lookup base_addr
+} frame_info_t;
+
+typedef struct _ref_frame_struct_s{
+    frame_info_t    info;
+    scale_factors_reference_s sf;                              // scalefactor for reference frame and current frame size, driver can calculate it
+    unsigned char   sign_bias                    : 1;          // calcuate based on frame_offset and current frame offset
+    unsigned char   wmtype                       : 2;          // global motion parameters : identity,translation,rotzoom,affine
+    unsigned char   reserved_rf                  : 5;
+    short           frame_off;                                 // relative offset to current frame
+    short           roffset;                                   // relative offset from current frame
+} ref_frame_struct_s;
+
+typedef struct _av1_fgs_cfg_t{
+    //from AV1 spec 5.9.30 Film Grain Params syntax
+    unsigned short apply_grain                   : 1;
+    unsigned short overlap_flag                  : 1;
+    unsigned short clip_to_restricted_range      : 1;
+    unsigned short chroma_scaling_from_luma      : 1;
+    unsigned short num_y_points_b                : 1;          // flag indicates num_y_points>0
+    unsigned short num_cb_points_b               : 1;          // flag indicates num_cb_points>0
+    unsigned short num_cr_points_b               : 1;          // flag indicates num_cr_points>0
+    unsigned short scaling_shift                 : 4;
+    unsigned short reserved_fgs                  : 5;
+	unsigned short sw_random_seed;
+	short          cb_offset;
+	short          cr_offset;
+	char           cb_mult;
+	char           cb_luma_mult;
+	char           cr_mult;
+	char           cr_luma_mult;
+} av1_fgs_cfg_t;
+
+
+typedef struct _nvdec_av1_pic_s
+{
+    nvdec_pass2_otf_s encryption_params;
+
+    nvdec_pass2_otf_ext_s ssm;
+
+    av1_fgs_cfg_t fgs_cfg;
+
+    // Driver may or may not use based upon need.
+    // If 0 then default value of 1<<27 = 298ms @ 450MHz will be used in ucode.
+    // Driver can send this value based upon resolution using the formula:
+    // gptimer_timeout_value = 3 * (cycles required for one frame)
+    unsigned int    gptimer_timeout_value;
+
+    unsigned int    stream_len;                                // stream length.
+    unsigned int    reserved12;                                // skip bytes length to real frame data .
+
+    //sequence header
+    unsigned int    use_128x128_superblock       : 1;          // superblock 128x128 or 64x64, 0:64x64, 1: 128x128
+    unsigned int    chroma_format                : 2;          // 1:420, others:reserved for future
+    unsigned int    bit_depth                    : 4;          // bitdepth
+    unsigned int    enable_filter_intra          : 1;          // tool enable in seq level, 0 : disable 1: frame header control
+    unsigned int    enable_intra_edge_filter     : 1;
+    unsigned int    enable_interintra_compound   : 1;
+    unsigned int    enable_masked_compound       : 1;
+    unsigned int    enable_dual_filter           : 1;          // enable or disable vertical and horiz filter selection
+    unsigned int    reserved10                   : 1;          // 0 - disable order hint, and related tools
+    unsigned int    reserved0                    : 3;
+    unsigned int    enable_jnt_comp              : 1;          // 0 - disable joint compound modes
+    unsigned int    reserved1                    : 1;
+    unsigned int    enable_cdef                  : 1;
+    unsigned int    reserved11                   : 1;
+    unsigned int    enable_fgs                   : 1;
+    unsigned int    enable_substream_decoding    : 1;          //enable frame substream kickoff mode without context switch
+    unsigned int    reserved2                    : 10;         // reserved bits
+
+    //frame header
+    unsigned int    frame_type                   : 2;          // 0:Key frame, 1:Inter frame, 2:intra only, 3:s-frame
+    unsigned int    show_frame                   : 1;          // show frame flag
+    unsigned int    reserved13                   : 1;
+    unsigned int    disable_cdf_update           : 1;          // disable CDF update during symbol decoding
+    unsigned int    allow_screen_content_tools   : 1;          // screen content tool enable
+    unsigned int    cur_frame_force_integer_mv   : 1;          // AMVR enable
+    unsigned int    scale_denom_minus9           : 3;          // The denominator minus9  of the superres scale
+    unsigned int    allow_intrabc                : 1;          // IBC enable
+    unsigned int    allow_high_precision_mv      : 1;          // 1/8 precision mv enable
+    unsigned int    interp_filter                : 3;          // interpolation filter : EIGHTTAP_REGULAR,....
+    unsigned int    switchable_motion_mode       : 1;          // 0: simple motion mode, 1: SIMPLE, OBMC, LOCAL  WARP
+    unsigned int    use_ref_frame_mvs            : 1;          // 1: current frame can use the previous frame mv information, MFMV
+    unsigned int    refresh_frame_context        : 1;          // backward update flag
+    unsigned int    delta_q_present_flag         : 1;          // quantizer index delta values are present in the block level
+    unsigned int    delta_q_res                  : 2;          // left shift will apply to decoded quantizer index delta values
+    unsigned int    delta_lf_present_flag        : 1;          // specified whether loop filter delta values are present in the block level
+    unsigned int    delta_lf_res                 : 2;          // specifies the left shift will apply to decoded loop filter values
+    unsigned int    delta_lf_multi               : 1;          // seperate loop filter deltas for Hy,Vy,U,V edges
+    unsigned int    reserved3                    : 1;
+    unsigned int    coded_lossless               : 1;          // 1 means all segments use lossless coding. Frame is fully lossless, CDEF/DBF will disable
+    unsigned int    tile_enabled                 : 1;          // tile enable
+    unsigned int    reserved4                    : 2;
+    unsigned int    superres_is_scaled           : 1;          // frame level frame for using_superres
+    unsigned int    reserved_fh                  : 1;
+
+    unsigned int    tile_cols                    : 8;          // horizontal tile numbers in frame, max is 64
+    unsigned int    tile_rows                    : 8;          // vertical tile numbers in frame, max is 64
+    unsigned int    context_update_tile_id       : 16;         // which tile cdf will be seleted as the backward update CDF, MAXTILEROW=64, MAXTILECOL=64, 12bits
+
+    unsigned int    cdef_damping_minus_3         : 2;          // controls the amount of damping in the deringing filter
+    unsigned int    cdef_bits                    : 2;          // the number of bits needed to specify which CDEF filter to apply
+    unsigned int    frame_tx_mode                : 3;          // 0:ONLY4x4,3:LARGEST,4:SELECT
+    unsigned int    frame_reference_mode         : 2;          // single,compound,select
+    unsigned int    skip_mode_flag               : 1;          // skip mode
+    unsigned int    skip_ref0                    : 4;
+    unsigned int    skip_ref1                    : 4;
+    unsigned int    allow_warp                   : 1;          // sequence level & frame level warp enable
+    unsigned int    reduced_tx_set_used          : 1;          // whether the frame is  restricted to oa reduced subset of the full set of transform types
+    unsigned int    ref_scaling_enable           : 1;
+    unsigned int    reserved5                    : 1;
+    unsigned int    reserved6                    : 10;         // reserved bits
+    unsigned short  superres_upscaled_width;                   // upscale width, frame_size_with_refs() syntax,restoration will use it
+    unsigned short  superres_luma_step;
+    unsigned short  superres_chroma_step;
+    unsigned short  superres_init_luma_subpel_x;
+    unsigned short  superres_init_chroma_subpel_x;
+
+    /*frame header qp information*/
+    unsigned char   base_qindex;                               // the maximum qp is 255
+    char            y_dc_delta_q;
+    char            u_dc_delta_q;
+    char            v_dc_delta_q;
+    char            u_ac_delta_q;
+    char            v_ac_delta_q;
+    unsigned char   qm_y;                                      // 4bit: 0-15
+    unsigned char   qm_u;
+    unsigned char   qm_v;
+
+    /*cdef, need to update in the new spec*/
+    unsigned int    cdef_y_pri_strength;                       // 4bit for one, max is 8
+    unsigned int    cdef_uv_pri_strength;                      // 4bit for one, max is 8
+    unsigned int    cdef_y_sec_strength          : 16;         // 2bit for one, max is 8
+    unsigned int    cdef_uv_sec_strength         : 16;         // 2bit for one, max is 8
+
+    /*segmentation*/
+    unsigned char   segment_enabled;
+    unsigned char   segment_update_map;
+    unsigned char   reserved7;
+    unsigned char   segment_temporal_update;
+    short           segment_feature_data[8][8];
+    unsigned char   last_active_segid;                         // The highest numbered segment id that has some enabled feature.
+    unsigned char   segid_preskip;                             // Whether the segment id will be read before the skip syntax element.
+                                                               // 1: the segment id will be read first.
+                                                               // 0: the skip syntax element will be read first.
+    unsigned char   prevsegid_flag;                            // 1 : previous segment id is  available
+    unsigned char   segment_quant_sign           : 8;          // sign bit for segment alternative QP
+
+    /*loopfilter*/
+    unsigned char   filter_level[2];
+    unsigned char   filter_level_u;
+    unsigned char   filter_level_v;
+    unsigned char   lf_sharpness_level;
+    char            lf_ref_deltas[8];                          // 0 = Intra, Last, Last2+Last3, GF, BRF, ARF2, ARF
+    char            lf_mode_deltas[2];                         // 0 = ZERO_MV, MV
+
+    /*restoration*/
+    unsigned char   lr_type ;                                  // restoration type.  Y:bit[1:0];U:bit[3:2],V:bit[5:4]
+    unsigned char   lr_unit_size;                              // restoration unit size 0:32x32, 1:64x64, 2:128x128,3:256x256;  Y:bit[1:0];U:bit[3:2],V:bit[5:4]
+
+    //general
+    frame_info_t    current_frame;
+    ref_frame_struct_s ref_frame[7];                           // Last, Last2, Last3, Golden, BWDREF, ALTREF2, ALTREF
+
+    unsigned int    use_temporal0_mvs            : 1;
+    unsigned int    use_temporal1_mvs            : 1;
+    unsigned int    use_temporal2_mvs            : 1;
+    unsigned int    mf1_type                     : 3;
+    unsigned int    mf2_type                     : 3;
+    unsigned int    mf3_type                     : 3;
+    unsigned int    reserved_mfmv                : 20;
+
+    short           mfmv_offset[3][7];                         // 3: mf0~2, 7: Last, Last2, Last3, Golden, BWDREF, ALTREF2, ALTREF
+    char            mfmv_side[3][7];                           // flag for reverse offset great than 0
+                                                               // MFMV relative offset from the ref frame(reference to reference relative offset)
+
+    unsigned char   tileformat                   : 2;          // 0: TBL; 1: KBL;
+    unsigned char   gob_height                   : 3;          // Set GOB height, 0: GOB_2, 1: GOB_4, 2: GOB_8, 3: GOB_16, 4: GOB_32 (NVDEC3 onwards)
+    unsigned char   errorConcealOn               : 1;          // this field is not used, use ctrl_param.error_conceal_on to enable error concealment in ucode,
+                                                               // always set NV_CNVDEC_GIP_ERR_CONCEAL_CTRL_ON = 1 to enable error detect in hw
+    unsigned char   reserver8                    : 2;          // reserve
+
+    unsigned char   stream_error_detection       : 1;
+    unsigned char   mv_error_detection           : 1;
+    unsigned char   coeff_error_detection        : 1;
+    unsigned char   reserved_eh                  : 5;
+
+    // Filt neighbor buffer offset
+    unsigned int    Av1FltTopOffset;                           // filter top buffer offset respect to filter buffer, 256 bytes unit
+    unsigned int    Av1FltVertOffset;                          // filter vertical buffer offset respect to filter buffer, 256 bytes unit
+    unsigned int    Av1CdefVertOffset;                         // cdef vertical buffer offset respect to filter buffer, 256 bytes unit
+    unsigned int    Av1LrVertOffset;                           // lr vertical buffer offset respect to filter buffer, 256 bytes unit
+    unsigned int    Av1HusVertOffset;                          // hus vertical buffer offset respect to filter buffer, 256 bytes unit
+    unsigned int    Av1FgsVertOffset;                          // fgs vertical buffer offset respect to filter buffer, 256 bytes unit
+
+    unsigned int    enable_histogram             : 1;
+    unsigned int    sw_skip_start_length         : 14;         //skip start length
+    unsigned int    reserved_stat                : 17;
+
+} nvdec_av1_pic_s;
+
+//////////////////////////////////////////////////////////////////////
+// AV1 Buffer structure
+//////////////////////////////////////////////////////////////////////
+typedef struct _AV1FilmGrainMemory
+ {
+    unsigned char   scaling_lut_y[256];
+    unsigned char   scaling_lut_cb[256];
+    unsigned char   scaling_lut_cr[256];
+    short           cropped_luma_grain_block[4096];
+    short           cropped_cb_grain_block[1024];
+    short           cropped_cr_grain_block[1024];
+} AV1FilmGrainMemory;
+
+typedef struct _AV1TileInfo_OLD
+{
+    unsigned char   width_in_sb;
+    unsigned char   height_in_sb;
+    unsigned char   tile_start_b0;
+    unsigned char   tile_start_b1;
+    unsigned char   tile_start_b2;
+    unsigned char   tile_start_b3;
+    unsigned char   tile_end_b0;
+    unsigned char   tile_end_b1;
+    unsigned char   tile_end_b2;
+    unsigned char   tile_end_b3;
+    unsigned char   padding[6];
+} AV1TileInfo_OLD;
+
+typedef struct _AV1TileInfo
+{
+    unsigned char   width_in_sb;
+    unsigned char   padding_w;
+    unsigned char   height_in_sb;
+    unsigned char   padding_h;
+} AV1TileInfo;
+
+typedef struct _AV1TileStreamInfo
+{
+    unsigned int    tile_start;
+    unsigned int    tile_end;
+    unsigned char   padding[8];
+} AV1TileStreamInfo;
+
+
+// AV1 TileSize buffer
+#define AV1_MAX_TILES                       256
+#define AV1_TILEINFO_BUF_SIZE_OLD           NVDEC_ALIGN(AV1_MAX_TILES * sizeof(AV1TileInfo_OLD))
+#define AV1_TILEINFO_BUF_SIZE               NVDEC_ALIGN(AV1_MAX_TILES * sizeof(AV1TileInfo))
+
+// AV1 TileStreamInfo buffer
+#define AV1_TILESTREAMINFO_BUF_SIZE         NVDEC_ALIGN(AV1_MAX_TILES * sizeof(AV1TileStreamInfo))
+
+// AV1 SubStreamEntry buffer
+#define MAX_SUBSTREAM_ENTRY_SIZE            32
+#define AV1_SUBSTREAM_ENTRY_BUF_SIZE        NVDEC_ALIGN(MAX_SUBSTREAM_ENTRY_SIZE * sizeof(nvdec_substream_entry_s))
+
+// AV1 FilmGrain Parameter buffer
+#define AV1_FGS_BUF_SIZE                    NVDEC_ALIGN(sizeof(AV1FilmGrainMemory))
+
+// AV1 Temporal MV buffer
+#define AV1_TEMPORAL_MV_SIZE_IN_64x64       256            // 4Bytes for 8x8
+#define AV1_TEMPORAL_MV_BUF_SIZE(w, h)      ALIGN_UP( ALIGN_UP(w,128) * ALIGN_UP(h,128) / (64*64) * AV1_TEMPORAL_MV_SIZE_IN_64x64, 4096)
+
+// AV1 SegmentID buffer
+#define AV1_SEGMENT_ID_SIZE_IN_64x64        128            // (3bits + 1 pad_bits) for 4x4
+#define AV1_SEGMENT_ID_BUF_SIZE(w, h)       ALIGN_UP( ALIGN_UP(w,128) * ALIGN_UP(h,128) / (64*64) * AV1_SEGMENT_ID_SIZE_IN_64x64, 4096)
+
+// AV1 Global Motion buffer
+#define AV1_GLOBAL_MOTION_BUF_SIZE          NVDEC_ALIGN(7*32)
+
+// AV1 Intra Top buffer
+#define AV1_INTRA_TOP_BUF_SIZE              NVDEC_ALIGN(8*8192)
+
+// AV1 Histogram buffer
+#define AV1_HISTOGRAM_BUF_SIZE              NVDEC_ALIGN(1024)
+
+// AV1 Filter FG buffer
+#define AV1_DBLK_TOP_SIZE_IN_SB64           ALIGN_UP(1920, 128)
+#define AV1_DBLK_TOP_BUF_SIZE(w)            NVDEC_ALIGN( (ALIGN_UP(w,64)/64 + 2) * AV1_DBLK_TOP_SIZE_IN_SB64)
+
+#define AV1_DBLK_LEFT_SIZE_IN_SB64          ALIGN_UP(1536, 128)
+#define AV1_DBLK_LEFT_BUF_SIZE(h)           NVDEC_ALIGN( (ALIGN_UP(h,64)/64 + 2) * AV1_DBLK_LEFT_SIZE_IN_SB64)
+
+#define AV1_CDEF_LEFT_SIZE_IN_SB64          ALIGN_UP(1792, 128)
+#define AV1_CDEF_LEFT_BUF_SIZE(h)           NVDEC_ALIGN( (ALIGN_UP(h,64)/64 + 2) * AV1_CDEF_LEFT_SIZE_IN_SB64)
+
+#define AV1_HUS_LEFT_SIZE_IN_SB64           ALIGN_UP(12544, 128)
+#define AV1_ASIC_HUS_LEFT_BUFFER_SIZE(h)    NVDEC_ALIGN( (ALIGN_UP(h,64)/64 + 2) * AV1_HUS_LEFT_SIZE_IN_SB64)
+#define AV1_HUS_LEFT_BUF_SIZE(h)            2*AV1_ASIC_HUS_LEFT_BUFFER_SIZE(h)     // Ping-Pong buffers
+
+#define AV1_LR_LEFT_SIZE_IN_SB64            ALIGN_UP(1920, 128)
+#define AV1_LR_LEFT_BUF_SIZE(h)             NVDEC_ALIGN( (ALIGN_UP(h,64)/64 + 2) * AV1_LR_LEFT_SIZE_IN_SB64)
+
+#define AV1_FGS_LEFT_SIZE_IN_SB64           ALIGN_UP(320, 128)
+#define AV1_FGS_LEFT_BUF_SIZE(h)            NVDEC_ALIGN( (ALIGN_UP(h,64)/64 + 2) * AV1_FGS_LEFT_SIZE_IN_SB64)
+
+// AV1 Hint Dump Buffer
+#define AV1_HINT_DUMP_SIZE_IN_SB64          ((64*64)/(4*4)*8)           // 8 bytes per CU, 256 CUs(2048 bytes) per SB64
+#define AV1_HINT_DUMP_SIZE_IN_SB128         ((128*128)/(4*4)*8)         // 8 bytes per CU,1024 CUs(8192 bytes) per SB128
+#define AV1_HINT_DUMP_SIZE(w, h)            NVDEC_ALIGN(AV1_HINT_DUMP_SIZE_IN_SB128*((w+127)/128)*((h+127)/128))  // always use SB128 for allocation
+
+
+/*******************************************************************
+                New  H264
+********************************************************************/
+typedef struct _nvdec_new_h264_pic_s
+{
+    nvdec_pass2_otf_s encryption_params;
+    unsigned char eos[16];
+    unsigned char explicitEOSPresentFlag;
+    unsigned char hint_dump_en; //enable COLOMV surface dump for all frames, which includes hints of "MV/REFIDX/QP/CBP/MBPART/MBTYPE", nvbug: 200212874
+    unsigned char reserved0[2];
+    unsigned int stream_len;
+    unsigned int slice_count;
+    unsigned int mbhist_buffer_size;     // to pass buffer size of MBHIST_BUFFER
+
+    // Driver may or may not use based upon need.
+    // If 0 then default value of 1<<27 = 298ms @ 450MHz will be used in ucode.
+    // Driver can send this value based upon resolution using the formula:
+    // gptimer_timeout_value = 3 * (cycles required for one frame)
+    unsigned int gptimer_timeout_value;
+
+    // Fields from msvld_h264_seq_s
+    int log2_max_pic_order_cnt_lsb_minus4;
+    int delta_pic_order_always_zero_flag;
+    int frame_mbs_only_flag;
+    int PicWidthInMbs;
+    int FrameHeightInMbs;
+
+    unsigned int tileFormat                 : 2 ;   // 0: TBL; 1: KBL; 2: Tile16x16
+    unsigned int gob_height                 : 3 ;   // Set GOB height, 0: GOB_2, 1: GOB_4, 2: GOB_8, 3: GOB_16, 4: GOB_32 (NVDEC3 onwards)
+    unsigned int reserverd_surface_format   : 27;
+
+    // Fields from msvld_h264_pic_s
+    int entropy_coding_mode_flag;
+    int pic_order_present_flag;
+    int num_ref_idx_l0_active_minus1;
+    int num_ref_idx_l1_active_minus1;
+    int deblocking_filter_control_present_flag;
+    int redundant_pic_cnt_present_flag;
+    int transform_8x8_mode_flag;
+
+    // Fields from mspdec_h264_picture_setup_s
+    unsigned int pitch_luma;                    // Luma pitch
+    unsigned int pitch_chroma;                  // chroma pitch
+
+    unsigned int luma_top_offset;               // offset of luma top field in units of 256
+    unsigned int luma_bot_offset;               // offset of luma bottom field in units of 256
+    unsigned int luma_frame_offset;             // offset of luma frame in units of 256
+    unsigned int chroma_top_offset;             // offset of chroma top field in units of 256
+    unsigned int chroma_bot_offset;             // offset of chroma bottom field in units of 256
+    unsigned int chroma_frame_offset;           // offset of chroma frame in units of 256
+    unsigned int HistBufferSize;                // in units of 256
+
+    unsigned int MbaffFrameFlag           : 1;  //
+    unsigned int direct_8x8_inference_flag: 1;  //
+    unsigned int weighted_pred_flag       : 1;  //
+    unsigned int constrained_intra_pred_flag:1; //
+    unsigned int ref_pic_flag             : 1;  // reference picture (nal_ref_idc != 0)
+    unsigned int field_pic_flag           : 1;  //
+    unsigned int bottom_field_flag        : 1;  //
+    unsigned int second_field             : 1;  // second field of complementary reference field
+    unsigned int log2_max_frame_num_minus4: 4;  //  (0..12)
+    unsigned int chroma_format_idc        : 2;  //
+    unsigned int pic_order_cnt_type       : 2;  //  (0..2)
+    int pic_init_qp_minus26               : 6;  // : 6 (-26..+25)
+    int chroma_qp_index_offset            : 5;  // : 5 (-12..+12)
+    int second_chroma_qp_index_offset     : 5;  // : 5 (-12..+12)
+
+    unsigned int weighted_bipred_idc      : 2;  // : 2 (0..2)
+    unsigned int CurrPicIdx               : 7;  // : 7  uncompressed frame buffer index
+    unsigned int CurrColIdx               : 5;  // : 5  index of associated co-located motion data buffer
+    unsigned int frame_num                : 16; //
+    unsigned int frame_surfaces           : 1;  // frame surfaces flag
+    unsigned int output_memory_layout     : 1;  // 0: NV12; 1:NV24. Field pair must use the same setting.
+
+    int CurrFieldOrderCnt[2];                   // : 32 [Top_Bottom], [0]=TopFieldOrderCnt, [1]=BottomFieldOrderCnt
+    nvdec_dpb_entry_s dpb[16];
+    unsigned char WeightScale[6][4][4];         // : 6*4*4*8 in raster scan order (not zig-zag order)
+    unsigned char WeightScale8x8[2][8][8];      // : 2*8*8*8 in raster scan order (not zig-zag order)
+
+    // mvc setup info, must be zero if not mvc
+    unsigned char num_inter_view_refs_lX[2];         // number of inter-view references
+    char reserved1[14];                               // reserved for alignment
+    signed char inter_view_refidx_lX[2][16];         // DPB indices (must also be marked as long-term)
+
+    // lossless decode (At the time of writing this manual, x264 and JM encoders, differ in Intra_8x8 reference sample filtering)
+    unsigned int lossless_ipred8x8_filter_enable        : 1;       // = 0, skips Intra_8x8 reference sample filtering, for vertical and horizontal predictions (x264 encoded streams); = 1, filter Intra_8x8 reference samples (JM encoded streams)
+    unsigned int qpprime_y_zero_transform_bypass_flag   : 1;       // determines the transform bypass mode
+    unsigned int reserved2                              : 30;      // kept for alignment; may be used for other parameters
+
+    nvdec_display_param_s displayPara;
+    nvdec_pass2_otf_ext_s ssm;
+
+} nvdec_new_h264_pic_s;
+
+// golden crc struct dumped into surface
+// for each part, if golden crc compare is enabled, one interface is selected to do crc calculation in vmod.
+// vmod's crc is compared with cmod's golden crc (4*32 bits), and compare reuslt is written into surface.
+typedef struct
+{
+    // input
+    unsigned int    dbg_crc_enable_partb    : 1;    // Eable flag for enable/disable interface crc calculation in NVDEC HW's part b
+    unsigned int    dbg_crc_enable_partc    : 1;    // Eable flag for enable/disable interface crc calculation in NVDEC HW's part c
+    unsigned int    dbg_crc_enable_partd    : 1;    // Eable flag for enable/disable interface crc calculation in NVDEC HW's part d
+    unsigned int    dbg_crc_enable_parte    : 1;    // Eable flag for enable/disable interface crc calculation in NVDEC HW's part e
+    unsigned int    dbg_crc_intf_partb      : 6;    // For partb to select which interface to compare crc. see DBG_CRC_PARTE_INTF_SEL for detailed control value for each interface
+    unsigned int    dbg_crc_intf_partc      : 6;    // For partc to select which interface to compare crc. see DBG_CRC_PARTE_INTF_SEL for detailed control value for each interface
+    unsigned int    dbg_crc_intf_partd      : 6;    // For partd to select which interface to compare crc. see DBG_CRC_PARTE_INTF_SEL for detailed control value for each interface
+    unsigned int    dbg_crc_intf_parte      : 6;    // For parte to select which interface to compare crc. see DBG_CRC_PARTE_INTF_SEL for detailed control value for each interface
+    unsigned int    reserved0               : 4;
+
+    unsigned int    dbg_crc_partb_golden[4];        // Golden crc values for part b
+    unsigned int    dbg_crc_partc_golden[4];        // Golden crc values for part c
+    unsigned int    dbg_crc_partd_golden[4];        // Golden crc values for part d
+    unsigned int    dbg_crc_parte_golden[4];        // Golden crc values for part e
+
+    // output
+    unsigned int    dbg_crc_comp_partb      : 4;    // Compare result for part b
+    unsigned int    dbg_crc_comp_partc      : 4;    // Compare result for part c
+    unsigned int    dbg_crc_comp_partd      : 4;    // Compare result for part d
+    unsigned int    dbg_crc_comp_parte      : 4;    // Compare result for part e
+    unsigned int    reserved1               : 16;
+
+    unsigned char   reserved2[56];
+}nvdec_crc_s;                                       // 128 Bytes
+
+#endif // __DRV_NVDEC_H_
\ No newline at end of file
diff --git a/src/nouveau/nil/image.rs b/src/nouveau/nil/image.rs
index 3f4101fc3b47734209cc7de85072482e00b0b6dc..066a22b3e09ccb327e33238d2b07b9915897bc2a 100644
--- a/src/nouveau/nil/image.rs
+++ b/src/nouveau/nil/image.rs
@@ -336,7 +336,7 @@ impl Image {
 
         image.size_B =
             image.array_stride_B * u64::from(image.extent_px.array_len);
-        image.align_B = lvl0_tiling_size_B;
+        image.align_B = image.levels[0].row_stride_B.next_power_of_two();
 
         // If the client requested sparse residency, we need a 64K alignment
         // or else sparse binding may fail.  This is true regardless of
@@ -685,7 +685,8 @@ impl Image {
                     NV_MMU_PTE_KIND_S8
                 }
             }
-            _ => NV_MMU_PTE_KIND_GENERIC_MEMORY,
+            _ => 0,
+            // _ => NV_MMU_PTE_KIND_GENERIC_MEMORY,
         }
         .try_into()
         .unwrap()
diff --git a/src/nouveau/nil/tiling.rs b/src/nouveau/nil/tiling.rs
index 8e2e300bb9705a7eb19304c1283908c5f3261157..4decc40606379fd476bb586cfb92932b85ba3079 100644
--- a/src/nouveau/nil/tiling.rs
+++ b/src/nouveau/nil/tiling.rs
@@ -70,6 +70,7 @@ impl Tiling {
         let ceil_d = extent_GOB.depth.ilog2_ceil() as u8;
 
         tiling.y_log2 = std::cmp::min(tiling.y_log2, ceil_h);
+        tiling.y_log2 = 4;
         tiling.z_log2 = std::cmp::min(tiling.z_log2, ceil_d);
         tiling
     }
@@ -183,7 +184,7 @@ impl Tiling {
         let mut tiling = Tiling {
             gob_type: GOBType::Fermi8,
             x_log2: 0,
-            y_log2: 5,
+            y_log2: 4,
             z_log2: 5,
         };
 
diff --git a/src/nouveau/vulkan/meson.build b/src/nouveau/vulkan/meson.build
index 16e6cc6c581b5e453df634292496e2fa5fe897e6..1069988e412bf19409488bab96bde07dce0d8d88 100644
--- a/src/nouveau/vulkan/meson.build
+++ b/src/nouveau/vulkan/meson.build
@@ -1,5 +1,8 @@
 # Copyright © 2022 Collabora Ltd. and Red Hat Inc.
 # SPDX-License-Identifier: MIT
+
+subdir('video')
+
 nvk_files = files(
   '../../gallium/auxiliary/tgsi/tgsi_from_mesa.c',
   'nvk_acceleration_structure.c',
@@ -63,6 +66,7 @@ nvk_files = files(
   'nvk_shader.h',
   'nvk_upload_queue.c',
   'nvk_upload_queue.h',
+  'nvk_video.c',
   'nvk_wsi.c',
   'nvk_wsi.h',
   'nvkmd/nouveau/nvkmd_nouveau.h',
@@ -100,6 +104,7 @@ nvk_deps = [
   idep_vulkan_util,
   idep_vulkan_wsi,
   idep_vulkan_wsi_headers,
+  idep_nvk_video,
 ]
 
 nvk_flags = []
diff --git a/src/nouveau/vulkan/nvk_cmd_buffer.c b/src/nouveau/vulkan/nvk_cmd_buffer.c
index 6318fad42970088fc565673f7eebbbc66106843e..b3b864e1289512c957873a513a3aebaa6cb59cdf 100644
--- a/src/nouveau/vulkan/nvk_cmd_buffer.c
+++ b/src/nouveau/vulkan/nvk_cmd_buffer.c
@@ -108,6 +108,7 @@ nvk_reset_cmd_buffer(struct vk_command_buffer *vk_cmd_buffer,
    cmd->push_mem = NULL;
    cmd->push_mem_limit = NULL;
    cmd->push = (struct nv_push) {0};
+   memset(&cmd->rust, 0, sizeof(cmd->rust));
 
    util_dynarray_clear(&cmd->pushes);
 
@@ -156,6 +157,42 @@ nvk_cmd_buffer_flush_push(struct nvk_cmd_buffer *cmd)
    }
 
    cmd->push.start = cmd->push.end;
+
+   if(cmd->rust.mem) {
+      struct nvk_cmd_push push = {
+         .map = cmd->rust.mem->mem->map + cmd->rust.bytes_submitted,
+         .addr = cmd->rust.mem->mem->va->addr + cmd->rust.bytes_submitted,
+         .range = cmd->rust.dw_count * 4,
+      };
+      util_dynarray_append(&cmd->pushes, struct nvk_cmd_push, push);
+
+      cmd->rust.bytes_submitted += cmd->rust.dw_count * 4;
+      cmd->rust.dw_count = 0;
+   }
+}
+
+VkResult
+nvk_cmd_buffer_append_rust_push(struct nvk_cmd_buffer *cmd,
+                                uint32_t *data,
+                                uint32_t dw_count)
+{
+   VkResult result;
+   int offset = cmd->rust.dw_count * 4;
+
+   if (!cmd->rust.mem) {
+      result = nvk_cmd_buffer_alloc_mem(cmd, false, &cmd->rust.mem);
+      if (result != VK_SUCCESS)
+         return result;
+   }
+
+   if (dw_count > cmd->rust.mem->mem->size_B / sizeof(uint32_t)) {
+      nvk_cmd_buffer_flush_push(cmd);
+   }
+
+   memcpy(cmd->rust.mem->mem->map + offset, data, dw_count * 4);
+   cmd->rust.dw_count += dw_count;
+
+   return VK_SUCCESS;
 }
 
 void
@@ -297,6 +334,8 @@ nvk_BeginCommandBuffer(VkCommandBuffer commandBuffer,
 
    nvk_reset_cmd_buffer(&cmd->vk, 0);
 
+   if (cmd->vk.pool->queue_family_index == 1)
+      return VK_SUCCESS;
    /* Start with a nop so we have at least something to submit */
    struct nv_push *p = nvk_cmd_buffer_push(cmd, 2);
    P_MTHD(p, NV90B5, NOP);
@@ -504,8 +543,10 @@ nvk_cmd_flush_wait_dep(struct nvk_cmd_buffer *cmd,
          });
       }
    } else if (barriers & NVK_BARRIER_RENDER_WFI) {
+      bool is_video = cmd->vk.pool->queue_family_index == 1;
+
       /* If this comes from a vkCmdSetEvent, we don't need to wait */
-      if (wait)
+      if (wait && !is_video)
          P_IMMD(p, NVA097, WAIT_FOR_IDLE, 0);
    } else {
       /* Compute WFI only happens when shader data is flushed */
diff --git a/src/nouveau/vulkan/nvk_cmd_buffer.h b/src/nouveau/vulkan/nvk_cmd_buffer.h
index 6dc55668d99a7506b46ac0d4b3aab1947bbbc150..9f079eeaa720635f77ab3c5a09d435a3a92f3794 100644
--- a/src/nouveau/vulkan/nvk_cmd_buffer.h
+++ b/src/nouveau/vulkan/nvk_cmd_buffer.h
@@ -226,6 +226,15 @@ struct nvk_cmd_buffer {
    uint32_t *push_mem_limit;
    struct nv_push push;
 
+   struct {
+      /** The BO backing our Rust push buffer */
+      struct nvk_cmd_mem *mem;
+      /** The number of u32s currently written in `mem` */
+      size_t dw_count;
+      /** This variable keeps track of how much has been sent to the GPU. */
+      size_t bytes_submitted;
+   } rust;
+
    /** Array of struct nvk_cmd_push
     *
     * This acts both as a BO reference as well as provides a range in the
@@ -234,6 +243,11 @@ struct nvk_cmd_buffer {
    struct util_dynarray pushes;
 
    uint64_t tls_space_needed;
+
+   struct {
+      struct nvk_video_session *vid;
+      struct nvk_video_session_params *params;
+   } video;
 };
 
 VK_DEFINE_HANDLE_CASTS(nvk_cmd_buffer, vk.base, VkCommandBuffer,
@@ -267,10 +281,17 @@ nvk_cmd_buffer_push(struct nvk_cmd_buffer *cmd, uint32_t dw_count)
       nvk_cmd_buffer_new_push(cmd);
 
    cmd->push.limit = cmd->push.end + dw_count;
-   
+
    return &cmd->push;
 }
 
+/**
+ * Append a Rust-generated pushbuffer to the command buffer.
+ */
+VkResult nvk_cmd_buffer_append_rust_push(struct nvk_cmd_buffer *cmd,
+                                         uint32_t *data,
+                                         uint32_t dw_count);
+
 void
 nvk_cmd_buffer_push_indirect(struct nvk_cmd_buffer *cmd,
                              uint64_t addr, uint32_t dw_count);
diff --git a/src/nouveau/vulkan/nvk_device.c b/src/nouveau/vulkan/nvk_device.c
index 722561d1798b17a615de893ff38df07ac9495ad3..223562bda836723a4acec5face9075f110db7208 100644
--- a/src/nouveau/vulkan/nvk_device.c
+++ b/src/nouveau/vulkan/nvk_device.c
@@ -235,13 +235,21 @@ nvk_CreateDevice(VkPhysicalDevice physicalDevice,
    if (result != VK_SUCCESS)
       goto fail_vab_memory;
 
+   if (pCreateInfo->queueCreateInfoCount > 1) {
+
+      result = nvk_queue_init(dev, &dev->vid_queue,
+                              &pCreateInfo->pQueueCreateInfos[1], 0);
+      if (result != VK_SUCCESS)
+         goto fail_queue;
+   }
+
    struct vk_pipeline_cache_create_info cache_info = {
       .weak_ref = true,
    };
    dev->vk.mem_cache = vk_pipeline_cache_create(&dev->vk, &cache_info, NULL);
    if (dev->vk.mem_cache == NULL) {
       result = VK_ERROR_OUT_OF_HOST_MEMORY;
-      goto fail_queue;
+      goto fail_vid_queue;
    }
 
    result = nvk_device_init_meta(dev);
@@ -254,6 +262,8 @@ nvk_CreateDevice(VkPhysicalDevice physicalDevice,
 
 fail_mem_cache:
    vk_pipeline_cache_destroy(dev->vk.mem_cache, NULL);
+fail_vid_queue:
+   nvk_queue_finish(dev, &dev->vid_queue);
 fail_queue:
    nvk_queue_finish(dev, &dev->queue);
 fail_vab_memory:
@@ -297,6 +307,7 @@ nvk_DestroyDevice(VkDevice _device, const VkAllocationCallbacks *pAllocator)
    nvk_device_finish_meta(dev);
 
    vk_pipeline_cache_destroy(dev->vk.mem_cache, NULL);
+   nvk_queue_finish(dev, &dev->vid_queue);
    nvk_queue_finish(dev, &dev->queue);
    if (dev->vab_memory)
       nvkmd_mem_unref(dev->vab_memory);
diff --git a/src/nouveau/vulkan/nvk_device.h b/src/nouveau/vulkan/nvk_device.h
index 737a522be30170eb5e3d848db8f9fc075349a6e0..7d4623540f30d24141285485457767d9722f39ad 100644
--- a/src/nouveau/vulkan/nvk_device.h
+++ b/src/nouveau/vulkan/nvk_device.h
@@ -50,6 +50,7 @@ struct nvk_device {
    struct nvkmd_mem *vab_memory;
 
    struct nvk_queue queue;
+   struct nvk_queue vid_queue;
 
    struct vk_meta_device meta;
 
diff --git a/src/nouveau/vulkan/nvk_image.c b/src/nouveau/vulkan/nvk_image.c
index 9ec41d8b557fb3c421d37f0ebcb24433510f6e4b..a69927a824e311575ea1fb81be77e0c84ca27eec 100644
--- a/src/nouveau/vulkan/nvk_image.c
+++ b/src/nouveau/vulkan/nvk_image.c
@@ -160,6 +160,12 @@ nvk_get_image_format_features(struct nvk_physical_device *pdev,
    if (cosited_chroma)
       features |= VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT;
 
+   /* At least advertise support for NV12. This is incomplete. */
+   if (vk_format == VK_FORMAT_G8_B8R8_2PLANE_420_UNORM) {
+         features |= VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR;
+         features |= VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR;
+       }
+
    return features;
 }
 
diff --git a/src/nouveau/vulkan/nvk_physical_device.c b/src/nouveau/vulkan/nvk_physical_device.c
index b4c10f0e97353866af1e6b37c9c82729bad212ee..7be9ed75185bdbb984c5ac86d7730c0c6e279787 100644
--- a/src/nouveau/vulkan/nvk_physical_device.c
+++ b/src/nouveau/vulkan/nvk_physical_device.c
@@ -31,6 +31,7 @@
 #include "vk_device.h"
 #include "vk_drm_syncobj.h"
 #include "vk_shader_module.h"
+#include "vulkan/vulkan_core.h"
 #include "vulkan/wsi/wsi_common.h"
 
 #include <sys/sysmacros.h>
@@ -196,6 +197,10 @@ nvk_get_device_extensions(const struct nvk_instance *instance,
       .KHR_variable_pointers = true,
       .KHR_vertex_attribute_divisor = true,
       .KHR_vulkan_memory_model = nvk_use_nak(info),
+      .KHR_video_queue = true,
+      .KHR_video_decode_queue = true,
+      .KHR_video_decode_h264 = true,
+      .KHR_video_decode_h265 = true,
       .KHR_workgroup_memory_explicit_layout = true,
       .KHR_zero_initialize_workgroup_memory = true,
       .EXT_4444_formats = true,
@@ -1143,7 +1148,7 @@ nvk_get_device_properties(const struct nvk_instance *instance,
 
    /* VK_EXT_host_image_copy */
 
-   /* Not sure if there are layout specific things, so for now just reporting 
+   /* Not sure if there are layout specific things, so for now just reporting
     * all layouts from extensions.
     */
    static const VkImageLayout supported_layouts[] = {
@@ -1449,6 +1454,13 @@ nvk_create_drm_physical_device(struct vk_instance *_instance,
                      VK_QUEUE_SPARSE_BINDING_BIT,
       .queue_count = 1,
    };
+
+   pdev->queue_families[pdev->queue_family_count++] = (struct nvk_queue_family) {
+      .queue_flags = VK_QUEUE_VIDEO_DECODE_BIT_KHR |
+                     VK_QUEUE_TRANSFER_BIT |
+                     VK_QUEUE_SPARSE_BINDING_BIT,
+      .queue_count = 1,
+   };
    assert(pdev->queue_family_count <= ARRAY_SIZE(pdev->queue_families));
 
    pdev->vk.supported_sync_types = nvkmd->sync_types;
@@ -1618,6 +1630,24 @@ nvk_GetPhysicalDeviceQueueFamilyProperties2(
          }
       }
    }
+
+   if (!pQueueFamilyProperties)
+      return;
+   for (uint32_t i = 0; i < *pQueueFamilyPropertyCount; i++) {
+     vk_foreach_struct (ext, pQueueFamilyProperties[i].pNext) {
+       switch (ext->sType) {
+       case VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR: {
+          VkQueueFamilyVideoPropertiesKHR *prop = (VkQueueFamilyVideoPropertiesKHR *)ext;
+          if (pQueueFamilyProperties[i].queueFamilyProperties.queueFlags & VK_QUEUE_VIDEO_DECODE_BIT_KHR)
+             prop->videoCodecOperations =
+                VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR | VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR;
+          break;
+       }
+       default:
+          break;
+       }
+     }
+   }
 }
 
 static const VkTimeDomainKHR nvk_time_domains[] = {
diff --git a/src/nouveau/vulkan/nvk_queue.c b/src/nouveau/vulkan/nvk_queue.c
index b8571c02e6dc595115015c4127c22f18507017fc..456d879297e3b87bd841bb2d27ebffb18ff59c3c 100644
--- a/src/nouveau/vulkan/nvk_queue.c
+++ b/src/nouveau/vulkan/nvk_queue.c
@@ -436,6 +436,7 @@ nvk_queue_init_context_state(struct nvk_queue *queue)
    struct nvk_device *dev = nvk_queue_device(queue);
    struct nvk_physical_device *pdev = nvk_device_physical(dev);
    VkResult result;
+   size_t dw_count;
 
    uint32_t push_data[4096];
    struct nv_push push;
@@ -466,7 +467,11 @@ nvk_queue_init_context_state(struct nvk_queue *queue)
          return result;
    }
 
-   return nvk_queue_submit_simple(queue, nv_push_dw_count(&push), push_data);
+   dw_count = nv_push_dw_count(&push);
+   if (dw_count > 0)
+      return nvk_queue_submit_simple(queue, dw_count, push_data);
+   else
+      return VK_SUCCESS;
 }
 
 static VkQueueGlobalPriority
@@ -531,6 +536,9 @@ nvk_queue_init(struct nvk_device *dev, struct nvk_queue *queue,
    if (queue_family->queue_flags & VK_QUEUE_TRANSFER_BIT)
       queue->engines |= NVKMD_ENGINE_COPY;
 
+   if(queue_family->queue_flags & (VK_QUEUE_VIDEO_DECODE_BIT_KHR | VK_QUEUE_VIDEO_ENCODE_BIT_KHR))
+      queue->engines |= NVKMD_ENGINE_VIDEO;
+
    if (queue->engines) {
       result = nvkmd_dev_create_ctx(dev->nvkmd, &dev->vk.base,
                                     queue->engines, &queue->exec_ctx);
diff --git a/src/nouveau/vulkan/nvk_video.c b/src/nouveau/vulkan/nvk_video.c
new file mode 100644
index 0000000000000000000000000000000000000000..43e01244a81e66005f7b2019000ef0eec703b2e6
--- /dev/null
+++ b/src/nouveau/vulkan/nvk_video.c
@@ -0,0 +1,366 @@
+#include "nvk_video.h"
+
+#include "vk_alloc.h"
+#include "nvk_buffer.h"
+#include "nvk_device.h"
+#include "nvk_cmd_buffer.h"
+#include "nvk_image.h"
+#include "nvk_image_view.h"
+#include "nvk_physical_device.h"
+#include "nvk_entrypoints.h"
+
+#include "nv_push_cl906f.h"
+
+#include "nvidia/nvdec_drv.h"
+#include "video/video.h"
+
+VKAPI_ATTR VkResult VKAPI_CALL
+nvk_CreateVideoSessionKHR(VkDevice _device, const VkVideoSessionCreateInfoKHR *pCreateInfo,
+                           const VkAllocationCallbacks *pAllocator, VkVideoSessionKHR *pVideoSession)
+{
+   VK_FROM_HANDLE(nvk_device, dev, _device);
+
+   struct nvk_video_session *vid =
+      vk_alloc2(&dev->vk.alloc, pAllocator, sizeof(*vid), 8, VK_SYSTEM_ALLOCATION_SCOPE_OBJECT);
+   if (!vid)
+      return vk_error(dev, VK_ERROR_OUT_OF_HOST_MEMORY);
+
+   memset(vid, 0, sizeof(struct nvk_video_session));
+
+   VkResult result = vk_video_session_init(&dev->vk, &vid->vk, pCreateInfo);
+   if (result != VK_SUCCESS) {
+      vk_free2(&dev->vk.alloc, pAllocator, vid);
+      return result;
+   }
+
+   nvk_video_create_video_session(vid);
+
+   *pVideoSession = nvk_video_session_to_handle(vid);
+   return VK_SUCCESS;
+}
+
+VKAPI_ATTR void VKAPI_CALL
+nvk_DestroyVideoSessionKHR(VkDevice _device, VkVideoSessionKHR _session, const VkAllocationCallbacks *pAllocator)
+{
+   VK_FROM_HANDLE(nvk_device, dev, _device);
+   VK_FROM_HANDLE(nvk_video_session, vid, _session);
+
+   if (!_session)
+      return;
+
+   nvk_video_destroy_video_session(vid);
+   vk_object_base_finish(&vid->vk.base);
+   vk_free2(&dev->vk.alloc, pAllocator, vid);
+}
+
+VKAPI_ATTR VkResult VKAPI_CALL
+nvk_CreateVideoSessionParametersKHR(VkDevice _device, const VkVideoSessionParametersCreateInfoKHR *pCreateInfo,
+                                     const VkAllocationCallbacks *pAllocator,
+                                     VkVideoSessionParametersKHR *pVideoSessionParameters)
+{
+   VK_FROM_HANDLE(nvk_device, dev, _device);
+   VK_FROM_HANDLE(nvk_video_session, vid, pCreateInfo->videoSession);
+   VK_FROM_HANDLE(nvk_video_session_params, templ, pCreateInfo->videoSessionParametersTemplate);
+
+   struct nvk_video_session_params *params =
+      vk_alloc2(&dev->vk.alloc, pAllocator, sizeof(*params), 8, VK_SYSTEM_ALLOCATION_SCOPE_OBJECT);
+   if (!params)
+      return vk_error(dev, VK_ERROR_OUT_OF_HOST_MEMORY);
+
+   VkResult result =
+      vk_video_session_parameters_init(&dev->vk, &params->vk, &vid->vk, templ ? &templ->vk : NULL, pCreateInfo);
+   if (result != VK_SUCCESS) {
+      vk_free2(&dev->vk.alloc, pAllocator, params);
+      return result;
+   }
+
+   *pVideoSessionParameters = nvk_video_session_params_to_handle(params);
+   return VK_SUCCESS;
+}
+
+VKAPI_ATTR void VKAPI_CALL
+nvk_DestroyVideoSessionParametersKHR(VkDevice _device, VkVideoSessionParametersKHR _params,
+                                      const VkAllocationCallbacks *pAllocator)
+{
+   VK_FROM_HANDLE(nvk_device, dev, _device);
+   VK_FROM_HANDLE(nvk_video_session_params, params, _params);
+   vk_video_session_parameters_finish(&dev->vk, &params->vk);
+   vk_free2(&dev->vk.alloc, pAllocator, params);
+}
+
+VKAPI_ATTR VkResult VKAPI_CALL
+nvk_GetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, const VkVideoProfileInfoKHR *pVideoProfile,
+                                           VkVideoCapabilitiesKHR *pCapabilities)
+{
+   struct VkVideoDecodeCapabilitiesKHR *dec_caps =
+      (struct VkVideoDecodeCapabilitiesKHR *)vk_find_struct(pCapabilities->pNext, VIDEO_DECODE_CAPABILITIES_KHR);
+
+   switch (pVideoProfile->videoCodecOperation) {
+   case VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR: {
+      pCapabilities->flags = 0;
+      pCapabilities->minBitstreamBufferOffsetAlignment = 256;
+      pCapabilities->minBitstreamBufferSizeAlignment = 256;
+      pCapabilities->pictureAccessGranularity.width = VK_VIDEO_H264_MACROBLOCK_WIDTH;
+      pCapabilities->pictureAccessGranularity.height = VK_VIDEO_H264_MACROBLOCK_HEIGHT;
+      pCapabilities->minCodedExtent.width = 48;
+      pCapabilities->minCodedExtent.height = VK_VIDEO_H264_MACROBLOCK_HEIGHT;
+      pCapabilities->maxCodedExtent.width = 4096;
+      pCapabilities->maxCodedExtent.height = 4096;
+
+      /* H264 allows different luma and chroma bit depths */
+      if (pVideoProfile->lumaBitDepth != pVideoProfile->chromaBitDepth)
+         return VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR;
+
+      if (pVideoProfile->chromaSubsampling != VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR)
+         return VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR;
+
+      struct VkVideoDecodeH264CapabilitiesKHR *ext = (struct VkVideoDecodeH264CapabilitiesKHR *)vk_find_struct(
+         pCapabilities->pNext, VIDEO_DECODE_H264_CAPABILITIES_KHR);
+      const struct VkVideoDecodeH264ProfileInfoKHR *h264_profile =
+         vk_find_struct_const(pVideoProfile->pNext, VIDEO_DECODE_H264_PROFILE_INFO_KHR);
+      if (h264_profile->stdProfileIdc != STD_VIDEO_H264_PROFILE_IDC_BASELINE &&
+          h264_profile->stdProfileIdc != STD_VIDEO_H264_PROFILE_IDC_MAIN &&
+          h264_profile->stdProfileIdc != STD_VIDEO_H264_PROFILE_IDC_HIGH)
+         return VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR;
+
+      if (pVideoProfile->lumaBitDepth != VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR)
+         return VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR;
+
+      pCapabilities->flags = VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR;
+      pCapabilities->maxDpbSlots = 17;
+      pCapabilities->maxActiveReferencePictures = 16;
+      ext->fieldOffsetGranularity.x = 0;
+      ext->fieldOffsetGranularity.y = 0;
+      ext->maxLevelIdc = STD_VIDEO_H264_LEVEL_IDC_5_2;
+      strcpy(pCapabilities->stdHeaderVersion.extensionName, VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_EXTENSION_NAME);
+      pCapabilities->stdHeaderVersion.specVersion = VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_SPEC_VERSION;
+      break;
+   }
+
+   case VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR: {
+      /*
+      * Anything other than 8 bits is not supported by the driver for now.
+      *
+      * Basically, we'd have to advertise
+      * VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR and
+      * VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR for some 10bit YUV format.
+      *
+      * The GStreamer support is also not there currently.
+      */
+      if (pVideoProfile->lumaBitDepth != VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR ||
+         pVideoProfile->chromaBitDepth != VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR)
+         return VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR;
+
+      pCapabilities->flags = 0;
+      pCapabilities->minBitstreamBufferOffsetAlignment = 256;
+      pCapabilities->minBitstreamBufferSizeAlignment = 256;
+      pCapabilities->pictureAccessGranularity.width = VK_VIDEO_H265_CTU_MAX_WIDTH;
+      pCapabilities->pictureAccessGranularity.height = VK_VIDEO_H265_CTU_MAX_HEIGHT;
+      pCapabilities->minCodedExtent.width = 144;
+      pCapabilities->minCodedExtent.height = 144;
+      pCapabilities->maxCodedExtent.width = 8192;
+      pCapabilities->maxCodedExtent.height = 8192;
+
+      struct VkVideoDecodeH265CapabilitiesKHR *ext = (struct VkVideoDecodeH265CapabilitiesKHR *)vk_find_struct(
+         pCapabilities->pNext, VIDEO_DECODE_H265_CAPABILITIES_KHR);
+      const struct VkVideoDecodeH265ProfileInfoKHR *h265_profile =
+         vk_find_struct_const(pVideoProfile->pNext, VIDEO_DECODE_H265_PROFILE_INFO_KHR);
+
+      ext->maxLevelIdc = STD_VIDEO_H265_LEVEL_IDC_5_1;
+
+      /*
+       * XXX: the hw supports MAIN10 and MAIN12, but 10bit is not supported by
+       * the driver now, and MAIN12 is not in the vulkan video spec
+       */
+      if (h265_profile->stdProfileIdc != STD_VIDEO_H265_PROFILE_IDC_MAIN)
+         return VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR;
+
+      /*
+       * XXX: The hw does support both 420 and 444 (not 422, though).
+       */
+      if (pVideoProfile->chromaSubsampling != VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR)
+         return VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR;
+
+      pCapabilities->flags = VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR;
+      pCapabilities->maxDpbSlots = 17;
+      pCapabilities->maxActiveReferencePictures = 16;
+
+      strcpy(pCapabilities->stdHeaderVersion.extensionName, VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_EXTENSION_NAME);
+      pCapabilities->stdHeaderVersion.specVersion = VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_SPEC_VERSION;
+      break;
+   }
+
+   default:
+      return VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR;
+   }
+
+   if (dec_caps)
+      dec_caps->flags = VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR;
+
+   return VK_SUCCESS;
+}
+
+VKAPI_ATTR VkResult VKAPI_CALL
+nvk_GetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice,
+                                               const VkPhysicalDeviceVideoFormatInfoKHR *pVideoFormatInfo,
+                                               uint32_t *pVideoFormatPropertyCount,
+                                               VkVideoFormatPropertiesKHR *pVideoFormatProperties)
+{
+   VK_OUTARRAY_MAKE_TYPED(VkVideoFormatPropertiesKHR, out, pVideoFormatProperties, pVideoFormatPropertyCount);
+
+   vk_outarray_append_typed(VkVideoFormatPropertiesKHR, &out, p)
+   {
+      p->format = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM;
+      p->imageType = VK_IMAGE_TYPE_2D;
+      p->imageTiling = VK_IMAGE_TILING_OPTIMAL;
+      p->imageUsageFlags = pVideoFormatInfo->imageUsage;
+   }
+   return vk_outarray_status(&out);
+}
+
+VKAPI_ATTR VkResult VKAPI_CALL
+nvk_GetVideoSessionMemoryRequirementsKHR(VkDevice _device, VkVideoSessionKHR videoSession,
+                                          uint32_t *pMemoryRequirementsCount,
+                                          VkVideoSessionMemoryRequirementsKHR *pMemoryRequirements)
+{
+   VK_FROM_HANDLE(nvk_video_session, vid, videoSession);
+   uint32_t memory_type_bits = memory_type_bits = (1u << 2) - 1;
+   VK_OUTARRAY_MAKE_TYPED(VkVideoSessionMemoryRequirementsKHR, out, pMemoryRequirements, pMemoryRequirementsCount);
+
+   switch (vid->vk.op) {
+   case VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR: {
+      size_t max_width_in_mb = vid->vk.max_coded.width / 16;
+      size_t max_height_in_mb = vid->vk.max_coded.height / 16;
+      size_t coloc_size   = align(align(max_height_in_mb, 2) * (max_width_in_mb * 64) - 63, 0x100);
+      coloc_size  *= vid->vk.max_active_ref_pics + 1; /* Max number of references frames, plus current frame */
+      size_t mbhist_size  = align(max_width_in_mb * 104, 0x100);
+      size_t history_size = align(max_width_in_mb * 0x300, 0x200);
+
+      vk_outarray_append_typed(VkVideoSessionMemoryRequirementsKHR, &out, m) {
+         m->memoryBindIndex = 0;
+         m->memoryRequirements.size = coloc_size;
+         m->memoryRequirements.alignment = 256;
+         m->memoryRequirements.memoryTypeBits = memory_type_bits;
+      }
+      vk_outarray_append_typed(VkVideoSessionMemoryRequirementsKHR, &out, m) {
+         m->memoryBindIndex = 1;
+         m->memoryRequirements.size = mbhist_size;
+         m->memoryRequirements.alignment = 256;
+         m->memoryRequirements.memoryTypeBits = memory_type_bits;
+      }
+      vk_outarray_append_typed(VkVideoSessionMemoryRequirementsKHR, &out, m) {
+         m->memoryBindIndex = 2;
+         m->memoryRequirements.size = history_size;
+         m->memoryRequirements.alignment = 256;
+         m->memoryRequirements.memoryTypeBits = memory_type_bits;
+      }
+      break;
+   }
+
+   case VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR: {
+      const int CTU_SIZE = 64;
+      const int MB_SIZE = 16;
+
+      const int aligned_w = align(vid->vk.max_coded.width, CTU_SIZE);
+      const int aligned_h = align(vid->vk.max_coded.height, CTU_SIZE);
+
+      size_t coloc_size = (aligned_w * aligned_h) + (aligned_w * aligned_h / MB_SIZE);
+      size_t filter_size = 624; /* 608 from the nvdec_drv.h macros, but apparently 624 is expected */
+      size_t colmv_size = aligned_w * aligned_h / MB_SIZE;
+      size_t sao_size = 4864; /* reverse engineered */
+      size_t bsd_size = 60; /* taken from tegra */
+
+      vk_outarray_append_typed(VkVideoSessionMemoryRequirementsKHR, &out, m) {
+         m->memoryBindIndex = 0;
+         m->memoryRequirements.size = coloc_size;
+         m->memoryRequirements.alignment = 256;
+         m->memoryRequirements.memoryTypeBits = memory_type_bits;
+      }
+      vk_outarray_append_typed(VkVideoSessionMemoryRequirementsKHR, &out, m) {
+         m->memoryBindIndex = 1;
+         m->memoryRequirements.size = (filter_size + sao_size + bsd_size) * aligned_h;
+         m->memoryRequirements.alignment = 256;
+         m->memoryRequirements.memoryTypeBits = memory_type_bits;
+      }
+      vk_outarray_append_typed(VkVideoSessionMemoryRequirementsKHR, &out, m) {
+         m->memoryBindIndex = 2;
+         m->memoryRequirements.size = colmv_size;
+         m->memoryRequirements.alignment = 256;
+         m->memoryRequirements.memoryTypeBits = memory_type_bits;
+      }
+
+      break;
+   }
+
+   default:
+      return VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR;
+   }
+
+   return vk_outarray_status(&out);
+}
+
+VKAPI_ATTR VkResult VKAPI_CALL
+nvk_UpdateVideoSessionParametersKHR(VkDevice _device, VkVideoSessionParametersKHR videoSessionParameters,
+                                     const VkVideoSessionParametersUpdateInfoKHR *pUpdateInfo)
+{
+   VK_FROM_HANDLE(nvk_video_session_params, params, videoSessionParameters);
+   return vk_video_session_parameters_update(&params->vk, pUpdateInfo);
+}
+
+static void
+copy_bind(struct nvk_vid_mem *dst, const VkBindVideoSessionMemoryInfoKHR *src)
+{
+   dst->mem = nvk_device_memory_from_handle(src->memory);
+   dst->offset = src->memoryOffset;
+   dst->size = src->memorySize;
+}
+
+VKAPI_ATTR VkResult VKAPI_CALL
+nvk_BindVideoSessionMemoryKHR(VkDevice _device, VkVideoSessionKHR videoSession, uint32_t videoSessionBindMemoryCount,
+                               const VkBindVideoSessionMemoryInfoKHR *pBindSessionMemoryInfos)
+{
+   VK_FROM_HANDLE(nvk_video_session, vid, videoSession);
+
+   for (unsigned i = 0; i < videoSessionBindMemoryCount; i++) {
+      copy_bind(&vid->mems[pBindSessionMemoryInfos[i].memoryBindIndex], &pBindSessionMemoryInfos[i]);
+   }
+   return VK_SUCCESS;
+}
+
+VKAPI_ATTR void VKAPI_CALL
+nvk_CmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR *pBeginInfo)
+{
+   VK_FROM_HANDLE(nvk_cmd_buffer, cmd, commandBuffer);
+
+   VK_FROM_HANDLE(nvk_cmd_buffer, cmd_buffer, commandBuffer);
+   VK_FROM_HANDLE(nvk_video_session, vid, pBeginInfo->videoSession);
+   VK_FROM_HANDLE(nvk_video_session_params, params, pBeginInfo->videoSessionParameters);
+
+   cmd_buffer->video.vid = vid;
+   cmd_buffer->video.params = params;
+
+
+   nvk_video_cmd_begin_video_coding_khr(cmd, pBeginInfo);
+}
+
+VKAPI_ATTR void VKAPI_CALL
+nvk_CmdControlVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR *pCodingControlInfo)
+{
+
+}
+
+VKAPI_ATTR void VKAPI_CALL
+nvk_CmdEndVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR *pEndCodingInfo)
+{
+
+}
+
+VKAPI_ATTR void VKAPI_CALL
+nvk_CmdDecodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR *frame_info)
+{
+   VK_FROM_HANDLE(nvk_cmd_buffer, cmd, commandBuffer);
+   VK_FROM_HANDLE(nvk_buffer, src_buffer, frame_info->srcBuffer);
+   struct nvk_image_view *dst_iv = nvk_image_view_from_handle(frame_info->dstPictureResource.imageViewBinding);
+
+   nvk_video_cmd_decode_video_khr(cmd, frame_info, src_buffer, dst_iv);
+}
diff --git a/src/nouveau/vulkan/nvk_video.h b/src/nouveau/vulkan/nvk_video.h
new file mode 100644
index 0000000000000000000000000000000000000000..cab7efeea0f3ec8517570f4425ee36b011a19453
--- /dev/null
+++ b/src/nouveau/vulkan/nvk_video.h
@@ -0,0 +1,41 @@
+/*
+ * Copyright © 2022 Collabora Ltd. and Red Hat Inc.
+ * SPDX-License-Identifier: MIT
+ */
+#ifndef NVK_VIDEO_H
+#define NVK_VIDEO_H 1
+
+#include "nvk_private.h"
+#include "nvk_device_memory.h"
+
+#include "vulkan/runtime/vk_video.h"
+
+struct nvk_vid_mem {
+   struct nvk_device_memory *mem;
+   VkDeviceSize offset;
+   VkDeviceSize size;
+};
+
+struct nvk_video_session {
+   /** The parent object */
+   struct vk_video_session vk;
+   /** Opaque memory objects needed by the GPU.
+    *
+    * We must ensure they're allocated and that the size is correctly computed
+    * from codec parameters.
+    *
+    * Not all memories are bound for all codecs.
+    */
+   struct nvk_vid_mem mems[5];
+   /** Opaque pointer to data managed by the Rust side. */
+   void *rust;
+};
+
+struct nvk_video_session_params {
+   struct vk_video_session_parameters vk;
+};
+
+VK_DEFINE_NONDISP_HANDLE_CASTS(nvk_video_session, vk.base, VkVideoSessionKHR, VK_OBJECT_TYPE_VIDEO_SESSION_KHR)
+VK_DEFINE_NONDISP_HANDLE_CASTS(nvk_video_session_params, vk.base, VkVideoSessionParametersKHR,
+                               VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR)
+#endif
diff --git a/src/nouveau/vulkan/nvkmd/nouveau/nvkmd_nouveau.h b/src/nouveau/vulkan/nvkmd/nouveau/nvkmd_nouveau.h
index d4eb882c7f46c4fcd8c47076bbf20252e5de9297..b6015aa67ea937f3a021cc23211434ea015f71fb 100644
--- a/src/nouveau/vulkan/nvkmd/nouveau/nvkmd_nouveau.h
+++ b/src/nouveau/vulkan/nvkmd/nouveau/nvkmd_nouveau.h
@@ -103,7 +103,12 @@ struct nvkmd_nouveau_exec_ctx {
    struct nvkmd_ctx base;
 
    struct nouveau_ws_device *ws_dev;
-   struct nouveau_ws_context *ws_ctx;
+   union {
+      struct nouveau_ws_context *ws_ctx;
+      struct nouveau_ws_vid_context *ws_vid_ctx;
+   };
+
+   uint32_t engines;
 
    uint32_t syncobj;
 
diff --git a/src/nouveau/vulkan/nvkmd/nouveau/nvkmd_nouveau_ctx.c b/src/nouveau/vulkan/nvkmd/nouveau/nvkmd_nouveau_ctx.c
index b416b9b13b62daa9ddd7e33badfa43aa7d4e6e05..a39fbd95c27816ba38733423f9e4fb78c26fd794 100644
--- a/src/nouveau/vulkan/nvkmd/nouveau/nvkmd_nouveau_ctx.c
+++ b/src/nouveau/vulkan/nvkmd/nouveau/nvkmd_nouveau_ctx.c
@@ -62,8 +62,13 @@ nvkmd_nouveau_create_exec_ctx(struct nvkmd_dev *_dev,
    STATIC_ASSERT(NVKMD_ENGINE_3D       == (int)NOUVEAU_WS_ENGINE_3D);
    STATIC_ASSERT(NVKMD_ENGINE_M2MF     == (int)NOUVEAU_WS_ENGINE_M2MF);
    STATIC_ASSERT(NVKMD_ENGINE_COMPUTE  == (int)NOUVEAU_WS_ENGINE_COMPUTE);
+   STATIC_ASSERT(NVKMD_ENGINE_VIDEO    == (int)NOUVEAU_WS_ENGINE_VIDEO);
+
+   if (engines & NVKMD_ENGINE_VIDEO)
+      err = nouveau_ws_vid_context_create(dev->ws_dev, &ctx->ws_vid_ctx);
+   else
+      err = nouveau_ws_context_create(dev->ws_dev, (int)engines, &ctx->ws_ctx);
 
-   err = nouveau_ws_context_create(dev->ws_dev, (int)engines, &ctx->ws_ctx);
    if (err != 0) {
       FREE(ctx);
       if (err == -ENOSPC)
@@ -74,7 +79,10 @@ nvkmd_nouveau_create_exec_ctx(struct nvkmd_dev *_dev,
 
    err = drmSyncobjCreate(dev->ws_dev->fd, 0, &ctx->syncobj);
    if (err < 0) {
-      nouveau_ws_context_destroy(ctx->ws_ctx);
+      if (engines & NVKMD_ENGINE_VIDEO)
+         nouveau_ws_vid_context_destroy(ctx->ws_vid_ctx);
+      else
+         nouveau_ws_context_destroy(ctx->ws_ctx);
       FREE(ctx);
       return vk_error(dev, VK_ERROR_OUT_OF_HOST_MEMORY);
    }
@@ -103,8 +111,10 @@ nvkmd_nouveau_exec_ctx_destroy(struct nvkmd_ctx *_ctx)
 
    ASSERTED int err = drmSyncobjDestroy(ctx->ws_dev->fd, ctx->syncobj);
    assert(err == 0);
-
-   nouveau_ws_context_destroy(ctx->ws_ctx);
+   if (ctx->engines & NVKMD_ENGINE_VIDEO)
+      nouveau_ws_vid_context_destroy(ctx->ws_vid_ctx);
+   else
+      nouveau_ws_context_destroy(ctx->ws_ctx);
    FREE(ctx);
 }
 
diff --git a/src/nouveau/vulkan/nvkmd/nvkmd.h b/src/nouveau/vulkan/nvkmd/nvkmd.h
index 6296c3160579c5ff96cd73cb9b7592a5112afd24..07c3d4a0af2f921843a1997837e2e291aea3fd0f 100644
--- a/src/nouveau/vulkan/nvkmd/nvkmd.h
+++ b/src/nouveau/vulkan/nvkmd/nvkmd.h
@@ -97,6 +97,7 @@ enum nvkmd_engines {
    NVKMD_ENGINE_M2MF    = 1 << 3,
    NVKMD_ENGINE_COMPUTE = 1 << 4,
    NVKMD_ENGINE_BIND    = 1 << 5,
+   NVKMD_ENGINE_VIDEO =   1 << 6,
 };
 
 enum nvkmd_bind_op {
diff --git a/src/nouveau/vulkan/video/.rustfmt.toml b/src/nouveau/vulkan/video/.rustfmt.toml
new file mode 100644
index 0000000000000000000000000000000000000000..df99c69198f5813df5fc3eaa007a2af0e60a7bbd
--- /dev/null
+++ b/src/nouveau/vulkan/video/.rustfmt.toml
@@ -0,0 +1 @@
+max_width = 80
diff --git a/src/nouveau/vulkan/video/decode.rs b/src/nouveau/vulkan/video/decode.rs
new file mode 100644
index 0000000000000000000000000000000000000000..969859e81415d30912af2c0e2a506c59feaaacaf
--- /dev/null
+++ b/src/nouveau/vulkan/video/decode.rs
@@ -0,0 +1,95 @@
+// Copyright © 2024 Collabora, Ltd
+// SPDX-License-Identifier: MIT
+
+use nvk_video_bindings::nvk_cmd_buffer;
+use nvk_video_bindings::nvk_video_session;
+
+use std::sync::Mutex;
+
+mod h264;
+mod h265;
+
+struct SessionData {
+    decoder: Box<dyn VideoDecoder>,
+}
+
+pub(crate) trait VideoDecoder {
+    fn begin(
+        &mut self,
+        _nvk_cmd_buffer: *mut nvk_cmd_buffer,
+        _begin_info: &nvk_video_bindings::VkVideoBeginCodingInfoKHR,
+    ) {
+    }
+
+    fn decode(
+        &mut self,
+        nvk_cmd_buffer: *mut nvk_cmd_buffer,
+        frame_info: &nvk_video_bindings::VkVideoDecodeInfoKHR,
+    );
+}
+
+#[no_mangle]
+pub extern "C" fn nvk_video_create_video_session(vid: &mut nvk_video_session) {
+    let decoder: Box<dyn VideoDecoder> = match vid.vk.op {
+        nvk_video_bindings::VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR => {
+            Box::new(h264::Decoder::default())
+        }
+        nvk_video_bindings::VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR => {
+            Box::new(h265::Decoder::default())
+        }
+        _ => panic!("Unsupported codec operation {}", vid.vk.op),
+    };
+
+    vid.rust =
+        Box::into_raw(Box::new(Mutex::new(SessionData { decoder }))).cast();
+}
+#[no_mangle]
+pub extern "C" fn nvk_video_destroy_video_session(vid: &mut nvk_video_session) {
+    drop(unsafe { Box::from_raw(vid.rust as *mut Mutex<SessionData>) });
+}
+
+/// Cast the opaque `nvk_video_session::rust` pointer to a mutable reference to
+/// a `SessionData`.
+///
+/// # Safety:
+///
+/// The caller must ensure that the pointer is valid when accessing the
+/// reference and that Rust's aliasing rules are followed.
+///
+fn to_session<'a>(cmd_buf: *mut nvk_cmd_buffer) -> &'a Mutex<SessionData> {
+    unsafe {
+        let video = (*cmd_buf).video;
+        let rust_ptr = (*video.vid).rust as *mut Mutex<SessionData>;
+
+        // SAFETY: We are the only ones that should be accessing the `rust`
+        // field. At no point we return mutable references, since we are using
+        // struct Mutex's interior mutability to access the data, so we upheld
+        // Rust's aliasing rules.
+        &*rust_ptr
+    }
+}
+
+#[no_mangle]
+pub extern "C" fn nvk_video_cmd_begin_video_coding_khr(
+    cmd: nvk_video_bindings::VkCommandBuffer,
+    begin_info: *const nvk_video_bindings::VkVideoBeginCodingInfoKHR,
+) {
+    let cmd = unsafe { nvk_video_bindings::nvk_cmd_buffer_from_handle(cmd) };
+    let begin_info = unsafe { *begin_info };
+
+    let mut session = to_session(cmd).lock().unwrap();
+
+    session.decoder.begin(cmd, &begin_info);
+}
+
+#[no_mangle]
+pub extern "C" fn nvk_video_cmd_decode_video_khr(
+    cmd: nvk_video_bindings::VkCommandBuffer,
+    frame_info: *const nvk_video_bindings::VkVideoDecodeInfoKHR,
+) {
+    let frame_info = unsafe { *frame_info };
+    let cmd = unsafe { nvk_video_bindings::nvk_cmd_buffer_from_handle(cmd) };
+    let mut session = to_session(cmd).lock().unwrap();
+
+    session.decoder.decode(cmd, &frame_info);
+}
diff --git a/src/nouveau/vulkan/video/decode/h264.rs b/src/nouveau/vulkan/video/decode/h264.rs
new file mode 100644
index 0000000000000000000000000000000000000000..15ba59f9c93c4aaf8a9beb4c1c01d069bd0450d0
--- /dev/null
+++ b/src/nouveau/vulkan/video/decode/h264.rs
@@ -0,0 +1,853 @@
+// Copyright © 2024 Collabora, Ltd and Red Hat, Inc.
+// SPDX-License-Identifier: MIT
+
+//! H264 decode implementation. Takes inspiration from the early C version
+//! written by Dave Airlie.
+
+use std::collections::HashMap;
+use std::collections::HashSet;
+
+use nv_push_rs::*;
+use nvidia_headers::classes::clc5b0::mthd as clc5b0;
+use nvk_video_bindings::_nvdec_h264_pic_s;
+use nvk_video_bindings::nvk_cmd_buffer;
+use nvk_video_bindings::nvk_image;
+use nvk_video_bindings::nvk_image_view;
+use nvk_video_bindings::StdVideoDecodeH264PictureInfo;
+use nvk_video_bindings::StdVideoH264SequenceParameterSet;
+use nvk_video_bindings::VkVideoBeginCodingInfoKHR;
+use nvk_video_bindings::VkVideoReferenceSlotInfoKHR;
+use nvk_video_bindings::VK_SUCCESS;
+
+use crate::align_u32;
+use crate::append_rust_push;
+use crate::decode::VideoDecoder;
+use crate::use_video_engine;
+use crate::vk_find_struct_const;
+
+/// The type of picture being decoded.
+#[derive(Debug, Default, Clone, Copy)]
+enum PictureType {
+    /// Top field has been decoded.
+    Top = 1,
+    /// Bottom field has been decoded.
+    Bottom = 2,
+    /// A frame, i.e.: either progressive content or both fields have
+    /// been decoded.
+    #[default]
+    Frame = 3,
+}
+
+#[derive(Debug, Default)]
+struct FrameData {
+    /// The `pic_idx` value associated with this frame.
+    pic_idx: Option<u32>,
+    /// The `dpb_idx` value associated with this frame.
+    dpb_idx: Option<u32>,
+    /// Is this the first field or a complementary field for a given picture?
+    first_field_or_complementary: bool,
+    /// The type of picture being decoded. This keeps track of what we have seen
+    /// so far.
+    picture_ty: PictureType,
+}
+
+fn compute_opaque_buffer_sizes(
+    sps: &StdVideoH264SequenceParameterSet,
+) -> (u32, u32, u32) {
+    let pic_height_in_map_units = sps.pic_height_in_map_units_minus1 + 1;
+    let pic_width_in_mbs = sps.pic_width_in_mbs_minus1 + 1;
+    let max_num_ref_frames = sps.max_num_ref_frames + 1;
+
+    let mut coloc_size = align_u32(
+        align_u32(pic_height_in_map_units, 2) * pic_width_in_mbs * 64 - 63,
+        0x100,
+    );
+    coloc_size *= u32::from(max_num_ref_frames);
+
+    let mbhist_size = align_u32(pic_width_in_mbs * 104, 0x100);
+    let history_size = align_u32(pic_width_in_mbs * 0x300, 0x200);
+
+    (coloc_size, mbhist_size, history_size)
+}
+
+fn get_opaque_mem_addrs(nvk_cmd: *mut nvk_cmd_buffer) -> (u64, u64, u64) {
+    unsafe {
+        let vid = (*nvk_cmd).video.vid;
+
+        let mem0 = (*(*vid).mems[0].mem).mem;
+        let mem0_addr = (*(*mem0).va).addr + (*vid).mems[0].offset;
+
+        let mem1 = (*(*vid).mems[1].mem).mem;
+        let mem1_addr = (*(*mem1).va).addr + (*vid).mems[1].offset;
+
+        let mem2 = (*(*vid).mems[2].mem).mem;
+        let mem2_addr = (*(*mem2).va).addr + (*vid).mems[2].offset;
+
+        (mem0_addr >> 8, mem1_addr >> 8, mem2_addr >> 8)
+    }
+}
+
+static EOS_ARRAY: [u8; 16] = [
+    0x0, 0x0, 0x1, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xb, 0x0, 0x0, 0x0,
+    0x0,
+];
+
+fn to_gob_value(y_log2: u8) -> u32 {
+    match 1 << y_log2 {
+        2 => 0,
+        4 => 1,
+        8 => 2,
+        16 => 3,
+        32 => 4,
+        other => panic!("unsupported GOB value: {other}"),
+    }
+}
+
+#[derive(Debug, Clone, Copy)]
+struct GpuBufferAddresses {
+    pic: u64,
+    slice_offsets: u64,
+    mbstatus: u64,
+}
+
+/// Upload the parameters to the GPU.
+fn upload_to_the_gpu(
+    nvk_cmd: *mut nvk_cmd_buffer,
+    nvh264: _nvdec_h264_pic_s,
+    slice_offsets: [u32; 256],
+) -> GpuBufferAddresses {
+    let mut nvh264_ptr = std::ptr::null_mut();
+    let mut pic_gpu_addr = 0;
+    unsafe {
+        let res = nvk_video_bindings::nvk_cmd_buffer_upload_alloc(
+            nvk_cmd,
+            std::mem::size_of::<nvk_video_bindings::nvdec_h264_pic_s>()
+                .try_into()
+                .unwrap(),
+            256,
+            &mut pic_gpu_addr,
+            &mut nvh264_ptr as *mut *mut _ as *mut *mut std::ffi::c_void,
+        );
+
+        assert!(res == VK_SUCCESS);
+        std::ptr::copy_nonoverlapping(&nvh264, nvh264_ptr, 1);
+    }
+
+    let mut slice_offsets_ptr = std::ptr::null_mut();
+    let mut slice_offsets_address = 0;
+
+    unsafe {
+        let res = nvk_video_bindings::nvk_cmd_buffer_upload_alloc(
+            nvk_cmd,
+            std::mem::size_of_val(&slice_offsets).try_into().unwrap(),
+            256,
+            &mut slice_offsets_address,
+            &mut slice_offsets_ptr as *mut *mut _ as *mut *mut std::ffi::c_void,
+        );
+
+        assert!(res == VK_SUCCESS);
+        std::ptr::copy_nonoverlapping(
+            slice_offsets.as_ptr(),
+            slice_offsets_ptr,
+            slice_offsets.len(),
+        );
+    }
+
+    // Just upload this to the GPU for now, we will hook it up later.
+    let mut mbstatus = std::ptr::null_mut();
+    let mut mbstatus_address = 0;
+    unsafe {
+        let res = nvk_video_bindings::nvk_cmd_buffer_upload_alloc(
+            nvk_cmd,
+            4096,
+            256,
+            &mut mbstatus_address,
+            &mut mbstatus as *mut *mut _ as *mut *mut std::ffi::c_void,
+        );
+
+        assert!(res == VK_SUCCESS);
+    }
+
+    GpuBufferAddresses {
+        pic: pic_gpu_addr,
+        slice_offsets: slice_offsets_address,
+        mbstatus: mbstatus_address,
+    }
+}
+
+/// Session data stored in opaque `nvk_video_session::rust` pointer.
+#[derive(Default, Debug)]
+pub(crate) struct Decoder {
+    /// Data associated with each image view.
+    slots: HashMap<*const nvk_image_view, FrameData>,
+    /// A counter for the frame number. Note that the hardware wants a u32.
+    frame_num: u32,
+    /// The free picture slots.
+    free_pic_slots: HashSet<u32>,
+    /// The free DPB slots.
+    free_dpb_slots: HashSet<u32>,
+}
+
+impl Decoder {
+    /// Gets the ith slot from the `begin_info`. These slots are the ones the
+    /// application plans to use during the `vkCmdBeginVideoCodingKHR` and
+    /// `vkCmdEndVideoCodingKHR` calls.
+    fn get_ith_planned_slot(
+        begin_info: &VkVideoBeginCodingInfoKHR,
+        i: usize,
+    ) -> (VkVideoReferenceSlotInfoKHR, *const nvk_image_view) {
+        if i >= begin_info.referenceSlotCount as usize {
+            panic!("Invalid reference slot index {i}");
+        }
+
+        let ref_slot = unsafe { *begin_info.pReferenceSlots.add(i as usize) };
+        let f_dpb_iv = unsafe { *ref_slot.pPictureResource }.imageViewBinding;
+
+        let iv =
+            unsafe { nvk_video_bindings::nvk_image_view_from_handle(f_dpb_iv) };
+
+        (ref_slot, iv)
+    }
+
+    /// Gets the ith slot for the frame currently being decoded. This is a slot
+    /// that is referenced by the current frame.
+    fn get_ith_slot_for_frame(
+        frame_info: &nvk_video_bindings::VkVideoDecodeInfoKHR,
+        i: usize,
+    ) -> (VkVideoReferenceSlotInfoKHR, *const nvk_image_view) {
+        if i >= frame_info.referenceSlotCount as usize {
+            panic!("Invalid reference slot index {i}");
+        }
+
+        let ref_slot = unsafe { *frame_info.pReferenceSlots.add(i) };
+        let f_dpb_iv = unsafe { *ref_slot.pPictureResource }.imageViewBinding;
+
+        let iv =
+            unsafe { nvk_video_bindings::nvk_image_view_from_handle(f_dpb_iv) };
+
+        (ref_slot, iv)
+    }
+
+    fn remove_invalid_slots(&mut self, begin_info: &VkVideoBeginCodingInfoKHR) {
+        let mut entries_to_remove = Vec::new();
+
+        for &key in self.slots.keys() {
+            let mut found = false;
+
+            for i in 0..begin_info.referenceSlotCount {
+                let (ref_slot, f_dpb_iv) =
+                    Self::get_ith_planned_slot(begin_info, i as usize);
+
+                if key == f_dpb_iv && ref_slot.slotIndex >= 0 {
+                    found = true;
+                    break;
+                }
+            }
+
+            if !found {
+                entries_to_remove.push(key);
+            }
+        }
+
+        for key in entries_to_remove {
+            self.slots.remove(&key).unwrap();
+        }
+
+        // i.e.: everything is free.
+        self.free_pic_slots = (0..=16).collect();
+        self.free_dpb_slots = (0..=16).collect();
+        for frame_slot in self.slots.values() {
+            if let Some(pic_idx) = frame_slot.pic_idx {
+                self.free_pic_slots.remove(&pic_idx);
+            }
+            if let Some(dpb_idx) = frame_slot.dpb_idx {
+                self.free_dpb_slots.remove(&dpb_idx);
+            }
+        }
+    }
+
+    /// Forcibly find a frame. If the frame has not been submitted, it's an
+    /// application error.
+    fn find_submitted_frame<'a>(
+        slots: &'a mut HashMap<*const nvk_image_view, FrameData>,
+        iv: *const nvk_image_view,
+    ) -> &'a mut FrameData {
+        slots.get_mut(&iv).expect(
+        "Frame data not found. Either this picture was not submitted or invalidated.",
+    )
+    }
+
+    /// Get the `pic_idx` value associated with the given image view. If this is
+    /// the first time we are seeing this image view, then allocate a new
+    /// `pic_idx` value.
+    fn get_pic_idx(&mut self, iv: *const nvk_image_view) -> u32 {
+        if let Some(frame_data) = self.slots.get(&iv) {
+            if let Some(pic_idx) = frame_data.pic_idx {
+                return pic_idx;
+            }
+        }
+
+        let pic_idx = *self
+            .free_pic_slots
+            .iter()
+            .min()
+            .expect("Bad DPB management");
+
+        self.free_pic_slots.remove(&pic_idx);
+
+        let frame_data = FrameData {
+            pic_idx: Some(pic_idx),
+            ..Default::default()
+        };
+
+        self.slots.insert(iv, frame_data);
+
+        pic_idx
+    }
+
+    /// Get the `dpb_idx` value associated with the given image view or assign
+    /// one if needed. This image view *must* have been submitted already.
+    fn get_dpb_idx(&mut self, iv: *const nvk_image_view) -> u32 {
+        let frame_data = Self::find_submitted_frame(&mut self.slots, iv);
+
+        if let Some(dpb_idx) = frame_data.dpb_idx {
+            return dpb_idx;
+        } else {
+            let dpb_idx = *self
+                .free_dpb_slots
+                .iter()
+                .min()
+                .expect("Bad DPB management");
+
+            self.free_dpb_slots.remove(&dpb_idx);
+
+            frame_data.dpb_idx = Some(dpb_idx);
+
+            dpb_idx
+        }
+    }
+
+    fn is_field(&mut self, iv: *const nvk_image_view) -> bool {
+        Self::find_submitted_frame(&mut self.slots, iv)
+            .first_field_or_complementary
+    }
+
+    fn set_field(&mut self, iv: *const nvk_image_view, is_field: bool) {
+        Self::find_submitted_frame(&mut self.slots, iv)
+            .first_field_or_complementary = is_field;
+    }
+
+    fn get_picture_type(&mut self, iv: *const nvk_image_view) -> PictureType {
+        Self::find_submitted_frame(&mut self.slots, iv).picture_ty
+    }
+
+    fn set_picture_type(
+        &mut self,
+        iv: *const nvk_image_view,
+        picture_ty: PictureType,
+    ) {
+        Self::find_submitted_frame(&mut self.slots, iv).picture_ty = picture_ty;
+    }
+
+    fn set_reference_frames(
+        &mut self,
+        nvh264: &mut nvk_video_bindings::nvdec_h264_pic_s,
+        frame_info: &nvk_video_bindings::VkVideoDecodeInfoKHR,
+        (luma_base, chroma_base): (&mut [u32; 17], &mut [u32; 17]),
+    ) {
+        for i in 0..frame_info.referenceSlotCount as usize {
+            let (vk_ref_slot, iv) =
+                Decoder::get_ith_slot_for_frame(frame_info, i);
+
+            let img = unsafe { (*iv).vk.image as *mut nvk_image };
+
+            let dpb_slot = vk_find_struct_const!(
+                vk_ref_slot.pNext,
+                VIDEO_DECODE_H264_DPB_SLOT_INFO,
+                KHR
+            );
+
+            let vk_ref_info = unsafe { *dpb_slot.pStdReferenceInfo };
+
+            let dpb_idx = self.get_dpb_idx(iv);
+            let pic_idx = self.get_pic_idx(iv);
+
+            let is_field = self.is_field(iv);
+            let picture_ty = self.get_picture_type(iv);
+
+            let marking =
+                if vk_ref_info.flags.used_for_long_term_reference() != 0 {
+                    2
+                } else {
+                    1
+                };
+
+            let top_field_marking = match picture_ty {
+                PictureType::Top | PictureType::Frame => marking,
+                _ => 0,
+            };
+
+            let bottom_field_marking = match picture_ty {
+                PictureType::Bottom | PictureType::Frame => marking,
+                _ => 0,
+            };
+
+            let dpb_entry = &mut nvh264.dpb[dpb_idx as usize];
+
+            dpb_entry.set_index(pic_idx);
+            dpb_entry.set_col_idx(pic_idx);
+            dpb_entry.set_is_field(is_field as u32);
+            dpb_entry.set_state(picture_ty as u32);
+            dpb_entry.set_top_field_marking(top_field_marking);
+            dpb_entry.set_bottom_field_marking(bottom_field_marking);
+
+            dpb_entry.FieldOrderCnt[0] =
+                if vk_ref_info.PicOrderCnt[0] != i32::MAX {
+                    vk_ref_info.PicOrderCnt[0].try_into().unwrap()
+                } else {
+                    vk_ref_info.PicOrderCnt[1].try_into().unwrap()
+                };
+
+            dpb_entry.FieldOrderCnt[1] =
+                if vk_ref_info.PicOrderCnt[1] != i32::MAX {
+                    vk_ref_info.PicOrderCnt[1].try_into().unwrap()
+                } else {
+                    vk_ref_info.PicOrderCnt[0].try_into().unwrap()
+                };
+
+            dpb_entry.FrameIdx = vk_ref_info.FrameNum.try_into().unwrap();
+
+            dpb_entry.set_is_long_term(
+                vk_ref_info.flags.used_for_long_term_reference(),
+            );
+
+            dpb_entry.set_not_existing(vk_ref_info.flags.is_non_existing());
+
+            luma_base[pic_idx as usize] = unsafe {
+                nvk_video_bindings::nvk_image_base_address(img, 0) >> 8
+            }
+            .try_into()
+            .unwrap();
+
+            chroma_base[pic_idx as usize] = unsafe {
+                nvk_video_bindings::nvk_image_base_address(img, 1) >> 8
+            }
+            .try_into()
+            .unwrap();
+        }
+    }
+
+    fn set_current_picture_slot(
+        &mut self,
+        iv: *const nvk_image_view,
+        std_pic_info: &StdVideoDecodeH264PictureInfo,
+        interlaced: bool,
+    ) -> u32 {
+        if !interlaced {
+            assert!(
+            !self.slots.contains_key(&iv),
+            "This slot is in use, the application should have invalidated it"
+        );
+        }
+
+        let pic_idx = self.get_pic_idx(iv);
+
+        let is_field_pic = std_pic_info.flags.field_pic_flag() != 0;
+        let is_complementary_field_pair =
+            std_pic_info.flags.complementary_field_pair() != 0;
+        let is_bottom_field = std_pic_info.flags.bottom_field_flag() != 0;
+
+        self.set_field(iv, is_field_pic || is_complementary_field_pair);
+
+        if is_field_pic {
+            if is_complementary_field_pair {
+                self.set_picture_type(iv, PictureType::Frame);
+            } else if is_bottom_field {
+                self.set_picture_type(iv, PictureType::Bottom);
+            } else {
+                self.set_picture_type(iv, PictureType::Top);
+            }
+        } else {
+            self.set_picture_type(iv, PictureType::Frame);
+        }
+
+        pic_idx
+    }
+}
+
+impl VideoDecoder for Decoder {
+    fn begin(
+        &mut self,
+        nvk_cmd: *mut nvk_cmd_buffer,
+        begin_info: &nvk_video_bindings::VkVideoBeginCodingInfoKHR,
+    ) {
+        self.remove_invalid_slots(&begin_info);
+
+        let mut push = Push::new();
+
+        use_video_engine(&mut push);
+        append_rust_push(push, nvk_cmd);
+    }
+
+    fn decode(
+        &mut self,
+        nvk_cmd: *mut nvk_cmd_buffer,
+        frame_info: &nvk_video_bindings::VkVideoDecodeInfoKHR,
+    ) {
+        let h264_pic_info = vk_find_struct_const!(
+            frame_info.pNext,
+            VIDEO_DECODE_H264_PICTURE_INFO,
+            KHR
+        );
+
+        let std_pic_info = unsafe { *h264_pic_info.pStdPictureInfo };
+
+        let sps = unsafe {
+            *nvk_video_bindings::vk_video_find_h264_dec_std_sps(
+                (*nvk_cmd).video.params as *const _,
+                std_pic_info.seq_parameter_set_id.into(),
+            )
+        };
+
+        let pps = unsafe {
+            *nvk_video_bindings::vk_video_find_h264_dec_std_pps(
+                (*nvk_cmd).video.params as *const _,
+                std_pic_info.pic_parameter_set_id.into(),
+            )
+        };
+
+        // I do not know why the size of the coloc buffer is not passed to the hardware.
+        let (_coloc_size, mbhist_size, history_size) =
+            compute_opaque_buffer_sizes(&sps);
+
+        let dst_iv = unsafe {
+            nvk_video_bindings::nvk_image_view_from_handle(
+                frame_info.dstPictureResource.imageViewBinding,
+            )
+        };
+        let dst_img_ptr =
+            unsafe { *dst_iv }.vk.image as *mut nvk_video_bindings::nvk_image;
+        let dst_img = unsafe { &mut *dst_img_ptr };
+
+        let mut nvh264 = _nvdec_h264_pic_s::default();
+
+        nvh264.explicitEOSPresentFlag = 1;
+        nvh264.eos = EOS_ARRAY;
+
+        nvh264.slice_count = h264_pic_info.sliceCount.into();
+        nvh264.stream_len = u32::try_from(frame_info.srcBufferRange).unwrap()
+            + std::mem::size_of_val(&EOS_ARRAY) as u32;
+
+        nvh264.mbhist_buffer_size = mbhist_size;
+        nvh264.log2_max_pic_order_cnt_lsb_minus4 =
+            sps.log2_max_pic_order_cnt_lsb_minus4.into();
+        nvh264.delta_pic_order_always_zero_flag =
+            sps.flags.delta_pic_order_always_zero_flag() as i32;
+        nvh264.frame_mbs_only_flag =
+            sps.flags.frame_mbs_only_flag().try_into().unwrap();
+        nvh264.PicWidthInMbs =
+            (sps.pic_width_in_mbs_minus1 + 1).try_into().unwrap();
+
+        nvh264.FrameHeightInMbs =
+            (sps.pic_height_in_map_units_minus1 + 1).try_into().unwrap();
+        if nvh264.frame_mbs_only_flag == 0 {
+            nvh264.FrameHeightInMbs *= 2;
+        }
+
+        nvh264.set_tileFormat(1);
+
+        let y_log2 = dst_img.planes[0].nil.levels[0].tiling.y_log2;
+        nvh264.set_gob_height(to_gob_value(y_log2));
+
+        nvh264.entropy_coding_mode_flag =
+            pps.flags.entropy_coding_mode_flag() as _;
+        nvh264.pic_order_present_flag =
+            pps.flags.bottom_field_pic_order_in_frame_present_flag() as _;
+        nvh264.num_ref_idx_l0_active_minus1 =
+            pps.num_ref_idx_l0_default_active_minus1.into();
+        nvh264.num_ref_idx_l1_active_minus1 =
+            pps.num_ref_idx_l1_default_active_minus1.into();
+        nvh264.deblocking_filter_control_present_flag =
+            pps.flags.deblocking_filter_control_present_flag() as _;
+        nvh264.redundant_pic_cnt_present_flag =
+            pps.flags.redundant_pic_cnt_present_flag() as _;
+        nvh264.transform_8x8_mode_flag =
+            pps.flags.transform_8x8_mode_flag() as _;
+        nvh264.pitch_luma = dst_img.planes[0].nil.levels[0].row_stride_B;
+        nvh264.pitch_chroma = dst_img.planes[1].nil.levels[0].row_stride_B;
+        nvh264.luma_bot_offset =
+            u32::try_from(nvh264.PicWidthInMbs).unwrap() * 16;
+        nvh264.chroma_bot_offset = nvh264.pitch_chroma / 2;
+
+        nvh264.HistBufferSize = history_size >> 8;
+
+        let is_field = std_pic_info.flags.field_pic_flag() != 0;
+        let mbaff_frame_flag = sps.flags.mb_adaptive_frame_field_flag() != 0;
+        let mbaff_frame_flag = mbaff_frame_flag && !is_field;
+        nvh264.set_MbaffFrameFlag(mbaff_frame_flag.into());
+
+        nvh264.set_direct_8x8_inference_flag(
+            sps.flags.direct_8x8_inference_flag() as _,
+        );
+        nvh264.set_weighted_pred_flag(pps.flags.weighted_pred_flag() as _);
+        nvh264.set_constrained_intra_pred_flag(
+            pps.flags.constrained_intra_pred_flag() as _,
+        );
+        nvh264.set_ref_pic_flag(std_pic_info.flags.is_reference() as _);
+        nvh264.set_field_pic_flag(std_pic_info.flags.field_pic_flag() as _);
+        nvh264
+            .set_bottom_field_flag(std_pic_info.flags.bottom_field_flag() as _);
+        nvh264.set_second_field(
+            std_pic_info.flags.complementary_field_pair() as _
+        );
+        nvh264.set_log2_max_frame_num_minus4(
+            sps.log2_max_frame_num_minus4.into(),
+        );
+        nvh264.set_chroma_format_idc(sps.chroma_format_idc);
+        nvh264.set_pic_order_cnt_type(sps.pic_order_cnt_type);
+        nvh264.set_pic_init_qp_minus26(pps.pic_init_qp_minus26.into());
+        nvh264.set_chroma_qp_index_offset(pps.chroma_qp_index_offset.into());
+        nvh264.set_second_chroma_qp_index_offset(
+            pps.second_chroma_qp_index_offset.into(),
+        );
+
+        nvh264.set_weighted_bipred_idc(pps.weighted_bipred_idc);
+        nvh264.set_frame_num(std_pic_info.frame_num.into());
+
+        nvh264.CurrFieldOrderCnt[0] = if std_pic_info.PicOrderCnt[0] != i32::MAX
+        {
+            std_pic_info.PicOrderCnt[0]
+        } else {
+            std_pic_info.PicOrderCnt[1]
+        };
+
+        nvh264.CurrFieldOrderCnt[1] = if std_pic_info.PicOrderCnt[1] != i32::MAX
+        {
+            std_pic_info.PicOrderCnt[1]
+        } else {
+            std_pic_info.PicOrderCnt[0]
+        };
+
+        nvh264.WeightScale = [[[0x10; 4]; 4]; 6];
+        nvh264.WeightScale8x8 = [[[0x10; 8]; 8]; 2];
+
+        let mut slice_offsets = [0; 256];
+        for i in 0..(h264_pic_info.sliceCount + 1) as usize {
+            slice_offsets[i] = unsafe { *h264_pic_info.pSliceOffsets.add(i) };
+        }
+
+        let mut luma_base = [0; 17];
+        let mut chroma_base = [0; 17];
+
+        self.set_reference_frames(
+            &mut nvh264,
+            &frame_info,
+            (&mut luma_base, &mut chroma_base),
+        );
+
+        let cur_pic_idx = self.set_current_picture_slot(
+            dst_iv,
+            &std_pic_info,
+            nvh264.frame_mbs_only_flag == 0,
+        );
+        nvh264.set_CurrPicIdx(cur_pic_idx);
+        nvh264.set_CurrColIdx(cur_pic_idx);
+
+        nvh264.set_lossless_ipred8x8_filter_enable(0);
+        nvh264.set_qpprime_y_zero_transform_bypass_flag(
+            sps.flags.qpprime_y_zero_transform_bypass_flag(),
+        );
+
+        luma_base[cur_pic_idx as usize] = unsafe {
+            nvk_video_bindings::nvk_image_base_address(dst_img, 0) >> 8
+        }
+        .try_into()
+        .unwrap();
+        chroma_base[cur_pic_idx as usize] = unsafe {
+            nvk_video_bindings::nvk_image_base_address(dst_img, 1) >> 8
+        }
+        .try_into()
+        .unwrap();
+
+        let (mem0_addr, mem1_addr, mem2_addr) = get_opaque_mem_addrs(nvk_cmd);
+
+        let src_buffer = unsafe {
+            nvk_video_bindings::nvk_buffer_from_handle(frame_info.srcBuffer)
+        };
+        let src_address = unsafe {
+            nvk_video_bindings::nvk_buffer_address(
+                src_buffer,
+                frame_info.srcBufferOffset,
+            )
+        };
+
+        let GpuBufferAddresses {
+            pic: pic_gpu_address,
+            slice_offsets: slice_offsets_address,
+            mbstatus: mbstatus_address,
+        } = upload_to_the_gpu(nvk_cmd, nvh264, slice_offsets);
+
+        let mut push = Push::new();
+
+        push.push_method(clc5b0::SetApplicationId {
+            id: clc5b0::SetApplicationIdId::H264,
+        });
+
+        push.push_method(clc5b0::SetControlParams {
+            codec_type: clc5b0::SetControlParamsCodecType::H264,
+            gptimer_on: 1,
+            err_conceal_on: 1,
+            mbtimer_on: 1,
+            error_frm_idx: self.frame_num % u32::from(sps.max_num_ref_frames),
+            ret_error: 0,
+            ec_intra_frame_using_pslc: 0,
+            all_intra_frame: 0,
+            reserved: Default::default(),
+        });
+
+        push.push_method(clc5b0::SetDrvPicSetupOffset {
+            offset: (pic_gpu_address >> 8).try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::SetInBufBaseOffset {
+            offset: (src_address >> 8).try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::SetPictureIndex {
+            index: self.frame_num,
+        });
+
+        push.push_method(clc5b0::SetSliceOffsetsBufOffset {
+            offset: (slice_offsets_address >> 8).try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::SetColocDataOffset {
+            offset: mem0_addr.try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::SetHistoryOffset {
+            offset: mem2_addr.try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::SetNvdecStatusOffset {
+            offset: (mbstatus_address >> 8).try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::SetPictureLumaOffset0 {
+            offset: luma_base[0].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset1 {
+            offset: luma_base[1].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset2 {
+            offset: luma_base[2].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset3 {
+            offset: luma_base[3].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset4 {
+            offset: luma_base[4].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset5 {
+            offset: luma_base[5].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset6 {
+            offset: luma_base[6].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset7 {
+            offset: luma_base[7].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset8 {
+            offset: luma_base[8].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset9 {
+            offset: luma_base[9].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset10 {
+            offset: luma_base[10].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset11 {
+            offset: luma_base[11].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset12 {
+            offset: luma_base[12].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset13 {
+            offset: luma_base[13].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset14 {
+            offset: luma_base[14].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset15 {
+            offset: luma_base[15].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset16 {
+            offset: luma_base[16].try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::SetPictureChromaOffset0 {
+            offset: chroma_base[0].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset1 {
+            offset: chroma_base[1].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset2 {
+            offset: chroma_base[2].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset3 {
+            offset: chroma_base[3].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset4 {
+            offset: chroma_base[4].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset5 {
+            offset: chroma_base[5].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset6 {
+            offset: chroma_base[6].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset7 {
+            offset: chroma_base[7].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset8 {
+            offset: chroma_base[8].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset9 {
+            offset: chroma_base[9].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset10 {
+            offset: chroma_base[10].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset11 {
+            offset: chroma_base[11].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset12 {
+            offset: chroma_base[12].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset13 {
+            offset: chroma_base[13].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset14 {
+            offset: chroma_base[14].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset15 {
+            offset: chroma_base[15].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset16 {
+            offset: chroma_base[16].try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::H264SetMbhistBufOffset {
+            offset: mem1_addr.try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::Execute {
+            notify: clc5b0::ExecuteNotify::Disable,
+            notify_on: clc5b0::ExecuteNotifyOn::End,
+            awaken: clc5b0::ExecuteAwaken::Disable,
+        });
+
+        append_rust_push(push, nvk_cmd);
+        self.frame_num = self.frame_num.wrapping_add(1);
+    }
+}
diff --git a/src/nouveau/vulkan/video/decode/h265.rs b/src/nouveau/vulkan/video/decode/h265.rs
new file mode 100644
index 0000000000000000000000000000000000000000..7c55ffff377a5c4d451569594982177cba085c5a
--- /dev/null
+++ b/src/nouveau/vulkan/video/decode/h265.rs
@@ -0,0 +1,1292 @@
+// Copyright © 2024 Collabora, Ltd
+// SPDX-License-Identifier: MIT
+
+//! H265 decode implementation.
+
+use std::collections::HashMap;
+use std::collections::HashSet;
+
+use crate::align_u32;
+use crate::append_rust_push;
+use crate::decode::VideoDecoder;
+use crate::use_video_engine;
+use crate::vk_find_struct_const;
+
+use nv_push_rs::Push;
+use nvidia_headers::classes::clc5b0::mthd as clc5b0;
+use nvidia_headers::classes::clc9b0::mthd as clc9b0;
+use nvk_video_bindings::nvk_cmd_buffer;
+use nvk_video_bindings::nvk_image;
+use nvk_video_bindings::nvk_image_view;
+use nvk_video_bindings::StdVideoDecodeH265PictureInfo;
+use nvk_video_bindings::StdVideoH265PictureParameterSet;
+use nvk_video_bindings::StdVideoH265SequenceParameterSet;
+use nvk_video_bindings::VkVideoBeginCodingInfoKHR;
+use nvk_video_bindings::VkVideoReferenceSlotInfoKHR;
+use nvk_video_bindings::_nvdec_hevc_pic_s;
+use nvk_video_bindings::VK_SUCCESS;
+
+const CTU_SIZE: u32 = 64;
+const MB_SIZE: u32 = 16;
+const FILTER_SIZE: u32 = 608;
+const SAO_SIZE: u32 = 4864;
+
+// Sourced from nvdec_drv.h, in bytes.
+const GIP_ASIC_TILE_SIZE: usize = (20 * 22 * 2 * 2 + 16 + 15) & !0xf;
+
+const MAX_TILE_SIZE_ENTRIES: usize =
+    GIP_ASIC_TILE_SIZE / std::mem::size_of::<u16>();
+
+#[repr(C)]
+#[allow(non_snake_case)]
+// This was sourced from the Tegra implementation in ffmpeg, which was also
+// reverse engineered. It's the best we can do without any official
+// documentation.
+struct ScalingList {
+    pub ScalingListDCCoeff16x16: [u8; 6],
+    pub ScalingListDCCoeff32x32: [u8; 2],
+    pub reserved0: [u8; 8],
+
+    pub ScalingList4x4: [[u8; 16]; 6],
+    pub ScalingList8x8: [[u8; 64]; 6],
+    pub ScalingList16x16: [[u8; 64]; 6],
+    pub ScalingList32x32: [[u8; 64]; 2],
+}
+
+impl ScalingList {
+    fn from_vulkan_params(
+        sps: &StdVideoH265SequenceParameterSet,
+        pps: &StdVideoH265PictureParameterSet,
+    ) -> Self {
+        let sl = if pps.flags.pps_scaling_list_data_present_flag() != 0 {
+            unsafe { *pps.pScalingLists }
+        } else {
+            unsafe { *sps.pScalingLists }
+        };
+
+        Self {
+            ScalingListDCCoeff16x16: sl.ScalingListDCCoef16x16,
+            ScalingListDCCoeff32x32: sl.ScalingListDCCoef32x32,
+            reserved0: [0; 8],
+            ScalingList4x4: Self::rearrange_scaling_list_4x4(sl.ScalingList4x4),
+            ScalingList8x8: Self::rearrange_scaling_list_16x16(
+                sl.ScalingList8x8,
+            ),
+            ScalingList16x16: Self::rearrange_scaling_list_16x16(
+                sl.ScalingList16x16,
+            ),
+            ScalingList32x32: Self::rearrange_scaling_list_32x32(
+                sl.ScalingList32x32,
+            ),
+        }
+    }
+
+    fn rearrange_scaling_list_4x4(
+        scaling_list: [[u8; 16]; 6],
+    ) -> [[u8; 16]; 6] {
+        // I have no idea whether that's zigzag, raster or up-right diagonal.
+        // This was straight up reverse engineered by poking at the values from
+        // the blob.
+        const PERMUTATION: [usize; 16] =
+            [0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15];
+
+        let mut rearranged = [[0u8; 16]; 6];
+        for i in 0..6 {
+            for (j, &index) in PERMUTATION.iter().enumerate() {
+                rearranged[i][index] = scaling_list[i][j];
+            }
+        }
+        rearranged
+    }
+
+    fn rearrange_scaling_list_16x16(
+        scaling_list: [[u8; 64]; 6],
+    ) -> [[u8; 64]; 6] {
+        // Same here.
+        const PERMUTATION: [usize; 64] = [
+            0, 8, 16, 24, 32, 40, 48, 56, 1, 9, 17, 25, 33, 41, 49, 57, 2, 10,
+            18, 26, 34, 42, 50, 58, 3, 11, 19, 27, 35, 43, 51, 59, 4, 12, 20,
+            28, 36, 44, 52, 60, 5, 13, 21, 29, 37, 45, 53, 61, 6, 14, 22, 30,
+            38, 46, 54, 62, 7, 15, 23, 31, 39, 47, 55, 63,
+        ];
+
+        let mut rearranged = [[0u8; 64]; 6];
+        for i in 0..6 {
+            for (j, &index) in PERMUTATION.iter().enumerate() {
+                rearranged[i][index] = scaling_list[i][j];
+            }
+        }
+        rearranged
+    }
+
+    // XXX: this can be combined with 16x16, it's the same scan order.
+    fn rearrange_scaling_list_32x32(
+        scaling_list: [[u8; 64]; 2],
+    ) -> [[u8; 64]; 2] {
+        const PERMUTATION: [usize; 64] = [
+            0, 8, 16, 24, 32, 40, 48, 56, 1, 9, 17, 25, 33, 41, 49, 57, 2, 10,
+            18, 26, 34, 42, 50, 58, 3, 11, 19, 27, 35, 43, 51, 59, 4, 12, 20,
+            28, 36, 44, 52, 60, 5, 13, 21, 29, 37, 45, 53, 61, 6, 14, 22, 30,
+            38, 46, 54, 62, 7, 15, 23, 31, 39, 47, 55, 63,
+        ];
+
+        let mut rearranged = [[0u8; 64]; 2];
+        for i in 0..1 {
+            for (j, &index) in PERMUTATION.iter().enumerate() {
+                rearranged[i][index] = scaling_list[i][j];
+            }
+        }
+        rearranged
+    }
+}
+
+fn to_gob_value(y_log2: u8) -> u8 {
+    match 1 << y_log2 {
+        2 => 0,
+        4 => 1,
+        8 => 2,
+        16 => 3,
+        32 => 4,
+        other => panic!("unsupported GOB value: {other}"),
+    }
+}
+
+struct GpuBuffers {
+    coloc_address: u64,
+    filter_address: u64,
+
+    sao_offset: u32,
+    bsd_offset: u32,
+
+    colmv_size: u32,
+}
+
+impl GpuBuffers {
+    fn new(
+        nvk_cmd: *mut nvk_cmd_buffer,
+        sps: &StdVideoH265SequenceParameterSet,
+    ) -> Self {
+        let aligned_w = align_u32(sps.pic_width_in_luma_samples, CTU_SIZE);
+        let aligned_h = align_u32(sps.pic_height_in_luma_samples, CTU_SIZE);
+        let addreses = unsafe {
+            let vid = (*nvk_cmd).video.vid;
+
+            let mem0 = (*(*vid).mems[0].mem).mem;
+            let mem0_addr = (*(*mem0).va).addr + (*vid).mems[0].offset;
+
+            let mem1 = (*(*vid).mems[1].mem).mem;
+            let mem1_addr = (*(*mem1).va).addr + (*vid).mems[1].offset;
+
+            let mem2 = (*(*vid).mems[2].mem).mem;
+            let mem2_addr = (*(*mem2).va).addr + (*vid).mems[2].offset;
+
+            (mem0_addr >> 8, mem1_addr >> 8, mem2_addr >> 8)
+        };
+
+        // The SAO data is co-located with the filter buffer.
+        let sao_offset = FILTER_SIZE * sps.pic_height_in_luma_samples;
+        // Same for this.
+        let bsd_offset = sao_offset + SAO_SIZE * sps.pic_height_in_luma_samples;
+
+        GpuBuffers {
+            coloc_address: addreses.0,
+            filter_address: addreses.1,
+            sao_offset,
+            bsd_offset,
+            colmv_size: aligned_w * aligned_h / MB_SIZE,
+        }
+    }
+}
+
+#[derive(Debug, Clone, Copy)]
+struct Uploads {
+    pic: u64,
+    tile_offsets: u64,
+    mbstatus: u64,
+    scaling_list: u64,
+    // Only for c9b0?
+    intra_top: u64,
+}
+
+impl Uploads {
+    /// Upload the parameters to the GPU.
+    fn upload_to_the_gpu(
+        nvk_cmd: *mut nvk_cmd_buffer,
+        nvh265: _nvdec_hevc_pic_s,
+        tile_offsets: [u16; MAX_TILE_SIZE_ENTRIES as usize],
+        scaling_lists: Option<ScalingList>,
+    ) -> Self {
+        let mut nvh265_ptr = std::ptr::null_mut();
+        let mut pic_gpu_addr = 0;
+        unsafe {
+            let res = nvk_video_bindings::nvk_cmd_buffer_upload_alloc(
+                nvk_cmd,
+                std::mem::size_of::<nvk_video_bindings::nvdec_hevc_pic_s>()
+                    .try_into()
+                    .unwrap(),
+                256,
+                &mut pic_gpu_addr,
+                &mut nvh265_ptr as *mut *mut _ as *mut *mut std::ffi::c_void,
+            );
+
+            assert!(res == VK_SUCCESS);
+            std::ptr::copy_nonoverlapping(&nvh265, nvh265_ptr, 1);
+        }
+
+        let mut tile_offsets_ptr = std::ptr::null_mut();
+        let mut tile_offsets_address = 0;
+
+        unsafe {
+            let res = nvk_video_bindings::nvk_cmd_buffer_upload_alloc(
+                nvk_cmd,
+                std::mem::size_of_val(&tile_offsets).try_into().unwrap(),
+                256,
+                &mut tile_offsets_address,
+                &mut tile_offsets_ptr as *mut *mut _
+                    as *mut *mut std::ffi::c_void,
+            );
+
+            assert!(res == VK_SUCCESS);
+            std::ptr::copy_nonoverlapping(
+                tile_offsets.as_ptr(),
+                tile_offsets_ptr,
+                tile_offsets.len(),
+            );
+        }
+
+        // I have no idea why, since this is supposed to be a small buffer
+        // containing some status from the decode job, but if you use a lower
+        // size like h264, you regress on the test suite. I guess this just
+        // highlights that there's something more going on here that we do not
+        // know.
+        //
+        // TODO: place this in its own vkDeviceMemory.
+        let mut mbstatus_ptr = std::ptr::null_mut();
+        let mut mbstatus_address = 0;
+        unsafe {
+            let res = nvk_video_bindings::nvk_cmd_buffer_upload_alloc(
+                nvk_cmd,
+                65536,
+                256,
+                &mut mbstatus_address,
+                &mut mbstatus_ptr as *mut *mut _ as *mut *mut std::ffi::c_void,
+            );
+
+            assert!(res == VK_SUCCESS);
+        }
+
+        let mut scaling_list_ptr = std::ptr::null_mut();
+        let mut scaling_list_address = 0;
+        const SL_SIZE: usize = std::mem::size_of::<ScalingList>();
+        unsafe {
+            let res = nvk_video_bindings::nvk_cmd_buffer_upload_alloc(
+                nvk_cmd,
+                SL_SIZE as _,
+                256,
+                &mut scaling_list_address,
+                &mut scaling_list_ptr as *mut *mut _
+                    as *mut *mut std::ffi::c_void,
+            );
+
+            assert!(res == VK_SUCCESS);
+
+            match scaling_lists {
+                None => {
+                    let zero = [0u8; SL_SIZE];
+                    std::ptr::copy_nonoverlapping(
+                        zero.as_ptr(),
+                        scaling_list_ptr,
+                        SL_SIZE,
+                    );
+                }
+                Some(scaling_list) => {
+                    std::ptr::copy_nonoverlapping(
+                        &scaling_list as *const _ as *const u8,
+                        scaling_list_ptr,
+                        SL_SIZE,
+                    );
+                }
+            }
+        }
+
+        // TODO: make this its own VkDeviceMemory, there is no reason to use the
+        // upload BO, specially since this thing is 65K bytes.
+        let mut intra_top = std::ptr::null_mut();
+        let mut intra_top_address = 0;
+        unsafe {
+            let res = nvk_video_bindings::nvk_cmd_buffer_upload_alloc(
+                nvk_cmd,
+                65536,
+                256,
+                &mut intra_top_address,
+                &mut intra_top as *mut *mut _ as *mut *mut std::ffi::c_void,
+            );
+
+            assert!(res == VK_SUCCESS);
+        }
+
+        Uploads {
+            pic: pic_gpu_addr,
+            tile_offsets: tile_offsets_address,
+            mbstatus: mbstatus_address,
+            scaling_list: scaling_list_address,
+            intra_top: intra_top_address,
+        }
+    }
+}
+
+#[derive(Debug, Default)]
+struct FrameData {
+    /// The `pic_idx` value associated with this frame.
+    pic_idx: Option<u32>,
+    slot_index: Option<i32>,
+}
+
+#[derive(Debug, Default)]
+pub(crate) struct Decoder {
+    /// Data associated with each image view.
+    slots: HashMap<i32, FrameData>,
+    frame_num: u32,
+
+    // TODO: this can be a simple bitmask
+    free_pic_slots: HashSet<u32>,
+}
+
+impl Decoder {
+    /// Gets the ith slot from the `begin_info`. These slots are the ones the
+    /// application plans to use during the `vkCmdBeginVideoCodingKHR` and
+    /// `vkCmdEndVideoCodingKHR` calls.
+    fn get_ith_planned_slot(
+        begin_info: &VkVideoBeginCodingInfoKHR,
+        i: usize,
+    ) -> (VkVideoReferenceSlotInfoKHR, *const nvk_image_view) {
+        if i >= begin_info.referenceSlotCount as usize {
+            panic!("Invalid reference slot index {i}");
+        }
+
+        let ref_slot = unsafe { *begin_info.pReferenceSlots.add(i as usize) };
+        let f_dpb_iv = unsafe { *ref_slot.pPictureResource }.imageViewBinding;
+
+        let iv =
+            unsafe { nvk_video_bindings::nvk_image_view_from_handle(f_dpb_iv) };
+
+        (ref_slot, iv)
+    }
+
+    /// Gets the ith slot for the frame currently being decoded. This is a slot
+    /// that is referenced by the current frame.
+    fn get_ith_slot_for_frame(
+        frame_info: &nvk_video_bindings::VkVideoDecodeInfoKHR,
+        i: usize,
+    ) -> (VkVideoReferenceSlotInfoKHR, *const nvk_image_view) {
+        if i >= frame_info.referenceSlotCount as usize {
+            panic!("Invalid reference slot index {i}");
+        }
+
+        let ref_slot = unsafe { *frame_info.pReferenceSlots.add(i) };
+        let f_dpb_iv = unsafe { *ref_slot.pPictureResource }.imageViewBinding;
+
+        let iv =
+            unsafe { nvk_video_bindings::nvk_image_view_from_handle(f_dpb_iv) };
+
+        (ref_slot, iv)
+    }
+
+    /// Get the `pic_idx` value associated with the given image view. If this is
+    /// the first time we are seeing this image view, then allocate a new
+    /// `pic_idx` value.
+    fn get_pic_idx(&mut self, slot_idx: i32) -> u32 {
+        if let Some(frame_data) = self.slots.get(&slot_idx) {
+            if let Some(pic_idx) = frame_data.pic_idx {
+                return pic_idx;
+            }
+        }
+
+        let pic_idx = *self
+            .free_pic_slots
+            .iter()
+            .min()
+            .expect("Bad DPB management");
+
+        self.free_pic_slots.remove(&pic_idx);
+
+        let frame_data = FrameData {
+            pic_idx: Some(pic_idx),
+            ..Default::default()
+        };
+
+        self.slots.insert(slot_idx, frame_data);
+
+        pic_idx
+    }
+
+    fn find_by_slot_idx<'a>(
+        slots: &'a mut HashMap<i32, FrameData>,
+        slot_idx: i32,
+    ) -> &'a FrameData {
+        slots.values()
+        .find(|f| f.slot_index.unwrap() == slot_idx)
+        .expect("Frame data not found. Either this picture was not submitted or invalidated.")
+    }
+
+    fn rps_to_ref_list(
+        &mut self,
+        rps: &[u8; 8],
+        list: &mut [u8],
+        start_index: &mut usize,
+    ) {
+        for &slot_idx in rps.iter().take(8) {
+            if slot_idx == 0xff {
+                break;
+            }
+
+            let frame_data =
+                Self::find_by_slot_idx(&mut self.slots, slot_idx as i32);
+            list[*start_index] = frame_data.pic_idx.unwrap() as u8;
+            *start_index += 1;
+        }
+    }
+
+    fn set_reference_frames(
+        &mut self,
+        nvh265: &mut nvk_video_bindings::nvdec_hevc_pic_s,
+        frame_info: &nvk_video_bindings::VkVideoDecodeInfoKHR,
+        std_pic_info: &StdVideoDecodeH265PictureInfo,
+        (luma_base, chroma_base): (&mut [u32; 17], &mut [u32; 17]),
+    ) {
+        let mut current_index = 0;
+        self.rps_to_ref_list(
+            &std_pic_info.RefPicSetStCurrBefore,
+            &mut nvh265.initreflistidxl0,
+            &mut current_index,
+        );
+        self.rps_to_ref_list(
+            &std_pic_info.RefPicSetStCurrAfter,
+            &mut nvh265.initreflistidxl0,
+            &mut current_index,
+        );
+        self.rps_to_ref_list(
+            &std_pic_info.RefPicSetLtCurr,
+            &mut nvh265.initreflistidxl0,
+            &mut current_index,
+        );
+
+        let mut current_index = 0;
+        self.rps_to_ref_list(
+            &std_pic_info.RefPicSetStCurrAfter,
+            &mut nvh265.initreflistidxl1,
+            &mut current_index,
+        );
+        self.rps_to_ref_list(
+            &std_pic_info.RefPicSetStCurrBefore,
+            &mut nvh265.initreflistidxl1,
+            &mut current_index,
+        );
+        self.rps_to_ref_list(
+            &std_pic_info.RefPicSetLtCurr,
+            &mut nvh265.initreflistidxl1,
+            &mut current_index,
+        );
+
+        for i in 0..frame_info.referenceSlotCount as usize {
+            let (vk_ref_slot, iv) =
+                Decoder::get_ith_slot_for_frame(frame_info, i);
+
+            let dpb_slot = vk_find_struct_const!(
+                vk_ref_slot.pNext,
+                VIDEO_DECODE_H265_DPB_SLOT_INFO,
+                KHR
+            );
+
+            let vk_ref_info = unsafe { *dpb_slot.pStdReferenceInfo };
+            let pic_idx = self.get_pic_idx(vk_ref_slot.slotIndex);
+
+            nvh265.RefDiffPicOrderCnts[pic_idx as usize] =
+                (std_pic_info.PicOrderCntVal - vk_ref_info.PicOrderCntVal)
+                    as i16;
+
+            let img = unsafe { (*iv).vk.image as *mut nvk_image };
+
+            luma_base[pic_idx as usize] = unsafe {
+                nvk_video_bindings::nvk_image_base_address(img, 0) >> 8
+            }
+            .try_into()
+            .unwrap();
+
+            chroma_base[pic_idx as usize] = unsafe {
+                nvk_video_bindings::nvk_image_base_address(img, 1) >> 8
+            }
+            .try_into()
+            .unwrap();
+        }
+    }
+
+    fn remove_invalid_slots(&mut self, begin_info: &VkVideoBeginCodingInfoKHR) {
+        let mut entries_to_remove = Vec::new();
+
+        for (&slot_idx, frame_data) in &mut self.slots {
+            let mut found = false;
+
+            for i in 0..begin_info.referenceSlotCount {
+                let (ref_slot, _) =
+                    Self::get_ith_planned_slot(begin_info, i as usize);
+
+                if slot_idx == ref_slot.slotIndex {
+                    found = true;
+                    frame_data.slot_index = Some(ref_slot.slotIndex);
+                    break;
+                }
+            }
+
+            if !found {
+                entries_to_remove.push(slot_idx);
+            }
+        }
+
+        for key in entries_to_remove {
+            self.slots.remove(&key).unwrap();
+        }
+
+        // i.e.: everything is free.
+        self.free_pic_slots = (0..=16).collect();
+        for frame_slot in self.slots.values() {
+            if let Some(pic_idx) = frame_slot.pic_idx {
+                self.free_pic_slots.remove(&pic_idx);
+            }
+        }
+    }
+
+    fn build_push(
+        &mut self,
+        gpu_addrs: &Uploads,
+        gpu_buffers: &GpuBuffers,
+        src_address: u64,
+        (luma_base, chroma_base): (&mut [u32; 17], &mut [u32; 17]),
+    ) -> Push {
+        let mut push = Push::new();
+
+        push.push_method(clc5b0::SetApplicationId {
+            id: clc5b0::SetApplicationIdId::Hevc,
+        });
+
+        push.push_method(clc5b0::SetControlParams {
+            codec_type: clc5b0::SetControlParamsCodecType::Hevc,
+            gptimer_on: 1,
+            err_conceal_on: 1,
+            mbtimer_on: 1,
+            error_frm_idx: 0, //(self.frame_num), // XXX TODO
+            ret_error: 0,
+            ec_intra_frame_using_pslc: 0,
+            all_intra_frame: 0,
+            reserved: Default::default(),
+        });
+
+        push.push_method(clc5b0::SetPictureIndex {
+            index: self.frame_num,
+        });
+
+        push.push_method(clc5b0::SetDrvPicSetupOffset {
+            offset: (gpu_addrs.pic >> 8).try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::SetInBufBaseOffset {
+            offset: (src_address >> 8).try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::SetNvdecStatusOffset {
+            offset: (gpu_addrs.mbstatus >> 8).try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::SetColocDataOffset {
+            offset: (gpu_buffers.coloc_address).try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::HevcSetFilterBufferOffset {
+            offset: (gpu_buffers.filter_address).try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::HevcSetTileSizesOffset {
+            offset: (gpu_addrs.tile_offsets >> 8).try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::HevcSetScalingListOffset {
+            offset: (gpu_addrs.scaling_list >> 8).try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::SetPictureLumaOffset0 {
+            offset: luma_base[0].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset1 {
+            offset: luma_base[1].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset2 {
+            offset: luma_base[2].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset3 {
+            offset: luma_base[3].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset4 {
+            offset: luma_base[4].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset5 {
+            offset: luma_base[5].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset6 {
+            offset: luma_base[6].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset7 {
+            offset: luma_base[7].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset8 {
+            offset: luma_base[8].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset9 {
+            offset: luma_base[9].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset10 {
+            offset: luma_base[10].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset11 {
+            offset: luma_base[11].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset12 {
+            offset: luma_base[12].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset13 {
+            offset: luma_base[13].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset14 {
+            offset: luma_base[14].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset15 {
+            offset: luma_base[15].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureLumaOffset16 {
+            offset: luma_base[16].try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::SetPictureChromaOffset0 {
+            offset: chroma_base[0].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset1 {
+            offset: chroma_base[1].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset2 {
+            offset: chroma_base[2].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset3 {
+            offset: chroma_base[3].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset4 {
+            offset: chroma_base[4].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset5 {
+            offset: chroma_base[5].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset6 {
+            offset: chroma_base[6].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset7 {
+            offset: chroma_base[7].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset8 {
+            offset: chroma_base[8].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset9 {
+            offset: chroma_base[9].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset10 {
+            offset: chroma_base[10].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset11 {
+            offset: chroma_base[11].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset12 {
+            offset: chroma_base[12].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset13 {
+            offset: chroma_base[13].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset14 {
+            offset: chroma_base[14].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset15 {
+            offset: chroma_base[15].try_into().unwrap(),
+        });
+        push.push_method(clc5b0::SetPictureChromaOffset16 {
+            offset: chroma_base[16].try_into().unwrap(),
+        });
+
+        push.push_method(clc9b0::SetIntraTopBufOffset {
+            offset: (gpu_addrs.intra_top >> 8).try_into().unwrap(),
+        });
+
+        push.push_method(clc5b0::Execute {
+            notify: clc5b0::ExecuteNotify::Disable,
+            notify_on: clc5b0::ExecuteNotifyOn::End,
+            awaken: clc5b0::ExecuteAwaken::Disable,
+        });
+
+        push
+    }
+
+    /// Compute some obscure skip value needed by the hardware, in bits.
+    ///
+    /// This encompasses all bits read from `if (pps->output_present_flag)` up
+    /// into `delta_poc_msb_cycle_lt`.
+    ///
+    /// Unfortunately, this value is not passed
+    /// in by Vulkan Video, and we do not have access to the slice header
+    /// directly, so we must use the flags we have as a proxy.
+    fn compute_sw_hdr_skip_len(
+        sps: &StdVideoH265SequenceParameterSet,
+        pps: &StdVideoH265PictureParameterSet,
+        std_pic_info: &StdVideoDecodeH265PictureInfo,
+    ) -> u16 {
+        let mut sw_hdr_skip_len = 0;
+
+        if pps.flags.output_flag_present_flag() != 0 {
+            sw_hdr_skip_len += 1; // output_flag_present_flag
+        }
+
+        if sps.flags.separate_colour_plane_flag() != 0 {
+            sw_hdr_skip_len += 2; // colour_plane_id
+        }
+
+        if std_pic_info.flags.IdrPicFlag() == 0 {
+            sw_hdr_skip_len +=
+                u16::from(sps.log2_max_pic_order_cnt_lsb_minus4) + 4;
+            sw_hdr_skip_len += 1; // short_term_ref_pic_set_sps_flag
+
+            if std_pic_info.flags.short_term_ref_pic_set_sps_flag() == 0 {
+                sw_hdr_skip_len += std_pic_info.NumBitsForSTRefPicSetInSlice;
+            } else if sps.num_short_term_ref_pic_sets > 1 {
+                sw_hdr_skip_len +=
+                    sps.num_short_term_ref_pic_sets.ilog2() as u16;
+                if !sps.num_short_term_ref_pic_sets.is_power_of_two() {
+                    sw_hdr_skip_len += 1; // ceil
+                }
+            }
+
+            // XXX: we also need to compute the bits for the long term RPS.
+            // Unfortunately this is not in the Vulkan Video API, but it should
+            // be doable by inferring from the values in the SPS, PPS and
+            // StdVideoH265PictureInfo.
+            //
+            // It would be great if we had some
+            // `std_pic_info.NumBitsForLTRefPicSetInSlice` instead.
+        }
+
+        sw_hdr_skip_len
+    }
+
+    /// Fill the tile size buffer. This is reverse engineered, but so far, the
+    /// assumption that it's based on 6.5.1 of the spec seems to hold.
+    ///
+    /// The hexdump for a 144x144 file shows 0x00030003. For now it's unclear
+    /// how non-square tiles should be represented.
+    fn fill_tile_size_buffer(
+        tile_sizes: &mut [u16],
+        sps: &StdVideoH265SequenceParameterSet,
+        pps: &StdVideoH265PictureParameterSet,
+    ) {
+        if pps.flags.uniform_spacing_flag() != 0 {
+            let (pic_width_in_ctbs_y, pic_height_in_ctbs_y) =
+                Self::compute_sizes_in_ctbs(sps);
+
+            let num_col = u32::from(pps.num_tile_columns_minus1 + 1);
+            let num_row = u32::from(pps.num_tile_rows_minus1 + 1);
+
+            // See the HEVC spec, 6-3 and 6-4.
+            let mut entries = 0;
+            for i in 0..num_row {
+                let row_height = (i + 1) * pic_height_in_ctbs_y / num_row
+                    - i * pic_height_in_ctbs_y / num_row;
+
+                for j in 0..num_col {
+                    let column_width = (j + 1) * pic_width_in_ctbs_y / num_col
+                        - j * pic_width_in_ctbs_y / num_col;
+
+                    tile_sizes[entries] = u16::try_from(column_width).unwrap();
+                    tile_sizes[entries + 1] =
+                        u16::try_from(row_height).unwrap();
+                    entries += 2;
+                }
+            }
+        } else {
+            let num_col = usize::from(pps.num_tile_columns_minus1 + 1);
+            let num_row = usize::from(pps.num_tile_rows_minus1 + 1);
+
+            let mut entries = 0;
+            for i in 0..num_row {
+                for j in 0..num_col {
+                    tile_sizes[entries] = pps.column_width_minus1[j] + 1;
+                    tile_sizes[entries + 1] = pps.row_height_minus1[i] + 1;
+                    entries += 2;
+                }
+            }
+        }
+    }
+
+    /// Compute the value of PicWidthInCtbsY and PicHeightInCtbsY.
+    ///
+    /// See the HEVC spec, 7-10 through 7-19.
+    fn compute_sizes_in_ctbs(
+        sps: &StdVideoH265SequenceParameterSet,
+    ) -> (u32, u32) {
+        let min_cb_log2_size_y = sps.log2_min_luma_coding_block_size_minus3 + 3;
+        let ctb_log2_size_y =
+            min_cb_log2_size_y + sps.log2_diff_max_min_luma_coding_block_size;
+        let ctb_size_y = 1 << ctb_log2_size_y;
+
+        let pic_height_in_ctbs_y =
+            sps.pic_height_in_luma_samples.div_ceil(ctb_size_y);
+        let pic_width_in_ctbs_y =
+            sps.pic_width_in_luma_samples.div_ceil(ctb_size_y);
+
+        (pic_width_in_ctbs_y, pic_height_in_ctbs_y)
+    }
+}
+
+impl VideoDecoder for Decoder {
+    fn begin(
+        &mut self,
+        nvk_cmd: *mut nvk_cmd_buffer,
+        begin_info: &nvk_video_bindings::VkVideoBeginCodingInfoKHR,
+    ) {
+        self.remove_invalid_slots(begin_info);
+        let mut push = Push::new();
+
+        use_video_engine(&mut push);
+        append_rust_push(push, nvk_cmd);
+    }
+
+    fn decode(
+        &mut self,
+        nvk_cmd: *mut nvk_cmd_buffer,
+        frame_info: &nvk_video_bindings::VkVideoDecodeInfoKHR,
+    ) {
+        let h265_pic_info = vk_find_struct_const!(
+            frame_info.pNext,
+            VIDEO_DECODE_H265_PICTURE_INFO,
+            KHR
+        );
+
+        let std_pic_info = unsafe { *h265_pic_info.pStdPictureInfo };
+
+        let pps = unsafe {
+            *nvk_video_bindings::vk_video_find_h265_dec_std_pps(
+                (*nvk_cmd).video.params as *const _,
+                std_pic_info.pps_pic_parameter_set_id.into(),
+            )
+        };
+        let sps = unsafe {
+            *nvk_video_bindings::vk_video_find_h265_dec_std_sps(
+                (*nvk_cmd).video.params as *const _,
+                pps.sps_video_parameter_set_id.into(),
+            )
+        };
+
+        let dst_iv = unsafe {
+            nvk_video_bindings::nvk_image_view_from_handle(
+                frame_info.dstPictureResource.imageViewBinding,
+            )
+        };
+        let dst_img =
+            unsafe { *dst_iv }.vk.image as *mut nvk_video_bindings::nvk_image;
+
+        let mut nvh265 = nvk_video_bindings::_nvdec_hevc_pic_s::default();
+
+        nvh265.stream_len = u32::try_from(frame_info.srcBufferRange).unwrap();
+        nvh265.set_tileformat(1);
+
+        let y_log2 = unsafe { *dst_img }.planes[0].nil.levels[0].tiling.y_log2;
+        nvh265.set_gob_height(to_gob_value(y_log2));
+        nvh265.sw_start_code_e = 1;
+
+        let bit_depth = sps.bit_depth_luma_minus8 + 8;
+        let output_mode = if bit_depth >= 10 { 1 } else { 0 };
+
+        nvh265.framestride[0] =
+            unsafe { *dst_img }.planes[0].nil.levels[0].row_stride_B;
+        nvh265.framestride[1] =
+            unsafe { *dst_img }.planes[1].nil.levels[0].row_stride_B;
+
+        if output_mode == 1 {
+            nvh265.framestride[0] /= 2;
+            nvh265.framestride[1] /= 2;
+        }
+
+        let gpu_buffers = GpuBuffers::new(nvk_cmd, &sps);
+        nvh265.colMvBuffersize = gpu_buffers.colmv_size >> 8;
+        nvh265.HevcSaoBufferOffset = gpu_buffers.sao_offset >> 8;
+        nvh265.HevcBsdCtrlOffset = gpu_buffers.bsd_offset >> 8;
+
+        nvh265.pic_width_in_luma_samples =
+            sps.pic_width_in_luma_samples.try_into().unwrap();
+        nvh265.pic_height_in_luma_samples =
+            sps.pic_height_in_luma_samples.try_into().unwrap();
+
+        /* we only support 4:2:0 for now */
+        nvh265.set_chroma_format_idc(1);
+
+        nvh265.set_bit_depth_luma(u32::from(sps.bit_depth_luma_minus8) + 8);
+        nvh265.set_bit_depth_chroma(u32::from(sps.bit_depth_chroma_minus8) + 8);
+
+        nvh265.set_log2_min_luma_coding_block_size(
+            u32::from(sps.log2_min_luma_coding_block_size_minus3) + 3,
+        );
+        nvh265.set_log2_max_luma_coding_block_size(u32::from(
+            sps.log2_min_luma_coding_block_size_minus3
+                + 3
+                + sps.log2_diff_max_min_luma_coding_block_size,
+        ));
+
+        nvh265.set_log2_min_transform_block_size(
+            u32::from(sps.log2_min_luma_transform_block_size_minus2) + 2,
+        );
+
+        nvh265.set_log2_max_transform_block_size(u32::from(
+            sps.log2_min_luma_transform_block_size_minus2
+                + 2
+                + sps.log2_diff_max_min_luma_transform_block_size,
+        ));
+
+        nvh265.set_max_transform_hierarchy_depth_inter(u32::from(
+            sps.max_transform_hierarchy_depth_inter,
+        ));
+
+        nvh265.set_max_transform_hierarchy_depth_intra(u32::from(
+            sps.max_transform_hierarchy_depth_intra,
+        ));
+
+        nvh265.set_scalingListEnable(sps.flags.scaling_list_enabled_flag());
+
+        nvh265.set_amp_enable_flag(sps.flags.amp_enabled_flag());
+
+        nvh265.set_sample_adaptive_offset_enabled_flag(
+            sps.flags.sample_adaptive_offset_enabled_flag(),
+        );
+
+        nvh265.set_pcm_enabled_flag(sps.flags.pcm_enabled_flag());
+
+        if sps.flags.pcm_enabled_flag() != 0 {
+            nvh265.set_pcm_sample_bit_depth_luma(
+                u32::from(sps.pcm_sample_bit_depth_luma_minus1) + 1,
+            );
+
+            nvh265.set_pcm_sample_bit_depth_chroma(
+                u32::from(sps.pcm_sample_bit_depth_chroma_minus1) + 1,
+            );
+
+            nvh265.set_log2_min_pcm_luma_coding_block_size(
+                u32::from(sps.log2_min_pcm_luma_coding_block_size_minus3) + 3,
+            );
+            nvh265.set_log2_max_pcm_luma_coding_block_size(u32::from(
+                sps.log2_min_pcm_luma_coding_block_size_minus3
+                    + 3
+                    + sps.log2_diff_max_min_pcm_luma_coding_block_size,
+            ));
+        }
+
+        nvh265.set_pcm_loop_filter_disabled_flag(
+            sps.flags.pcm_loop_filter_disabled_flag(),
+        );
+
+        nvh265.set_sps_temporal_mvp_enabled_flag(
+            sps.flags.sps_temporal_mvp_enabled_flag(),
+        );
+
+        nvh265.set_strong_intra_smoothing_enabled_flag(
+            sps.flags.strong_intra_smoothing_enabled_flag(),
+        );
+
+        nvh265.set_dependent_slice_segments_enabled_flag(
+            pps.flags.dependent_slice_segments_enabled_flag(),
+        );
+
+        nvh265
+            .set_output_flag_present_flag(pps.flags.output_flag_present_flag());
+
+        nvh265.set_num_extra_slice_header_bits(u32::from(
+            pps.num_extra_slice_header_bits,
+        ));
+
+        nvh265.set_sign_data_hiding_enabled_flag(
+            pps.flags.sign_data_hiding_enabled_flag(),
+        );
+
+        nvh265.set_cabac_init_present_flag(pps.flags.cabac_init_present_flag());
+
+        nvh265.set_num_ref_idx_l0_default_active(
+            u32::from(pps.num_ref_idx_l0_default_active_minus1) + 1,
+        );
+
+        nvh265.set_num_ref_idx_l1_default_active(
+            u32::from(pps.num_ref_idx_l1_default_active_minus1) + 1,
+        );
+
+        let init_qp = pps.init_qp_minus26 + 26;
+        let init_qp =
+            i32::from(init_qp) + i32::from(sps.bit_depth_luma_minus8 * 6);
+        nvh265.set_init_qp(init_qp.try_into().unwrap());
+
+        nvh265.set_constrained_intra_pred_flag(
+            pps.flags.constrained_intra_pred_flag(),
+        );
+
+        nvh265.set_transform_skip_enabled_flag(
+            pps.flags.transform_skip_enabled_flag(),
+        );
+
+        nvh265
+            .set_cu_qp_delta_enabled_flag(pps.flags.cu_qp_delta_enabled_flag());
+
+        nvh265
+            .set_diff_cu_qp_delta_depth(u32::from(pps.diff_cu_qp_delta_depth));
+
+        nvh265.pps_cb_qp_offset = pps.pps_cb_qp_offset;
+        nvh265.pps_cr_qp_offset = pps.pps_cr_qp_offset;
+        nvh265.pps_beta_offset = pps.pps_beta_offset_div2 * 2;
+
+        nvh265.pps_tc_offset = pps.pps_tc_offset_div2 * 2;
+        nvh265.set_pps_slice_chroma_qp_offsets_present_flag(
+            pps.flags.pps_slice_chroma_qp_offsets_present_flag(),
+        );
+
+        nvh265.set_weighted_pred_flag(pps.flags.weighted_pred_flag());
+        nvh265.set_weighted_bipred_flag(pps.flags.weighted_bipred_flag());
+        nvh265.set_transquant_bypass_enabled_flag(
+            pps.flags.transquant_bypass_enabled_flag(),
+        );
+
+        nvh265.set_tiles_enabled_flag(pps.flags.tiles_enabled_flag());
+        nvh265.set_entropy_coding_sync_enabled_flag(
+            pps.flags.entropy_coding_sync_enabled_flag(),
+        );
+
+        if pps.flags.tiles_enabled_flag() != 0 {
+            nvh265.set_num_tile_rows(u32::from(pps.num_tile_rows_minus1) + 1);
+            nvh265.set_num_tile_columns(
+                u32::from(pps.num_tile_columns_minus1) + 1,
+            );
+        }
+
+        nvh265.set_loop_filter_across_tiles_enabled_flag(
+            pps.flags.loop_filter_across_tiles_enabled_flag(),
+        );
+
+        nvh265.set_loop_filter_across_slices_enabled_flag(
+            pps.flags.pps_loop_filter_across_slices_enabled_flag(),
+        );
+
+        nvh265.set_deblocking_filter_control_present_flag(
+            pps.flags.deblocking_filter_control_present_flag(),
+        );
+
+        nvh265.set_deblocking_filter_override_enabled_flag(
+            pps.flags.deblocking_filter_override_enabled_flag(),
+        );
+
+        nvh265.set_pps_deblocking_filter_disabled_flag(
+            pps.flags.pps_deblocking_filter_disabled_flag(),
+        );
+
+        nvh265.set_lists_modification_present_flag(
+            pps.flags.lists_modification_present_flag(),
+        );
+
+        nvh265.set_log2_parallel_merge_level(
+            u32::from(pps.log2_parallel_merge_level_minus2) + 2,
+        );
+
+        nvh265.set_slice_segment_header_extension_present_flag(
+            pps.flags.slice_segment_header_extension_present_flag(),
+        );
+
+        // XXX: this probably won't work always?
+        nvh265.num_ref_frames = self.slots.len().try_into().unwrap();
+        if pps.flags.pps_curr_pic_ref_enabled_flag() != 0 {
+            nvh265.num_ref_frames += 1;
+        }
+
+        nvh265.IDR_picture_flag =
+            std_pic_info.flags.IdrPicFlag().try_into().unwrap();
+        nvh265.RAP_picture_flag =
+            std_pic_info.flags.IrapPicFlag().try_into().unwrap();
+
+        // XXX: traced from the blob, not sure what this is..
+        nvh265.pattern_id = 2;
+
+        nvh265.sw_hdr_skip_length =
+            Self::compute_sw_hdr_skip_len(&sps, &pps, &std_pic_info);
+
+        nvh265.set_separate_colour_plane_flag(
+            sps.flags.separate_colour_plane_flag(),
+        );
+
+        nvh265.set_log2_max_pic_order_cnt_lsb_minus4(u32::from(
+            sps.log2_max_pic_order_cnt_lsb_minus4,
+        ));
+
+        nvh265.set_num_short_term_ref_pic_sets(
+            sps.num_short_term_ref_pic_sets.try_into().unwrap(),
+        );
+
+        nvh265.set_num_long_term_ref_pics_sps(
+            sps.num_long_term_ref_pics_sps.try_into().unwrap(),
+        );
+
+        nvh265.set_long_term_ref_pics_present_flag(
+            sps.flags.long_term_ref_pics_present_flag(),
+        );
+
+        nvh265.set_num_delta_pocs_of_rps_idx(
+            std_pic_info.NumDeltaPocsOfRefRpsIdx.try_into().unwrap(),
+        );
+
+        if std_pic_info.flags.short_term_ref_pic_set_sps_flag() == 0 {
+            nvh265.num_bits_short_term_ref_pics_in_slice = std_pic_info
+                .NumBitsForSTRefPicSetInSlice
+                .try_into()
+                .unwrap();
+        } else if sps.num_short_term_ref_pic_sets > 1 {
+            nvh265.num_bits_short_term_ref_pics_in_slice +=
+                sps.num_short_term_ref_pic_sets.ilog2();
+            if !sps.num_short_term_ref_pic_sets.is_power_of_two() {
+                nvh265.num_bits_short_term_ref_pics_in_slice += 1; // ceil
+            }
+        }
+
+        nvh265.v3.set_slice_ec_mv_type(1); // i.e.: colocated MVs.
+        nvh265.v3.set_slice_ec_slice_type(
+            nvh265.IDR_picture_flag.try_into().unwrap(),
+        );
+
+        let aligned_w = align_u32(sps.pic_width_in_luma_samples, CTU_SIZE);
+        let aligned_h = align_u32(sps.pic_height_in_luma_samples, CTU_SIZE);
+        nvh265.v3.HevcSliceEdgeOffset =
+            ((624 * aligned_h) + (5016 * aligned_h) + (aligned_w * aligned_h))
+                >> 8;
+
+        let ext = &mut nvh265.v1.hevc_main10_444_ext;
+
+        ext.HevcSaoAboveOffset = nvh265.v3.HevcSliceEdgeOffset;
+        ext.HevcFltAboveOffset =
+            (FILTER_SIZE * aligned_h) + (5016 * aligned_h) >> 8;
+
+        ext.set_transformSkipRotationEnableFlag(
+            sps.flags.transform_skip_rotation_enabled_flag(),
+        );
+        ext.set_transformSkipContextEnableFlag(
+            sps.flags.transform_skip_context_enabled_flag(),
+        );
+
+        ext.set_implicitRdpcmEnableFlag(
+            sps.flags.implicit_rdpcm_enabled_flag(),
+        );
+        ext.set_explicitRdpcmEnableFlag(
+            sps.flags.explicit_rdpcm_enabled_flag(),
+        );
+
+        ext.set_extendedPrecisionProcessingFlag(
+            sps.flags.extended_precision_processing_flag(),
+        );
+        ext.set_intraSmoothingDisabledFlag(
+            sps.flags.intra_smoothing_disabled_flag(),
+        );
+        ext.set_highPrecisionOffsetsEnableFlag(
+            sps.flags.high_precision_offsets_enabled_flag(),
+        );
+        ext.set_fastRiceAdaptationEnableFlag(
+            sps.flags.persistent_rice_adaptation_enabled_flag(),
+        );
+        ext.set_cabacBypassAlignmentEnableFlag(
+            sps.flags.cabac_bypass_alignment_enabled_flag(),
+        );
+        ext.set_log2MaxTransformSkipSize(
+            u32::from(pps.log2_max_transform_skip_block_size_minus2) + 2,
+        );
+        ext.set_crossComponentPredictionEnableFlag(
+            pps.flags.cross_component_prediction_enabled_flag(),
+        );
+        ext.set_chromaQpAdjustmentEnableFlag(
+            pps.flags.chroma_qp_offset_list_enabled_flag(),
+        );
+        ext.set_diffCuChromaQpAdjustmentDepth(u32::from(
+            pps.diff_cu_chroma_qp_offset_depth,
+        ));
+        ext.set_chromaQpAdjustmentTableSize(
+            u32::from(pps.chroma_qp_offset_list_len_minus1) + 1,
+        );
+        ext.set_log2SaoOffsetScaleLuma(pps.log2_sao_offset_scale_luma.into());
+        ext.set_log2SaoOffsetScaleChroma(
+            pps.log2_sao_offset_scale_chroma.into(),
+        );
+
+        ext.cb_qp_adjustment = pps.cb_qp_offset_list;
+        ext.cr_qp_adjustment = pps.cr_qp_offset_list;
+
+        // Everything in nvh265.v2 comes from vps_extension(), which is not in Vulkan Video
+
+        let mut tile_sizes = [0u16; MAX_TILE_SIZE_ENTRIES];
+
+        Self::fill_tile_size_buffer(&mut tile_sizes, &sps, &pps);
+
+        let mut luma_base = [0; 17];
+        let mut chroma_base = [0; 17];
+
+        self.set_reference_frames(
+            &mut nvh265,
+            &frame_info,
+            &std_pic_info,
+            (&mut luma_base, &mut chroma_base),
+        );
+
+        let setup_ref_slot = unsafe { *frame_info.pSetupReferenceSlot };
+
+        let cur_pic_idx = self.get_pic_idx(setup_ref_slot.slotIndex);
+        nvh265.curr_pic_idx = cur_pic_idx as u8;
+
+        luma_base[cur_pic_idx as usize] = unsafe {
+            nvk_video_bindings::nvk_image_base_address(dst_img, 0) >> 8
+        }
+        .try_into()
+        .unwrap();
+        chroma_base[cur_pic_idx as usize] = unsafe {
+            nvk_video_bindings::nvk_image_base_address(dst_img, 1) >> 8
+        }
+        .try_into()
+        .unwrap();
+
+        let scaling_lists = (sps.flags.scaling_list_enabled_flag() != 0)
+            .then(|| ScalingList::from_vulkan_params(&sps, &pps));
+
+        let gpu_addrs: Uploads = Uploads::upload_to_the_gpu(
+            nvk_cmd,
+            nvh265,
+            tile_sizes,
+            scaling_lists,
+        );
+
+        let src_buffer = unsafe {
+            nvk_video_bindings::nvk_buffer_from_handle(frame_info.srcBuffer)
+        };
+        let src_address = unsafe {
+            nvk_video_bindings::nvk_buffer_address(
+                src_buffer,
+                frame_info.srcBufferOffset,
+            )
+        };
+
+        let push = self.build_push(
+            &gpu_addrs,
+            &gpu_buffers,
+            src_address,
+            (&mut luma_base, &mut chroma_base),
+        );
+
+        append_rust_push(push, nvk_cmd);
+        self.frame_num += 1;
+    }
+}
diff --git a/src/nouveau/vulkan/video/extern.c b/src/nouveau/vulkan/video/extern.c
new file mode 100644
index 0000000000000000000000000000000000000000..5f9030488c10e4fb8cfe768336e4de8478ab878c
--- /dev/null
+++ b/src/nouveau/vulkan/video/extern.c
@@ -0,0 +1,75 @@
+#include "../src/nouveau/vulkan/video/video_bindings.h"
+
+// Static wrappers
+
+void * __vk_find_struct_nvk_video(void *start, VkStructureType sType) { return __vk_find_struct(start, sType); }
+struct nvk_device_memory * nvk_device_memory_from_handle_nvk_video(VkDeviceMemory _handle) { return nvk_device_memory_from_handle(_handle); }
+VkDeviceMemory nvk_device_memory_to_handle_nvk_video(struct nvk_device_memory *_obj) { return nvk_device_memory_to_handle(_obj); }
+struct nvk_buffer * nvk_buffer_from_handle_nvk_video(VkBuffer _handle) { return nvk_buffer_from_handle(_handle); }
+VkBuffer nvk_buffer_to_handle_nvk_video(struct nvk_buffer *_obj) { return nvk_buffer_to_handle(_obj); }
+uint64_t nvk_buffer_address_nvk_video(const struct nvk_buffer *buffer, uint64_t offset) { return nvk_buffer_address(buffer, offset); }
+struct nvk_addr_range nvk_buffer_addr_range_nvk_video(const struct nvk_buffer *buffer, uint64_t offset, uint64_t range) { return nvk_buffer_addr_range(buffer, offset, range); }
+struct nvk_image_view * nvk_image_view_from_handle_nvk_video(VkImageView _handle) { return nvk_image_view_from_handle(_handle); }
+VkImageView nvk_image_view_to_handle_nvk_video(struct nvk_image_view *_obj) { return nvk_image_view_to_handle(_obj); }
+struct nvk_image * nvk_image_from_handle_nvk_video(VkImage _handle) { return nvk_image_from_handle(_handle); }
+VkImage nvk_image_to_handle_nvk_video(struct nvk_image *_obj) { return nvk_image_to_handle(_obj); }
+uint64_t nvk_image_plane_base_address_nvk_video(const struct nvk_image_plane *plane) { return nvk_image_plane_base_address(plane); }
+uint64_t nvk_image_base_address_nvk_video(const struct nvk_image *image, uint8_t plane) { return nvk_image_base_address(image, plane); }
+uint8_t nvk_image_aspects_to_plane_nvk_video(const struct nvk_image *image, VkImageAspectFlags aspectMask) { return nvk_image_aspects_to_plane(image, aspectMask); }
+uint8_t nvk_image_memory_aspects_to_plane_nvk_video(const struct nvk_image *image, VkImageAspectFlags aspectMask) { return nvk_image_memory_aspects_to_plane(image, aspectMask); }
+struct nvk_cmd_pool * nvk_cmd_pool_from_handle_nvk_video(VkCommandPool _handle) { return nvk_cmd_pool_from_handle(_handle); }
+VkCommandPool nvk_cmd_pool_to_handle_nvk_video(struct nvk_cmd_pool *_obj) { return nvk_cmd_pool_to_handle(_obj); }
+struct nvk_device * nvk_cmd_pool_device_nvk_video(struct nvk_cmd_pool *pool) { return nvk_cmd_pool_device(pool); }
+uint32_t nvk_min_cbuf_alignment_nvk_video(const struct nv_device_info *info) { return nvk_min_cbuf_alignment(info); }
+struct nvk_physical_device * nvk_physical_device_from_handle_nvk_video(VkPhysicalDevice _handle) { return nvk_physical_device_from_handle(_handle); }
+VkPhysicalDevice nvk_physical_device_to_handle_nvk_video(struct nvk_physical_device *_obj) { return nvk_physical_device_to_handle(_obj); }
+uint32_t nvk_use_edb_buffer_views_nvk_video(const struct nvk_physical_device *pdev) { return nvk_use_edb_buffer_views(pdev); }
+struct nvk_instance * nvk_physical_device_instance_nvk_video(struct nvk_physical_device *pdev) { return nvk_physical_device_instance(pdev); }
+bool nvk_use_bindless_cbuf_nvk_video(const struct nv_device_info *info) { return nvk_use_bindless_cbuf(info); }
+struct nvk_buffer_address nvk_ubo_descriptor_addr_nvk_video(const struct nvk_physical_device *pdev, union nvk_buffer_descriptor desc) { return nvk_ubo_descriptor_addr(pdev, desc); }
+void nvkmd_pdev_destroy_nvk_video(struct nvkmd_pdev *pdev) { nvkmd_pdev_destroy(pdev); }
+uint64_t nvkmd_pdev_get_vram_used_nvk_video(struct nvkmd_pdev *pdev) { return nvkmd_pdev_get_vram_used(pdev); }
+int nvkmd_pdev_get_drm_primary_fd_nvk_video(struct nvkmd_pdev *pdev) { return nvkmd_pdev_get_drm_primary_fd(pdev); }
+VkResult nvkmd_pdev_create_dev_nvk_video(struct nvkmd_pdev *pdev, struct vk_object_base *log_obj, struct nvkmd_dev **dev_out) { return nvkmd_pdev_create_dev(pdev, log_obj, dev_out); }
+void nvkmd_dev_destroy_nvk_video(struct nvkmd_dev *dev) { nvkmd_dev_destroy(dev); }
+uint64_t nvkmd_dev_get_gpu_timestamp_nvk_video(struct nvkmd_dev *dev) { return nvkmd_dev_get_gpu_timestamp(dev); }
+int nvkmd_dev_get_drm_fd_nvk_video(struct nvkmd_dev *dev) { return nvkmd_dev_get_drm_fd(dev); }
+VkResult nvkmd_dev_alloc_mem_nvk_video(struct nvkmd_dev *dev, struct vk_object_base *log_obj, uint64_t size_B, uint64_t align_B, enum nvkmd_mem_flags flags, struct nvkmd_mem **mem_out) { return nvkmd_dev_alloc_mem(dev, log_obj, size_B, align_B, flags, mem_out); }
+VkResult nvkmd_dev_alloc_tiled_mem_nvk_video(struct nvkmd_dev *dev, struct vk_object_base *log_obj, uint64_t size_B, uint64_t align_B, uint8_t pte_kind, uint16_t tile_mode, enum nvkmd_mem_flags flags, struct nvkmd_mem **mem_out) { return nvkmd_dev_alloc_tiled_mem(dev, log_obj, size_B, align_B, pte_kind, tile_mode, flags, mem_out); }
+VkResult nvkmd_dev_import_dma_buf_nvk_video(struct nvkmd_dev *dev, struct vk_object_base *log_obj, int fd, struct nvkmd_mem **mem_out) { return nvkmd_dev_import_dma_buf(dev, log_obj, fd, mem_out); }
+VkResult nvkmd_dev_create_ctx_nvk_video(struct nvkmd_dev *dev, struct vk_object_base *log_obj, enum nvkmd_engines engines, struct nvkmd_ctx **ctx_out) { return nvkmd_dev_create_ctx(dev, log_obj, engines, ctx_out); }
+struct nvkmd_mem * nvkmd_mem_ref_nvk_video(struct nvkmd_mem *mem) { return nvkmd_mem_ref(mem); }
+VkResult nvkmd_mem_overmap_nvk_video(struct nvkmd_mem *mem, struct vk_object_base *log_obj, enum nvkmd_mem_map_flags flags) { return nvkmd_mem_overmap(mem, log_obj, flags); }
+VkResult nvkmd_mem_export_dma_buf_nvk_video(struct nvkmd_mem *mem, struct vk_object_base *log_obj, int *fd_out) { return nvkmd_mem_export_dma_buf(mem, log_obj, fd_out); }
+void nvkmd_ctx_destroy_nvk_video(struct nvkmd_ctx *ctx) { nvkmd_ctx_destroy(ctx); }
+VkResult nvkmd_ctx_wait_nvk_video(struct nvkmd_ctx *ctx, struct vk_object_base *log_obj, uint32_t wait_count, const struct vk_sync_wait *waits) { return nvkmd_ctx_wait(ctx, log_obj, wait_count, waits); }
+VkResult nvkmd_ctx_exec_nvk_video(struct nvkmd_ctx *ctx, struct vk_object_base *log_obj, uint32_t exec_count, const struct nvkmd_ctx_exec *execs) { return nvkmd_ctx_exec(ctx, log_obj, exec_count, execs); }
+VkResult nvkmd_ctx_signal_nvk_video(struct nvkmd_ctx *ctx, struct vk_object_base *log_obj, uint32_t signal_count, const struct vk_sync_signal *signals) { return nvkmd_ctx_signal(ctx, log_obj, signal_count, signals); }
+VkResult nvkmd_ctx_flush_nvk_video(struct nvkmd_ctx *ctx, struct vk_object_base *log_obj) { return nvkmd_ctx_flush(ctx, log_obj); }
+VkResult nvkmd_ctx_sync_nvk_video(struct nvkmd_ctx *ctx, struct vk_object_base *log_obj) { return nvkmd_ctx_sync(ctx, log_obj); }
+struct nvkmd_mem * nvk_descriptor_table_get_mem_ref_nvk_video(struct nvk_descriptor_table *table, uint32_t *alloc_count_out) { return nvk_descriptor_table_get_mem_ref(table, alloc_count_out); }
+uint64_t nvk_heap_contiguous_base_address_nvk_video(struct nvk_heap *heap) { return nvk_heap_contiguous_base_address(heap); }
+struct nvk_device * nvk_queue_device_nvk_video(struct nvk_queue *queue) { return nvk_queue_device(queue); }
+struct nvk_device * nvk_device_from_handle_nvk_video(VkDevice _handle) { return nvk_device_from_handle(_handle); }
+VkDevice nvk_device_to_handle_nvk_video(struct nvk_device *_obj) { return nvk_device_to_handle(_obj); }
+struct nvk_physical_device * nvk_device_physical_nvk_video(struct nvk_device *dev) { return nvk_device_physical(dev); }
+struct nvk_descriptor_pool * nvk_descriptor_pool_from_handle_nvk_video(VkDescriptorPool _handle) { return nvk_descriptor_pool_from_handle(_handle); }
+VkDescriptorPool nvk_descriptor_pool_to_handle_nvk_video(struct nvk_descriptor_pool *_obj) { return nvk_descriptor_pool_to_handle(_obj); }
+struct nvk_descriptor_set * nvk_descriptor_set_from_handle_nvk_video(VkDescriptorSet _handle) { return nvk_descriptor_set_from_handle(_handle); }
+VkDescriptorSet nvk_descriptor_set_to_handle_nvk_video(struct nvk_descriptor_set *_obj) { return nvk_descriptor_set_to_handle(_obj); }
+struct nvk_buffer_address nvk_descriptor_set_addr_nvk_video(const struct nvk_descriptor_set *set) { return nvk_descriptor_set_addr(set); }
+gl_shader_stage nvk_last_vtgm_shader_stage_nvk_video(VkShaderStageFlags stages) { return nvk_last_vtgm_shader_stage(stages); }
+uint32_t nvk_cbuf_binding_for_stage_nvk_video(gl_shader_stage stage) { return nvk_cbuf_binding_for_stage(stage); }
+struct nvk_shader * nvk_shader_from_handle_nvk_video(VkShaderEXT _handle) { return nvk_shader_from_handle(_handle); }
+VkShaderEXT nvk_shader_to_handle_nvk_video(struct nvk_shader *_obj) { return nvk_shader_to_handle(_obj); }
+struct nvk_cmd_buffer * nvk_cmd_buffer_from_handle_nvk_video(VkCommandBuffer _handle) { return nvk_cmd_buffer_from_handle(_handle); }
+VkCommandBuffer nvk_cmd_buffer_to_handle_nvk_video(struct nvk_cmd_buffer *_obj) { return nvk_cmd_buffer_to_handle(_obj); }
+struct nvk_device * nvk_cmd_buffer_device_nvk_video(struct nvk_cmd_buffer *cmd) { return nvk_cmd_buffer_device(cmd); }
+struct nvk_cmd_pool * nvk_cmd_buffer_pool_nvk_video(struct nvk_cmd_buffer *cmd) { return nvk_cmd_buffer_pool(cmd); }
+struct nv_push * nvk_cmd_buffer_push_nvk_video(struct nvk_cmd_buffer *cmd, uint32_t dw_count) { return nvk_cmd_buffer_push(cmd, dw_count); }
+struct nvk_descriptor_state * nvk_get_descriptors_state_nvk_video(struct nvk_cmd_buffer *cmd, VkPipelineBindPoint bind_point) { return nvk_get_descriptors_state(cmd, bind_point); }
+struct nvk_descriptor_state * nvk_get_descriptor_state_for_stages_nvk_video(struct nvk_cmd_buffer *cmd, VkShaderStageFlags stages) { return nvk_get_descriptor_state_for_stages(cmd, stages); }
+struct nvk_video_session * nvk_video_session_from_handle_nvk_video(VkVideoSessionKHR _handle) { return nvk_video_session_from_handle(_handle); }
+VkVideoSessionKHR nvk_video_session_to_handle_nvk_video(struct nvk_video_session *_obj) { return nvk_video_session_to_handle(_obj); }
+struct nvk_video_session_params * nvk_video_session_params_from_handle_nvk_video(VkVideoSessionParametersKHR _handle) { return nvk_video_session_params_from_handle(_handle); }
+VkVideoSessionParametersKHR nvk_video_session_params_to_handle_nvk_video(struct nvk_video_session_params *_obj) { return nvk_video_session_params_to_handle(_obj); }
diff --git a/src/nouveau/vulkan/video/lib.rs b/src/nouveau/vulkan/video/lib.rs
new file mode 100644
index 0000000000000000000000000000000000000000..25a2a260753ad340730aab39f1d5ca88b37c4a1f
--- /dev/null
+++ b/src/nouveau/vulkan/video/lib.rs
@@ -0,0 +1,65 @@
+// Copyright © 2024 Collabora, Ltd.
+// SPDX-License-Identifier: MIT
+//
+// Thanks to Averne for the work on the Nvdec tracer. None of the decode work
+// would have been possible otherwise.
+
+use nv_push_rs::Push;
+use nvidia_headers::classes::cl906f::mthd as cl906f;
+use nvidia_headers::classes::clc5b0::mthd as clc5b0;
+use nvk_video_bindings::nvk_cmd_buffer;
+use nvk_video_bindings::VK_SUCCESS;
+
+pub mod decode;
+
+#[cfg(debug_assertions)]
+pub(crate) mod trace;
+
+/// A Rust version of the `vk_find_struct` macro. Uses the `paste` crate to call
+/// the equivalent C function.
+macro_rules! vk_find_struct_const(
+    ($p:expr, $s:ident, $vendor:ident) => {
+        {
+            let s = unsafe {
+                paste::paste! {
+                    nvk_video_bindings::__vk_find_struct(
+                        $p as *mut _,
+                        nvk_video_bindings::[<VK_STRUCTURE_TYPE_ $s _ $vendor>]
+                    ) as *const nvk_video_bindings::[<Vk $s:lower:camel $vendor>]
+                }
+            };
+
+            unsafe { *s }
+        }
+    }
+);
+pub(crate) use vk_find_struct_const;
+
+fn align_u32(value: u32, alignment: u32) -> u32 {
+    (value + alignment - 1) & !(alignment - 1)
+}
+
+/// Append the given push buffer to the command buffer.
+pub(crate) fn append_rust_push(
+    push: Push,
+    nvk_cmd_buffer: *mut nvk_cmd_buffer,
+) {
+    let ret = unsafe {
+        nvk_video_bindings::nvk_cmd_buffer_append_rust_push(
+            nvk_cmd_buffer,
+            push.as_ptr().cast_mut(),
+            push.len().try_into().unwrap(),
+        )
+    };
+
+    assert!(ret == VK_SUCCESS);
+}
+
+pub(crate) fn use_video_engine(push: &mut Push) {
+    let set_object = cl906f::SetObject {
+        nvclass: clc5b0::VIDEO_DECODER,
+        engine: cl906f::SetObjectEngine::Sw,
+    };
+
+    push.push_method(set_object);
+}
diff --git a/src/nouveau/vulkan/video/meson.build b/src/nouveau/vulkan/video/meson.build
new file mode 100644
index 0000000000000000000000000000000000000000..0b4527881e3841f1594adb4c85646edf2cede11d
--- /dev/null
+++ b/src/nouveau/vulkan/video/meson.build
@@ -0,0 +1,129 @@
+# Copyright © 2024 Collabora, Ltd.
+# SPDX-License-Identifier: MIT
+
+add_languages('rust', required: true)
+rust = import('rust')
+
+rc = meson.get_compiler('rust')
+
+# XXX: our dependencies have to inherit from NVK's dependencies somehow.
+libnvk_video_deps = [
+  idep_mesautil,
+  idep_nouveau_ws,
+  idep_nvidia_headers,
+  idep_vulkan_runtime,
+  idep_vulkan_util,
+  idep_vulkan_runtime_headers,
+  idep_vulkan_util_headers,
+  idep_vulkan_wsi,
+  idep_vulkan_wsi_headers,
+  idep_nil,
+  idep_nir,
+  idep_nir_headers,
+  idep_nak,
+]
+
+# XXX: Same here, this should inherit from NVK in general, there's nothing extra
+# in particular that is needed here.
+libnvk_video_rust_args = [
+  '-Aclippy::identity_op',
+  '-Aclippy::len_zero',
+  '-Aclippy::manual_range_contains',
+  # normally this is a good one, but we use it where the "better" code is worse
+  '-Aclippy::needless_range_loop',
+  '-Aclippy::redundant_field_names',
+  '-Aclippy::upper_case_acronyms',
+  '-Aclippy::vec_box',
+  '-Aclippy::write_with_newline',
+  '-Anon_snake_case',
+]
+
+# XXX: ideally the .c wrapper file should be somewhere in /build instead of
+# commited into the tree.
+libnvk_video_bindings = rust.bindgen(
+  input: ['video_bindings.h'],
+  output: 'video_bindings.rs',
+  c_args: [
+    pre_args,
+  ],
+  include_directories: [inc_include, inc_src, include_directories('.')],
+  args: [
+    '--raw-line', '#![allow(non_camel_case_types)]',
+    '--raw-line', '#![allow(non_snake_case)]',
+    '--raw-line', '#![allow(non_upper_case_globals)]',
+    '--emit-diagnostics',
+    '--no-prepend-enum-name',
+    '--experimental',
+    '--wrap-static-fns',
+    '--wrap-static-fns-path=/tmp/nvk_video_extern.c',
+    # We need a suffix, otherwise the generated functions will conflict with
+    # other libraries, like nil_rs.
+    '--wrap-static-fns-suffix=_nvk_video',
+    '--no-layout-tests',
+    '--generate-inline-functions',
+    '--with-derive-default',
+    '--allowlist-type', 'Std.*|vk_video.*|.*nv.*|Vk.*|vk.*',
+    '--allowlist-function', '.*vk_find.*|.*vk_video.*|nvk.*',
+    '--allowlist-var', '.*SUBC.*',
+  ],
+  dependencies: [libnvk_video_deps],
+)
+
+libnvk_video_bindings_gen = static_library(
+  'nvk_video_bindings',
+  libnvk_video_bindings,
+  gnu_symbol_visibility: 'hidden',
+  rust_abi: 'rust',
+)
+
+dep_paste = dependency(
+  'paste',
+  version: '>= 1.0.14',
+  fallback: ['paste', 'dep_paste'],
+  required: true,
+)
+
+libnvk_video_rust_deps = [
+  dep_paste,
+  idep_nvidia_headers_rs,
+  idep_nv_push_rs,
+]
+
+_libnvk_video = static_library(
+  '_nvk_video',
+  files('lib.rs'),
+  gnu_symbol_visibility: 'hidden',
+  rust_abi: 'c',
+  rust_args: libnvk_video_rust_args,
+  link_with: [
+    libnvk_video_bindings_gen,
+  ],
+  dependencies: libnvk_video_rust_deps,
+)
+
+_libnvk_video = static_library(
+  'nvk_video',
+  [
+    'extern.c',
+    'video_bindings.h',
+  ],
+  include_directories: [
+    inc_include,
+    inc_src,
+    inc_mapi,
+    inc_mesa,
+    inc_gallium,
+    inc_util,
+  ],
+  dependencies: libnvk_video_deps,
+  link_with: [
+    _libnvk_video,
+  ],
+  c_args: [no_override_init_args + '-Wno-missing-prototypes'],
+  gnu_symbol_visibility: 'hidden',
+)
+
+idep_nvk_video = declare_dependency(
+  include_directories: include_directories('.'),
+  link_with: _libnvk_video,
+)
\ No newline at end of file
diff --git a/src/nouveau/vulkan/video/trace.rs b/src/nouveau/vulkan/video/trace.rs
new file mode 100644
index 0000000000000000000000000000000000000000..8d0abc951ac3dce6f03b8f3435c98c42f35ec48c
--- /dev/null
+++ b/src/nouveau/vulkan/video/trace.rs
@@ -0,0 +1,597 @@
+// Copyright © 2024 Collabora, Ltd.
+// SPDX-License-Identifier: MIT
+//! Misc tracing utilities for working with video decoding.
+
+#![allow(dead_code)]
+
+use nvk_video_bindings::_nvdec_h264_pic_s;
+use nvk_video_bindings::_nvdec_hevc_pic_s;
+use std::io;
+use std::io::Write;
+
+pub(crate) fn dump_nvdec_h264_pic_s(
+    pic: &_nvdec_h264_pic_s,
+    file_name: &str,
+) -> io::Result<()> {
+    let mut log_file = std::fs::OpenOptions::new()
+        .create(true)
+        .append(true)
+        .open(file_name)?;
+
+    writeln!(log_file, "encryption_params: ...")?;
+    write!(log_file, "eos: ")?;
+    for &byte in &pic.eos {
+        write!(log_file, "{:02x} ", byte)?;
+    }
+    writeln!(log_file)?;
+    writeln!(
+        log_file,
+        "explicitEOSPresentFlag: {}",
+        pic.explicitEOSPresentFlag
+    )?;
+    writeln!(log_file, "hint_dump_en: {}", pic.hint_dump_en)?;
+    writeln!(log_file, "stream_len: {}", pic.stream_len)?;
+    writeln!(log_file, "slice_count: {}", pic.slice_count)?;
+    writeln!(log_file, "mbhist_buffer_size: {}", pic.mbhist_buffer_size)?;
+    writeln!(
+        log_file,
+        "gptimer_timeout_value: {}",
+        pic.gptimer_timeout_value
+    )?;
+    writeln!(
+        log_file,
+        "log2_max_pic_order_cnt_lsb_minus4: {}",
+        pic.log2_max_pic_order_cnt_lsb_minus4
+    )?;
+    writeln!(
+        log_file,
+        "delta_pic_order_always_zero_flag: {}",
+        pic.delta_pic_order_always_zero_flag
+    )?;
+    writeln!(log_file, "frame_mbs_only_flag: {}", pic.frame_mbs_only_flag)?;
+    writeln!(log_file, "PicWidthInMbs: {}", pic.PicWidthInMbs)?;
+    writeln!(log_file, "FrameHeightInMbs: {}", pic.FrameHeightInMbs)?;
+    writeln!(log_file, "tileFormat: {}", pic.tileFormat())?;
+    writeln!(log_file, "gob_height: {}", pic.gob_height())?;
+    writeln!(
+        log_file,
+        "reserverd_surface_format: {}",
+        pic.reserverd_surface_format()
+    )?;
+    writeln!(
+        log_file,
+        "entropy_coding_mode_flag: {}",
+        pic.entropy_coding_mode_flag
+    )?;
+    writeln!(
+        log_file,
+        "pic_order_present_flag: {}",
+        pic.pic_order_present_flag
+    )?;
+    writeln!(
+        log_file,
+        "num_ref_idx_l0_active_minus1: {}",
+        pic.num_ref_idx_l0_active_minus1
+    )?;
+    writeln!(
+        log_file,
+        "num_ref_idx_l1_active_minus1: {}",
+        pic.num_ref_idx_l1_active_minus1
+    )?;
+    writeln!(
+        log_file,
+        "deblocking_filter_control_present_flag: {}",
+        pic.deblocking_filter_control_present_flag
+    )?;
+    writeln!(
+        log_file,
+        "redundant_pic_cnt_present_flag: {}",
+        pic.redundant_pic_cnt_present_flag
+    )?;
+    writeln!(
+        log_file,
+        "transform_8x8_mode_flag: {}",
+        pic.transform_8x8_mode_flag
+    )?;
+    writeln!(log_file, "pitch_luma: {}", pic.pitch_luma)?;
+    writeln!(log_file, "pitch_chroma: {}", pic.pitch_chroma)?;
+    writeln!(log_file, "luma_top_offset: {}", pic.luma_top_offset)?;
+    writeln!(log_file, "luma_bot_offset: {}", pic.luma_bot_offset)?;
+    writeln!(log_file, "luma_frame_offset: {}", pic.luma_frame_offset)?;
+    writeln!(log_file, "chroma_top_offset: {}", pic.chroma_top_offset)?;
+    writeln!(log_file, "chroma_bot_offset: {}", pic.chroma_bot_offset)?;
+    writeln!(log_file, "chroma_frame_offset: {}", pic.chroma_frame_offset)?;
+    writeln!(log_file, "HistBufferSize: {}", pic.HistBufferSize)?;
+    writeln!(log_file, "MbaffFrameFlag: {}", pic.MbaffFrameFlag())?;
+    writeln!(
+        log_file,
+        "direct_8x8_inference_flag: {}",
+        pic.direct_8x8_inference_flag()
+    )?;
+    writeln!(log_file, "weighted_pred_flag: {}", pic.weighted_pred_flag())?;
+    writeln!(
+        log_file,
+        "constrained_intra_pred_flag: {}",
+        pic.constrained_intra_pred_flag()
+    )?;
+    writeln!(log_file, "ref_pic_flag: {}", pic.ref_pic_flag())?;
+    writeln!(log_file, "field_pic_flag: {}", pic.field_pic_flag())?;
+    writeln!(log_file, "bottom_field_flag: {}", pic.bottom_field_flag())?;
+    writeln!(log_file, "second_field: {}", pic.second_field())?;
+    writeln!(
+        log_file,
+        "log2_max_frame_num_minus4: {}",
+        pic.log2_max_frame_num_minus4()
+    )?;
+    writeln!(log_file, "chroma_format_idc: {}", pic.chroma_format_idc())?;
+    writeln!(log_file, "pic_order_cnt_type: {}", pic.pic_order_cnt_type())?;
+    writeln!(
+        log_file,
+        "pic_init_qp_minus26: {}",
+        pic.pic_init_qp_minus26()
+    )?;
+    writeln!(
+        log_file,
+        "chroma_qp_index_offset: {}",
+        pic.chroma_qp_index_offset()
+    )?;
+    writeln!(
+        log_file,
+        "second_chroma_qp_index_offset: {}",
+        pic.second_chroma_qp_index_offset()
+    )?;
+    writeln!(
+        log_file,
+        "weighted_bipred_idc: {}",
+        pic.weighted_bipred_idc()
+    )?;
+    writeln!(log_file, "CurrPicIdx: {}", pic.CurrPicIdx())?;
+    writeln!(log_file, "CurrColIdx: {}", pic.CurrColIdx())?;
+    writeln!(log_file, "frame_num: {}", pic.frame_num())?;
+    writeln!(log_file, "frame_surfaces: {}", pic.frame_surfaces())?;
+    writeln!(
+        log_file,
+        "output_memory_layout: {}",
+        pic.output_memory_layout()
+    )?;
+    writeln!(
+        log_file,
+        "CurrFieldOrderCnt: [{}, {}]",
+        pic.CurrFieldOrderCnt[0], pic.CurrFieldOrderCnt[1]
+    )?;
+
+    for i in 0..16 {
+        writeln!(log_file, "dpb[{}]:", i)?;
+        writeln!(log_file, "  dpb[{}].index: {}", i, pic.dpb[i].index())?;
+        writeln!(log_file, "  dpb[{}].col_idx: {}", i, pic.dpb[i].col_idx())?;
+        writeln!(log_file, "  dpb[{}].state: {}", i, pic.dpb[i].state())?;
+        writeln!(
+            log_file,
+            "  dpb[{}].is_long_term: {}",
+            i,
+            pic.dpb[i].is_long_term()
+        )?;
+        writeln!(
+            log_file,
+            "  dpb[{}].not_existing: {}",
+            i,
+            pic.dpb[i].not_existing()
+        )?;
+        writeln!(log_file, "  dpb[{}].is_field: {}", i, pic.dpb[i].is_field())?;
+        writeln!(
+            log_file,
+            "  dpb[{}].top_field_marking: {}",
+            i,
+            pic.dpb[i].top_field_marking()
+        )?;
+        writeln!(
+            log_file,
+            "  dpb[{}].bottom_field_marking: {}",
+            i,
+            pic.dpb[i].bottom_field_marking()
+        )?;
+        writeln!(
+            log_file,
+            "  dpb[{}].output_memory_layout: {}",
+            i,
+            pic.dpb[i].output_memory_layout()
+        )?;
+        writeln!(
+            log_file,
+            "  dpb[{}].FieldOrderCnt: [{}, {}]",
+            i, pic.dpb[i].FieldOrderCnt[0], pic.dpb[i].FieldOrderCnt[1]
+        )?;
+        writeln!(log_file, "  dpb[{}].FrameIdx: {}", i, pic.dpb[i].FrameIdx)?;
+    }
+
+    writeln!(log_file, "WeightScale:")?;
+    for i in 0..6 {
+        for j in 0..4 {
+            for k in 0..4 {
+                writeln!(
+                    log_file,
+                    "  WeightScale[{}][{}][{}]: {}",
+                    i, j, k, pic.WeightScale[i][j][k]
+                )?;
+            }
+        }
+    }
+
+    writeln!(log_file, "WeightScale8x8:")?;
+    for i in 0..2 {
+        for j in 0..8 {
+            for k in 0..8 {
+                writeln!(
+                    log_file,
+                    "  WeightScale8x8[{}][{}][{}]: {}",
+                    i, j, k, pic.WeightScale8x8[i][j][k]
+                )?;
+            }
+        }
+    }
+
+    writeln!(
+        log_file,
+        "num_inter_view_refs_lX: [{}, {}]",
+        pic.num_inter_view_refs_lX[0], pic.num_inter_view_refs_lX[1]
+    )?;
+
+    writeln!(log_file, "inter_view_refidx_lX:")?;
+    for i in 0..2 {
+        for j in 0..16 {
+            writeln!(
+                log_file,
+                "  inter_view_refidx_lX[{}][{}]: {}",
+                i, j, pic.inter_view_refidx_lX[i][j]
+            )?;
+        }
+    }
+
+    writeln!(
+        log_file,
+        "lossless_ipred8x8_filter_enable: {}",
+        pic.lossless_ipred8x8_filter_enable()
+    )?;
+    writeln!(
+        log_file,
+        "qpprime_y_zero_transform_bypass_flag: {}",
+        pic.qpprime_y_zero_transform_bypass_flag()
+    )?;
+    writeln!(log_file, "displayPara: ...")?;
+    writeln!(log_file, "ssm: ...")?;
+
+    Ok(())
+}
+
+pub(crate) fn dump_nvdec_hevc_pic_s(
+    pic: &_nvdec_hevc_pic_s,
+    file_name: &str,
+) -> io::Result<()> {
+    let mut log_file = std::fs::OpenOptions::new()
+        .create(true)
+        .append(true)
+        .open(file_name)?;
+
+    writeln!(log_file, "wrapped_session_key: ")?;
+    for &key in &pic.wrapped_session_key {
+        write!(log_file, "{:08x} ", key)?;
+    }
+    writeln!(log_file)?;
+
+    writeln!(log_file, "wrapped_content_key: ")?;
+    for &key in &pic.wrapped_content_key {
+        write!(log_file, "{:08x} ", key)?;
+    }
+    writeln!(log_file)?;
+
+    writeln!(log_file, "initialization_vector: ")?;
+    for &iv in &pic.initialization_vector {
+        write!(log_file, "{:08x} ", iv)?;
+    }
+    writeln!(log_file)?;
+
+    writeln!(log_file, "stream_len: {}", pic.stream_len)?;
+    writeln!(log_file, "enable_encryption: {}", pic.enable_encryption)?;
+    writeln!(log_file, "key_increment: {}", pic.key_increment())?;
+    writeln!(log_file, "encryption_mode: {}", pic.encryption_mode())?;
+    writeln!(log_file, "key_slot_index: {}", pic.key_slot_index())?;
+    writeln!(log_file, "ssm_en: {}", pic.ssm_en())?;
+    writeln!(log_file, "enable_histogram: {}", pic.enable_histogram())?;
+    writeln!(
+        log_file,
+        "enable_substream_decoding: {}",
+        pic.enable_substream_decoding()
+    )?;
+    writeln!(
+        log_file,
+        "gptimer_timeout_value: {}",
+        pic.gptimer_timeout_value
+    )?;
+    writeln!(log_file, "tileformat: {}", pic.tileformat())?;
+    writeln!(log_file, "gob_height: {}", pic.gob_height())?;
+    writeln!(
+        log_file,
+        "reserverd_surface_format: {}",
+        pic.reserverd_surface_format()
+    )?;
+    writeln!(log_file, "sw_start_code_e: {}", pic.sw_start_code_e)?;
+    writeln!(log_file, "disp_output_mode: {}", pic.disp_output_mode)?;
+    writeln!(log_file, "reserved1: {}", pic.reserved1)?;
+    writeln!(
+        log_file,
+        "framestride: [{}, {}]",
+        pic.framestride[0], pic.framestride[1]
+    )?;
+    writeln!(log_file, "colMvBuffersize: {}", pic.colMvBuffersize)?;
+    writeln!(log_file, "HevcSaoBufferOffset: {}", pic.HevcSaoBufferOffset)?;
+    writeln!(log_file, "HevcBsdCtrlOffset: {}", pic.HevcBsdCtrlOffset)?;
+    writeln!(
+        log_file,
+        "pic_width_in_luma_samples: {}",
+        pic.pic_width_in_luma_samples
+    )?;
+    writeln!(
+        log_file,
+        "pic_height_in_luma_samples: {}",
+        pic.pic_height_in_luma_samples
+    )?;
+    writeln!(log_file, "chroma_format_idc: {}", pic.chroma_format_idc())?;
+    writeln!(log_file, "bit_depth_luma: {}", pic.bit_depth_luma())?;
+    writeln!(log_file, "bit_depth_chroma: {}", pic.bit_depth_chroma())?;
+    writeln!(
+        log_file,
+        "log2_min_luma_coding_block_size: {}",
+        pic.log2_min_luma_coding_block_size()
+    )?;
+    writeln!(
+        log_file,
+        "log2_max_luma_coding_block_size: {}",
+        pic.log2_max_luma_coding_block_size()
+    )?;
+    writeln!(
+        log_file,
+        "log2_min_transform_block_size: {}",
+        pic.log2_min_transform_block_size()
+    )?;
+    writeln!(
+        log_file,
+        "log2_max_transform_block_size: {}",
+        pic.log2_max_transform_block_size()
+    )?;
+    writeln!(
+        log_file,
+        "max_transform_hierarchy_depth_inter: {}",
+        pic.max_transform_hierarchy_depth_inter()
+    )?;
+    writeln!(
+        log_file,
+        "max_transform_hierarchy_depth_intra: {}",
+        pic.max_transform_hierarchy_depth_intra()
+    )?;
+    writeln!(log_file, "scalingListEnable: {}", pic.scalingListEnable())?;
+    writeln!(log_file, "amp_enable_flag: {}", pic.amp_enable_flag())?;
+    writeln!(
+        log_file,
+        "sample_adaptive_offset_enabled_flag: {}",
+        pic.sample_adaptive_offset_enabled_flag()
+    )?;
+    writeln!(log_file, "pcm_enabled_flag: {}", pic.pcm_enabled_flag())?;
+    writeln!(
+        log_file,
+        "pcm_sample_bit_depth_luma: {}",
+        pic.pcm_sample_bit_depth_luma()
+    )?;
+    writeln!(
+        log_file,
+        "pcm_sample_bit_depth_chroma: {}",
+        pic.pcm_sample_bit_depth_chroma()
+    )?;
+    writeln!(
+        log_file,
+        "log2_min_pcm_luma_coding_block_size: {}",
+        pic.log2_min_pcm_luma_coding_block_size()
+    )?;
+    writeln!(
+        log_file,
+        "log2_max_pcm_luma_coding_block_size: {}",
+        pic.log2_max_pcm_luma_coding_block_size()
+    )?;
+    writeln!(
+        log_file,
+        "pcm_loop_filter_disabled_flag: {}",
+        pic.pcm_loop_filter_disabled_flag()
+    )?;
+    writeln!(
+        log_file,
+        "sps_temporal_mvp_enabled_flag: {}",
+        pic.sps_temporal_mvp_enabled_flag()
+    )?;
+    writeln!(
+        log_file,
+        "strong_intra_smoothing_enabled_flag: {}",
+        pic.strong_intra_smoothing_enabled_flag()
+    )?;
+    writeln!(
+        log_file,
+        "dependent_slice_segments_enabled_flag: {}",
+        pic.dependent_slice_segments_enabled_flag()
+    )?;
+    writeln!(
+        log_file,
+        "output_flag_present_flag: {}",
+        pic.output_flag_present_flag()
+    )?;
+    writeln!(
+        log_file,
+        "num_extra_slice_header_bits: {}",
+        pic.num_extra_slice_header_bits()
+    )?;
+    writeln!(
+        log_file,
+        "sign_data_hiding_enabled_flag: {}",
+        pic.sign_data_hiding_enabled_flag()
+    )?;
+    writeln!(
+        log_file,
+        "cabac_init_present_flag: {}",
+        pic.cabac_init_present_flag()
+    )?;
+    writeln!(
+        log_file,
+        "num_ref_idx_l0_default_active: {}",
+        pic.num_ref_idx_l0_default_active()
+    )?;
+    writeln!(
+        log_file,
+        "num_ref_idx_l1_default_active: {}",
+        pic.num_ref_idx_l1_default_active()
+    )?;
+    writeln!(log_file, "init_qp: {}", pic.init_qp())?;
+    writeln!(
+        log_file,
+        "constrained_intra_pred_flag: {}",
+        pic.constrained_intra_pred_flag()
+    )?;
+    writeln!(
+        log_file,
+        "transform_skip_enabled_flag: {}",
+        pic.transform_skip_enabled_flag()
+    )?;
+    writeln!(
+        log_file,
+        "cu_qp_delta_enabled_flag: {}",
+        pic.cu_qp_delta_enabled_flag()
+    )?;
+    writeln!(
+        log_file,
+        "diff_cu_qp_delta_depth: {}",
+        pic.diff_cu_qp_delta_depth()
+    )?;
+    writeln!(log_file, "pps_cb_qp_offset: {}", pic.pps_cb_qp_offset)?;
+    writeln!(log_file, "pps_cr_qp_offset: {}", pic.pps_cr_qp_offset)?;
+    writeln!(log_file, "pps_beta_offset: {}", pic.pps_beta_offset)?;
+    writeln!(log_file, "pps_tc_offset: {}", pic.pps_tc_offset)?;
+    writeln!(
+        log_file,
+        "pps_slice_chroma_qp_offsets_present_flag: {}",
+        pic.pps_slice_chroma_qp_offsets_present_flag()
+    )?;
+    writeln!(log_file, "weighted_pred_flag: {}", pic.weighted_pred_flag())?;
+    writeln!(
+        log_file,
+        "weighted_bipred_flag: {}",
+        pic.weighted_bipred_flag()
+    )?;
+    writeln!(
+        log_file,
+        "transquant_bypass_enabled_flag: {}",
+        pic.transquant_bypass_enabled_flag()
+    )?;
+    writeln!(log_file, "tiles_enabled_flag: {}", pic.tiles_enabled_flag())?;
+    writeln!(
+        log_file,
+        "entropy_coding_sync_enabled_flag: {}",
+        pic.entropy_coding_sync_enabled_flag()
+    )?;
+    writeln!(log_file, "num_tile_columns: {}", pic.num_tile_columns())?;
+    writeln!(log_file, "num_tile_rows: {}", pic.num_tile_rows())?;
+    writeln!(
+        log_file,
+        "loop_filter_across_tiles_enabled_flag: {}",
+        pic.loop_filter_across_tiles_enabled_flag()
+    )?;
+    writeln!(
+        log_file,
+        "loop_filter_across_slices_enabled_flag: {}",
+        pic.loop_filter_across_slices_enabled_flag()
+    )?;
+    writeln!(
+        log_file,
+        "deblocking_filter_control_present_flag: {}",
+        pic.deblocking_filter_control_present_flag()
+    )?;
+    writeln!(
+        log_file,
+        "deblocking_filter_override_enabled_flag: {}",
+        pic.deblocking_filter_override_enabled_flag()
+    )?;
+    writeln!(
+        log_file,
+        "pps_deblocking_filter_disabled_flag: {}",
+        pic.pps_deblocking_filter_disabled_flag()
+    )?;
+    writeln!(
+        log_file,
+        "lists_modification_present_flag: {}",
+        pic.lists_modification_present_flag()
+    )?;
+    writeln!(
+        log_file,
+        "log2_parallel_merge_level: {}",
+        pic.log2_parallel_merge_level()
+    )?;
+    writeln!(
+        log_file,
+        "slice_segment_header_extension_present_flag: {}",
+        pic.slice_segment_header_extension_present_flag()
+    )?;
+    writeln!(log_file, "num_ref_frames: {}", pic.num_ref_frames)?;
+    writeln!(log_file, "reserved6: {}", pic.reserved6)?;
+    writeln!(log_file, "longtermflag: {}", pic.longtermflag)?;
+    writeln!(log_file, "initreflistidxl0: {:?}", pic.initreflistidxl0)?;
+    writeln!(log_file, "initreflistidxl1: {:?}", pic.initreflistidxl1)?;
+    writeln!(
+        log_file,
+        "RefDiffPicOrderCnts: {:?}",
+        pic.RefDiffPicOrderCnts
+    )?;
+    writeln!(log_file, "IDR_picture_flag: {}", pic.IDR_picture_flag)?;
+    writeln!(log_file, "RAP_picture_flag: {}", pic.RAP_picture_flag)?;
+    writeln!(log_file, "curr_pic_idx: {}", pic.curr_pic_idx)?;
+    writeln!(log_file, "pattern_id: {}", pic.pattern_id)?;
+    writeln!(log_file, "sw_hdr_skip_length: {}", pic.sw_hdr_skip_length)?;
+    writeln!(log_file, "reserved7: {}", pic.reserved7)?;
+    writeln!(
+        log_file,
+        "separate_colour_plane_flag: {}",
+        pic.separate_colour_plane_flag()
+    )?;
+    writeln!(
+        log_file,
+        "log2_max_pic_order_cnt_lsb_minus4: {}",
+        pic.log2_max_pic_order_cnt_lsb_minus4()
+    )?;
+    writeln!(
+        log_file,
+        "num_short_term_ref_pic_sets: {}",
+        pic.num_short_term_ref_pic_sets()
+    )?;
+    writeln!(
+        log_file,
+        "num_long_term_ref_pics_sps: {}",
+        pic.num_long_term_ref_pics_sps()
+    )?;
+    writeln!(log_file, "bBitParsingDisable: {}", pic.bBitParsingDisable())?;
+    writeln!(
+        log_file,
+        "num_delta_pocs_of_rps_idx: {}",
+        pic.num_delta_pocs_of_rps_idx()
+    )?;
+    writeln!(
+        log_file,
+        "long_term_ref_pics_present_flag: {}",
+        pic.long_term_ref_pics_present_flag()
+    )?;
+    writeln!(log_file, "reserved_dxva: {}", pic.reserved_dxva())?;
+    writeln!(
+        log_file,
+        "num_bits_short_term_ref_pics_in_slice: {}",
+        pic.num_bits_short_term_ref_pics_in_slice
+    )?;
+    writeln!(log_file, "v1: ...",)?;
+    writeln!(log_file, "v2: ...",)?;
+    writeln!(log_file, "v3: ...",)?;
+    writeln!(log_file, "ssm: ...",)?;
+
+    Ok(())
+}
diff --git a/src/nouveau/vulkan/video/video.h b/src/nouveau/vulkan/video/video.h
new file mode 100644
index 0000000000000000000000000000000000000000..1e14885b0c6105e1d4175cc7a401dfc5eff75976
--- /dev/null
+++ b/src/nouveau/vulkan/video/video.h
@@ -0,0 +1,19 @@
+/*
+ * Copyright © 2024 Collabora Ltd. and Red Hat Inc.
+ * SPDX-License-Identifier: MIT
+ */
+
+#include <nvk_cmd_buffer.h>
+#include <nvk_image_view.h>
+#include <vulkan/vulkan_core.h>
+
+void nvk_video_cmd_begin_video_coding_khr(struct nvk_cmd_buffer *cmd,
+                                          const VkVideoBeginCodingInfoKHR *pBeginInfo);
+
+void nvk_video_cmd_decode_video_khr(struct nvk_cmd_buffer *cmd,
+                                    const struct VkVideoDecodeInfoKHR *frame_info,
+                                    const struct nvk_buffer *src_buffer,
+                                    struct nvk_image_view *dst_iv);
+
+void nvk_video_create_video_session(struct nvk_video_session *pVideoSession);
+void nvk_video_destroy_video_session(struct nvk_video_session *pVideoSession);
diff --git a/src/nouveau/vulkan/video/video_bindings.h b/src/nouveau/vulkan/video/video_bindings.h
new file mode 100644
index 0000000000000000000000000000000000000000..382463b2dcbed2f05ff8336346581204de217c9e
--- /dev/null
+++ b/src/nouveau/vulkan/video/video_bindings.h
@@ -0,0 +1,15 @@
+/*
+ * Copyright © 2024 Collabora Ltd. and Red Hat Inc.
+ * SPDX-License-Identifier: MIT
+ */
+
+#include "vulkan/runtime/vk_video.h"
+#include "vulkan/util/vk_util.h"
+#include "nouveau/headers/nv_push.h"
+#include "nouveau/vulkan/nvk_device_memory.h"
+#include "nouveau/vulkan/nvk_buffer.h"
+#include "nouveau/vulkan/nvk_image_view.h"
+#include "nouveau/vulkan/nvk_image.h"
+#include "nouveau/vulkan/nvk_cmd_buffer.h"
+#include "nouveau/vulkan/nvk_video.h"
+#include "nouveau/headers/nvidia/nvdec_drv.h"
\ No newline at end of file
diff --git a/src/nouveau/winsys/nouveau_context.c b/src/nouveau/winsys/nouveau_context.c
index d5f8ebbcfaa19924d5d09f7a9741c34956a3b98f..84d332e14f6a3254a9d2e8c950af008b3491097c 100644
--- a/src/nouveau/winsys/nouveau_context.c
+++ b/src/nouveau/winsys/nouveau_context.c
@@ -228,3 +228,49 @@ nouveau_ws_context_killed(struct nouveau_ws_context *context)
    /* nouveau returns ENODEV once the channel was killed */
    return ret == -ENODEV;
 }
+
+int
+nouveau_ws_vid_context_create(struct nouveau_ws_device *dev, struct nouveau_ws_vid_context **out)
+{
+   struct drm_nouveau_channel_alloc req = { .fb_ctxdma_handle = ~0, .tt_ctxdma_handle = 0x300 };
+   uint32_t classes[NOUVEAU_WS_CONTEXT_MAX_CLASSES];
+   uint32_t base;
+
+   *out = CALLOC_STRUCT(nouveau_ws_vid_context);
+   if (!*out)
+      return -ENOMEM;
+
+   int ret = drmCommandWriteRead(dev->fd, DRM_NOUVEAU_CHANNEL_ALLOC, &req, sizeof(req));
+   if (ret)
+      goto fail_chan;
+
+   ret = nouveau_ws_context_query_classes(dev->fd, req.channel, classes);
+   if (ret)
+      goto fail_chan;
+
+   base = (0xbeef + req.channel) << 16;
+   uint32_t obj_class = nouveau_ws_context_find_class(classes, 0xb0);
+   ret = nouveau_ws_subchan_alloc(dev->fd, req.channel, base | 0x00b0, obj_class,
+                                  &(*out)->dec);
+   if (ret)
+      goto fail_subchan;
+
+   (*out)->channel = req.channel;
+   (*out)->dev = dev;
+   return 0;
+
+fail_subchan:
+   nouveau_ws_subchan_dealloc(dev->fd, &(*out)->dec);
+   nouveau_ws_channel_dealloc(dev->fd, req.channel);
+fail_chan:
+   FREE(*out);
+   return ret;
+}
+
+void
+nouveau_ws_vid_context_destroy(struct nouveau_ws_vid_context *context)
+{
+   nouveau_ws_subchan_dealloc(context->dev->fd, &context->dec);
+   nouveau_ws_channel_dealloc(context->dev->fd, context->channel);
+   FREE(context);
+}
diff --git a/src/nouveau/winsys/nouveau_context.h b/src/nouveau/winsys/nouveau_context.h
index 3eb8fa36117aa90ef5971716479abcec955f0474..9cda32a7b074595e4cffea01f79bb685e149cc55 100644
--- a/src/nouveau/winsys/nouveau_context.h
+++ b/src/nouveau/winsys/nouveau_context.h
@@ -19,6 +19,7 @@ enum nouveau_ws_engines {
    NOUVEAU_WS_ENGINE_3D       = (1 << 2),
    NOUVEAU_WS_ENGINE_M2MF     = (1 << 3),
    NOUVEAU_WS_ENGINE_COMPUTE  = (1 << 4),
+   NOUVEAU_WS_ENGINE_VIDEO    = (1 << 6),
 };
 
 struct nouveau_ws_context {
@@ -33,11 +34,22 @@ struct nouveau_ws_context {
    struct nouveau_ws_object compute;
 };
 
+struct nouveau_ws_vid_context {
+   struct nouveau_ws_device *dev;
+
+   int channel;
+
+   struct nouveau_ws_object dec;
+};
+
 int nouveau_ws_context_create(struct nouveau_ws_device *,
                               enum nouveau_ws_engines engines,
                               struct nouveau_ws_context **out);
+
 bool nouveau_ws_context_killed(struct nouveau_ws_context *);
 void nouveau_ws_context_destroy(struct nouveau_ws_context *);
+int nouveau_ws_vid_context_create(struct nouveau_ws_device *dev, struct nouveau_ws_vid_context **out);
+void nouveau_ws_vid_context_destroy(struct nouveau_ws_vid_context *context);
 
 #ifdef __cplusplus
 }
diff --git a/src/nouveau/winsys/nouveau_device.c b/src/nouveau/winsys/nouveau_device.c
index 925df476be9b41a376113a06ebdc80db007f66e5..ac1ba301b397ffb491d3b49a9c75c1f6ad771ea0 100644
--- a/src/nouveau/winsys/nouveau_device.c
+++ b/src/nouveau/winsys/nouveau_device.c
@@ -365,6 +365,13 @@ nouveau_ws_device_new(drmDevicePtr drm_device)
 
    nouveau_ws_context_destroy(tmp_ctx);
 
+   struct nouveau_ws_vid_context *tmp_vid_ctx;
+   if(nouveau_ws_vid_context_create(device, &tmp_vid_ctx))
+      goto out_err;
+   device->info.cls_video = tmp_vid_ctx->dec.cls;
+
+   nouveau_ws_vid_context_destroy(tmp_vid_ctx);
+
    simple_mtx_init(&device->bos_lock, mtx_plain);
    device->bos = _mesa_pointer_hash_table_create(NULL);
 
