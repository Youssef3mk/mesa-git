diff -up a/mesa/src/nouveau/vulkan/nvk_cmd_copy.c b/mesa/src/nouveau/vulkan/nvk_cmd_copy.c
--- a/mesa/src/nouveau/vulkan/nvk_cmd_copy.c	2025-09-23 14:06:30.570746765 +0300
+++ b/mesa/src/nouveau/vulkan/nvk_cmd_copy.c	2025-09-23 14:16:05.833319540 +0300
@@ -382,33 +382,26 @@ nvk_CmdCopyBuffer2(VkCommandBuffer comma
       uint64_t dst_addr = vk_buffer_address(&dst->vk, region->dstOffset);
       uint64_t size = region->size;
 
-      while (size) {
-         struct nv_push *p = nvk_cmd_buffer_push(cmd, 10);
+   struct nv_push *p = nvk_cmd_buffer_push(cmd, 10);
+
+   P_MTHD(p, NV90B5, OFFSET_IN_UPPER);
+   P_NV90B5_OFFSET_IN_UPPER(p, src_addr >> 32);
+   P_NV90B5_OFFSET_IN_LOWER(p, src_addr & 0xffffffff);
+   P_NV90B5_OFFSET_OUT_UPPER(p, dst_addr >> 32);
+   P_NV90B5_OFFSET_OUT_LOWER(p, dst_addr & 0xffffffff);
+
+   P_MTHD(p, NV90B5, LINE_LENGTH_IN);
+   P_NV90B5_LINE_LENGTH_IN(p, size);
+   P_NV90B5_LINE_COUNT(p, 1);
+
+   P_IMMD(p, NV90B5, LAUNCH_DMA, {
+          .data_transfer_type = DATA_TRANSFER_TYPE_NON_PIPELINED,
+          .multi_line_enable = MULTI_LINE_ENABLE_FALSE,
+          .flush_enable = FLUSH_ENABLE_TRUE,
+          .src_memory_layout = SRC_MEMORY_LAYOUT_PITCH,
+          .dst_memory_layout = DST_MEMORY_LAYOUT_PITCH,
+   });
 
-         P_MTHD(p, NV90B5, OFFSET_IN_UPPER);
-         P_NV90B5_OFFSET_IN_UPPER(p, src_addr >> 32);
-         P_NV90B5_OFFSET_IN_LOWER(p, src_addr & 0xffffffff);
-         P_NV90B5_OFFSET_OUT_UPPER(p, dst_addr >> 32);
-         P_NV90B5_OFFSET_OUT_LOWER(p, dst_addr & 0xffffffff);
-
-         unsigned bytes = MIN2(size, 1 << 17);
-
-         P_MTHD(p, NV90B5, LINE_LENGTH_IN);
-         P_NV90B5_LINE_LENGTH_IN(p, bytes);
-         P_NV90B5_LINE_COUNT(p, 1);
-
-         P_IMMD(p, NV90B5, LAUNCH_DMA, {
-                .data_transfer_type = DATA_TRANSFER_TYPE_NON_PIPELINED,
-                .multi_line_enable = MULTI_LINE_ENABLE_TRUE,
-                .flush_enable = FLUSH_ENABLE_TRUE,
-                .src_memory_layout = SRC_MEMORY_LAYOUT_PITCH,
-                .dst_memory_layout = DST_MEMORY_LAYOUT_PITCH,
-         });
-
-         src_addr += bytes;
-         dst_addr += bytes;
-         size -= bytes;
-      }
    }
 }
 
@@ -895,10 +888,7 @@ nvk_CmdFillBuffer(VkCommandBuffer comman
 
    uint64_t dst_addr = vk_buffer_address(&dst_buffer->vk, dstOffset);
    size = vk_buffer_range(&dst_buffer->vk, dstOffset, size);
-
-   uint32_t max_dim = 1 << 15;
-
-   struct nv_push *p = nvk_cmd_buffer_push(cmd, 7);
+  struct nv_push *p = nvk_cmd_buffer_push(cmd, 15);
 
    P_IMMD(p, NV90B5, SET_REMAP_CONST_A, data);
    P_IMMD(p, NV90B5, SET_REMAP_COMPONENTS, {
@@ -912,47 +902,32 @@ nvk_CmdFillBuffer(VkCommandBuffer comman
    });
 
    P_MTHD(p, NV90B5, PITCH_IN);
-   P_NV90B5_PITCH_IN(p, max_dim * 4);
-   P_NV90B5_PITCH_OUT(p, max_dim * 4);
+   P_NV90B5_PITCH_IN(p, size);
+   P_NV90B5_PITCH_OUT(p, size);
 
-   while (size >= 4) {
-      struct nv_push *p = nvk_cmd_buffer_push(cmd, 8);
 
-      P_MTHD(p, NV90B5, OFFSET_OUT_UPPER);
-      P_NV90B5_OFFSET_OUT_UPPER(p, dst_addr >> 32);
-      P_NV90B5_OFFSET_OUT_LOWER(p, dst_addr & 0xffffffff);
-
-      uint64_t width, height;
-      if (size >= (uint64_t)max_dim * (uint64_t)max_dim * 4) {
-         width = height = max_dim;
-      } else if (size >= max_dim * 4) {
-         width = max_dim;
-         height = size / (max_dim * 4);
-      } else {
-         width = size / 4;
-         height = 1;
-      }
+   P_MTHD(p, NV90B5, OFFSET_OUT_UPPER);
+   P_NV90B5_OFFSET_OUT_UPPER(p, dst_addr >> 32);
+   P_NV90B5_OFFSET_OUT_LOWER(p, dst_addr & 0xffffffff);
+
+
+   P_MTHD(p, NV90B5, LINE_LENGTH_IN);
+   P_NV90B5_LINE_LENGTH_IN(p, size / 4);
+   P_NV90B5_LINE_COUNT(p, 1);
+
+
+   P_IMMD(p, NV90B5, LAUNCH_DMA, {
+      .data_transfer_type = DATA_TRANSFER_TYPE_NON_PIPELINED,
+      .multi_line_enable = MULTI_LINE_ENABLE_FALSE,
+      .flush_enable = FLUSH_ENABLE_TRUE,
+      .src_memory_layout = SRC_MEMORY_LAYOUT_PITCH,
+      .dst_memory_layout = DST_MEMORY_LAYOUT_PITCH,
+      .remap_enable = REMAP_ENABLE_TRUE,
+   });
+ }
 
-      uint64_t dma_size = (uint64_t)width * (uint64_t)height * 4;
-      assert(dma_size <= size);
 
-      P_MTHD(p, NV90B5, LINE_LENGTH_IN);
-      P_NV90B5_LINE_LENGTH_IN(p, width);
-      P_NV90B5_LINE_COUNT(p, height);
-
-      P_IMMD(p, NV90B5, LAUNCH_DMA, {
-         .data_transfer_type = DATA_TRANSFER_TYPE_NON_PIPELINED,
-         .multi_line_enable = height > 1,
-         .flush_enable = FLUSH_ENABLE_TRUE,
-         .src_memory_layout = SRC_MEMORY_LAYOUT_PITCH,
-         .dst_memory_layout = DST_MEMORY_LAYOUT_PITCH,
-         .remap_enable = REMAP_ENABLE_TRUE,
-      });
 
-      dst_addr += dma_size;
-      size -= dma_size;
-   }
-}
 
 VKAPI_ATTR void VKAPI_CALL
 nvk_CmdUpdateBuffer(VkCommandBuffer commandBuffer,
diff -up a/mesa/src/nouveau/vulkan/nvk_upload_queue.c b/mesa/src/nouveau/vulkan/nvk_upload_queue.c
--- a/mesa/src/nouveau/vulkan/nvk_upload_queue.c	2025-09-23 14:06:40.229462804 +0300
+++ b/mesa/src/nouveau/vulkan/nvk_upload_queue.c	2025-09-23 14:30:33.722147213 +0300
@@ -215,57 +215,48 @@ nvk_upload_queue_fill_locked(struct nvk_
    assert(dst_addr % 4 == 0);
    assert(size % 4 == 0);
 
-   while (size > 0) {
-      const uint32_t cmd_size_dw = 14;
-      if (queue->push.end + cmd_size_dw > queue->push.limit) {
-         result = nvk_upload_queue_flush_locked(dev, queue, NULL);
-         if (result != VK_SUCCESS)
-            return result;
-      }
-      struct nv_push *p = &queue->push;
-
-      const uint32_t max_dim = 1 << 17;
-      uint32_t width_B, height;
-      if (size > max_dim) {
-         width_B = max_dim;
-         height = MIN2(max_dim, size / width_B);
-      } else {
-         width_B = size;
-         height = 1;
-      }
-      assert(width_B * height <= size);
-
-      P_MTHD(p, NV90B5, OFFSET_OUT_UPPER);
-      P_NV90B5_OFFSET_OUT_UPPER(p, dst_addr >> 32);
-      P_NV90B5_OFFSET_OUT_LOWER(p, dst_addr & 0xffffffff);
-      P_NV90B5_PITCH_IN(p, width_B);
-      P_NV90B5_PITCH_OUT(p, width_B);
-      P_NV90B5_LINE_LENGTH_IN(p, width_B / 4);
-      P_NV90B5_LINE_COUNT(p, height);
-
-      P_IMMD(p, NV90B5, SET_REMAP_CONST_A, data);
-      P_IMMD(p, NV90B5, SET_REMAP_COMPONENTS, {
-         .dst_x = DST_X_CONST_A,
-         .dst_y = DST_Y_CONST_A,
-         .dst_z = DST_Z_CONST_A,
-         .dst_w = DST_W_CONST_A,
-         .component_size = COMPONENT_SIZE_FOUR,
-         .num_src_components = NUM_SRC_COMPONENTS_ONE,
-         .num_dst_components = NUM_DST_COMPONENTS_ONE,
-      });
-
-      P_IMMD(p, NV90B5, LAUNCH_DMA, {
-         .data_transfer_type = DATA_TRANSFER_TYPE_NON_PIPELINED,
-         .multi_line_enable = height > 1,
-         .flush_enable = FLUSH_ENABLE_TRUE,
-         .src_memory_layout = SRC_MEMORY_LAYOUT_PITCH,
-         .dst_memory_layout = DST_MEMORY_LAYOUT_PITCH,
-         .remap_enable = REMAP_ENABLE_TRUE,
-      });
-
-      dst_addr += width_B * height;
-      size -= width_B * height;
-   }
+   const uint32_t cmd_size_dw = 14;
+   const uint32_t cmd_size = cmd_size_dw * 4;
+
+   result = nvk_upload_queue_reserve(dev, queue, cmd_size);
+   if (result != VK_SUCCESS)
+      return result;
+
+
+   struct nv_push p;
+   nv_push_init(&p, queue->mem->mem->map + queue->mem_push_end, cmd_size_dw);
+
+   P_MTHD(&p, NV90B5, OFFSET_OUT_UPPER);
+   P_NV90B5_OFFSET_OUT_UPPER(&p, dst_addr >> 32);
+   P_NV90B5_OFFSET_OUT_LOWER(&p, dst_addr & 0xffffffff);
+   P_NV90B5_PITCH_IN(&p, size);
+   P_NV90B5_PITCH_OUT(&p, size);
+   P_NV90B5_LINE_LENGTH_IN(&p, size / 4);
+   P_NV90B5_LINE_COUNT(&p, 1);
+
+   P_IMMD(&p, NV90B5, SET_REMAP_CONST_A, data);
+   P_IMMD(&p, NV90B5, SET_REMAP_COMPONENTS, {
+      .dst_x = DST_X_CONST_A,
+      .dst_y = DST_Y_CONST_A,
+      .dst_z = DST_Z_CONST_A,
+      .dst_w = DST_W_CONST_A,
+      .component_size = COMPONENT_SIZE_FOUR,
+      .num_src_components = NUM_SRC_COMPONENTS_ONE,
+      .num_dst_components = NUM_DST_COMPONENTS_ONE,
+   });
+
+   P_IMMD(&p, NV90B5, LAUNCH_DMA, {
+      .data_transfer_type = DATA_TRANSFER_TYPE_NON_PIPELINED,
+      .multi_line_enable = MULTI_LINE_ENABLE_FALSE,
+      .flush_enable = FLUSH_ENABLE_TRUE,
+      .src_memory_layout = SRC_MEMORY_LAYOUT_PITCH,
+      .dst_memory_layout = DST_MEMORY_LAYOUT_PITCH,
+      .remap_enable = REMAP_ENABLE_TRUE,
+   });
+
+   assert(nv_push_dw_count(&p) <= cmd_size_dw);
+   queue->mem_push_end += nv_push_dw_count(&p) * 4;
+
 
    return VK_SUCCESS;
 }
